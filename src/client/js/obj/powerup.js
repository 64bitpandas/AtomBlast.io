import * as PIXI from 'pixi.js';
import { Player } from './player.js';
import { GLOBAL } from '../global.js';
import { GameObject } from '../obj/gameobject';
import { distanceBetween } from '../global.js';
import { screenCenterX, screenCenterY, player } from '../pixigame.js';
import { socket } from '../app.js';

export class Powerup extends GameObject {

    /**
     * Creates a Powerup at the given coordinates. If no coordinates are given, then 
     * the powerup spawns in a random location.
     * @param {PIXI.Texture} texture The texture of the powerup
     * @param {number} id The ID of this powerup (generated by server)
     * @param {number} type The numerical type of this powerup (see createPowerup for details)
     * @param {number} x (optional) X Coordinate of the Powerup 
     * @param {number} y (optional) Y Coordinate of the Powerup 
     * @param {number} vx Horizontal velocity
     * @param {number} vy Vertical velocity
     */
    constructor(texture, id, x, y, vx, vy) {
        // Powerups have a random ID between 100000 and 999999, inclusive.
        super(texture, id, x, y, vx, vy);
        this.height = GLOBAL.POWERUP_RADIUS * 2;
        this.width = GLOBAL.POWERUP_RADIUS * 2;
        this.isEquipped = false;
        this.typeID = -1;
    }

    /**
     * Run when players are nearby to check if they picked this powerup up.
     * If the player is nearby but not close enough to pick up, then it becomes attracted towards the player.
     * @param {Player} player Player to check collision against
     * @returns true if collision detected, false otherwise
     */
    checkCollision(player) {
        if (this.isEquipped || player === undefined)
            return false;
        
        let distance = distanceBetween(this, player);

        // Attractive force
        if(distance < GLOBAL.ATTRACTION_RADIUS) {
            // let theta = Math.tan((this.posY - player.posY)/());
            this.vx += 1/(player.posX - this.posX) * GLOBAL.ATTRACTION_COEFFICIENT;
            this.vy += 1/(player.posY - this.posY) * GLOBAL.ATTRACTION_COEFFICIENT;
            // console.log(this.vx, this.vy, this.posX, this.posY);
            socket.emit('powerupMove', {id: this.id, posX: this.posX, posY: this.posY, vx: this.vx, vy: this.vy});
        }
        else if(this.vx !== 0 || this.vy !== 0) {
            this.vx *= GLOBAL.VELOCITY_STEP;
            this.vy *= GLOBAL.VELOCITY_STEP;
        }

        // Collected by player
        if (distance < GLOBAL.POWERUP_RADIUS + GLOBAL.PLAYER_RADIUS) {
            this.isEquipped = true;
            player.addPowerup(this.typeID);
            socket.emit('powerupCollision', {id: this.id});
            return true;
        }

        return false;
    }

    tick() {

        // Movement
        super.tick();

        if (!this.isEquipped) {
            this.checkCollision(player);
            this.draw();
        }
        else
            this.hide();
    }

    /**
     * MUST OVERRIDE! Consumes the powerup and applies effects
     */
    use() {
        throw new Error('This Powerup must implement use()!');
    }

}

export class HydrogenAtom extends Powerup {

    constructor(id, x, y, vx, vy) {
        super(PIXI.loader.resources[GLOBAL.SPRITES[GLOBAL.P_HYDROGEN_ATOM]].texture, id, x, y, vx, vy);
        this.typeID = GLOBAL.P_HYDROGEN_ATOM;
    }

    use() {

    }
}

/**
 * Returns a new powerup object of the given type.
 * @param {number} typeID ID of the powerup to be created. ID's are as follows:
 * 0: HealthPowerup
 * 1: HydrogenAtom
 * To be Continued
 * @param {number} id The ID of this powerup (generated by server)
 * @param {number} x (optional) x-coordinate of the powerup
 * @param {number} y (optional) y-coordinate of the powerup
 * @param {number} vx Horizontal velocity
 * @param {number} vy Vertical velocity
 */
export function createPowerup(typeID, id, x, y, vx, vy) {
    switch (typeID) {
        case 1:
            return new HydrogenAtom(id, x, y, vx, vy);
        // Tried to create a generic Powerup
        case -1:
            throw new Error('The Powerup object cannot be created without specifying behavior.');
    }

    throw new Error('Powerup of type ' + typeID + ' could not be found!');
}