[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/client/js/app.js",
    "content": "/** \r\n * App.js is responsible for connecting the UI with the game functionality.\r\n * Most of the functionality is used for the main menu and connecting/disconnecting behavior.\r\n */\r\n'use strict';\r\nimport { GLOBAL } from './global.js';\r\nimport * as cookies from './lib/cookies.js';\r\nimport { Player } from './obj/player.js';\r\nimport { spawnAtom } from './obj/atom.js';\r\nimport { GameObject } from './obj/gameobject.js';\r\nimport { BLUEPRINTS } from './obj/blueprints.js';\r\nimport { beginConnection, disconnect } from './socket.js';\r\nimport { player, canCraft, deductCraftMaterial, setIngame, getIngame, startGame, mouseClickHandler } from './pixigame.js';\r\nimport { createNewCompound} from './obj/compound.js';\r\nimport swal from 'sweetalert';\r\n\r\n// Array containing all inputs which require cookies, and their values\r\nexport const cookieInputs = GLOBAL.COOKIES.map(val => document.getElementById(val));\r\n\r\n// Array containing the four chosen blueprints\r\nexport var selectedBlueprints = new Array(GLOBAL.BP_MAX);\r\n\r\nconst nickErrorText = document.getElementById('nickErrorText');\r\n\r\n// Mouse position - used for tooltips\r\nexport let mouseX, mouseY;\r\n\r\n// Currently selected blueprint slot\r\nexport let selectedCompound = 0;\r\n\r\nlet selectedSlot;\r\n\r\n// Starts the game if the name is valid.\r\nfunction joinGame() {\r\n\r\n    if (!allBlueprintsSelected())\r\n        swal('Blueprint(s) not selected', 'Make sure all your blueprint slots are filled before joining a game!', 'error');\r\n    // check if the nick is valid\r\n    else if (validNick()) {\r\n\r\n        // Set cookies for inputs\r\n        for(let i = 0; i < GLOBAL.INPUT_COUNT; i++) {\r\n            cookies.setCookie(GLOBAL.COOKIES[i], cookieInputs[i].value, GLOBAL.COOKIE_DAYS);\r\n        }\r\n\r\n        // Use cookies to set the ingame blueprint slot values\r\n        for(let i = 1; i <= GLOBAL.BP_MAX; i++) {\r\n            selectedBlueprints[i-1] = BLUEPRINTS[cookies.getCookie(GLOBAL.COOKIES[i - 1 + GLOBAL.INPUT_COUNT])];\r\n\r\n            // Check whether blueprint is selected!                     \r\n            document.getElementById('bp-ingame-' + i).innerHTML = selectedBlueprints[i-1].name;                                                                      \r\n        }\r\n\r\n        // Show game window\r\n        showElement('gameAreaWrapper');\r\n        hideElement('startMenuWrapper');\r\n\r\n        // Show loading screen\r\n        showElement('loading');\r\n\r\n        // Cookie Inputs: 0=player, 1=room, 2=team\r\n\r\n        // Connect to server\r\n        beginConnection();\r\n            \r\n    } else {\r\n        nickErrorText.style.display = 'inline';\r\n    }\r\n}\r\n\r\n/** check if nick is valid alphanumeric characters (and underscores)\r\n * @returns true if the nickname is valid, false otherwise\r\n */\r\nfunction validNick() {\r\n    const regex = /^(\\w|_|-| |!|\\.|\\?){2,16}$/;\r\n    for(let i = 0; i < GLOBAL.INPUT_COUNT; i++) {\r\n        if(regex.exec(cookieInputs[i].value) === null && !(i === 1 && cookieInputs[7].value !== 'private'))\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Returns true if all four blueprint slots are filled.\r\n */\r\nfunction allBlueprintsSelected() {\r\n    for(let i = GLOBAL.INPUT_COUNT - 1; i < GLOBAL.INPUT_COUNT + GLOBAL.BP_MAX; i++) {\r\n        if(cookieInputs[i].innerHTML.substring(0, 1) === '-')\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Its a method for testing stuff\r\n */\r\nfunction testHandler() {\r\n    swal('SUCCESS','The test event is invoked!','info');\r\n}\r\n\r\n/** \r\n * Onload function. Initializes the menu screen, creates click events, and loads cookies.\r\n */\r\nwindow.onload = () => {\r\n    \r\n    // Patch logo for firefox\r\n    if(typeof InstallTrigger !== 'undefined')\r\n        document.getElementById('logo').innerHTML = `<img src=\"assets/logo.svg\" id=\"logo-firefox\">`; // eslint-disable-line\r\n\r\n    // Cookie loading - create array of all cookie values\r\n    let cookieValues = GLOBAL.COOKIES.map(val => cookies.getCookie(val));\r\n\r\n    // Continue loading cookies only if it exists\r\n    let i = 0;\r\n    for(let cookie of cookieValues) {\r\n        if(cookie !== null && cookie.length > 0) {\r\n            if(cookieInputs[i].tagName === 'INPUT' || cookieInputs[i].tagName === 'SELECT')\r\n                cookieInputs[i].value = cookie;\r\n            else if(cookieInputs[i].tagName === 'BUTTON' && BLUEPRINTS[cookie] !== undefined)\r\n                cookieInputs[i].innerHTML = BLUEPRINTS[cookie].name;\r\n        }\r\n        i++;\r\n    }\r\n\r\n    // Add listeners to start game to enter key and button click\r\n\r\n    // Eric - Test method do not remove pls\r\n    document.addEventListener('pointerdown', mouseClickHandler);\r\n\r\n    bindHandler('startButton', function () {\r\n        joinGame();\r\n    });\r\n\r\n    bindHandler('quitButton', function () {\r\n        quitGame('You have left the game.', false);\r\n    });\r\n\r\n    bindHandler('exitButton', function () {\r\n        quitGame('The game has ended.', false);\r\n        hideElement('winner-panel');\r\n    });\r\n\r\n    bindHandler('resumeButton', function () {\r\n        hideElement('menubox');\r\n    });\r\n\r\n    bindHandler('optionsButton', function () {\r\n        swal('', 'This feature is not implemented.', 'info');\r\n    });\r\n\r\n    bindHandler('controlsButton', function () {\r\n        swal('', 'This feature is not implemented.', 'info');\r\n    });\r\n\r\n    bindHandler('creditsButton', function () {\r\n        swal('', 'Created by BananiumLabs.com', 'info');\r\n    });\r\n\r\n    bindHandler('btn-start-game', function () {\r\n        console.log('starting game');\r\n        startGame(true);\r\n    });\r\n\r\n    bindHandler('newsBox', function() {\r\n        swal('','hello world','info');\r\n    });\r\n\r\n    // document.getElementById('gameView', onClick, false);\r\n\r\n    for(let i = 0; i < selectedBlueprints.length; i++) {\r\n        bindHandler('bp-ingame-' + (i + 1), function() {\r\n            selectedCompound = i;\r\n            updateCompoundButtons();\r\n        });\r\n    }\r\n\r\n    // Set up the blueprint slot buttons\r\n    for(let i = 1; i <= GLOBAL.BP_MAX; i++) {\r\n        document.getElementById('bp-slot-' + i).onclick = () => {\r\n            showElement('bp-select');\r\n            document.getElementById('bp-select-header').innerHTML = GLOBAL.BP_SELECT + i;\r\n            selectedSlot = i;\r\n        };\r\n    }\r\n\r\n    document.getElementById('btn-close').onclick = () => { hideElement('bp-select'); };\r\n\r\n    // Set up blueprint selection buttons\r\n    for(let blueprint in BLUEPRINTS) {\r\n        let bp = BLUEPRINTS[blueprint];\r\n        let formula = '';\r\n        for(let atom in bp.atoms) {\r\n            formula += atom.toUpperCase() + ((bp.atoms[atom] > 1) ? bp.atoms[atom] : '');\r\n        }\r\n\r\n        document.getElementById('blueprint-wrapper').innerHTML +=\r\n            `\r\n            <button onmouseenter=\"tooltipFollow(this)\" class=\"button width-override col-6 col-12-sm btn-secondary btn-blueprint\" id=\"btn-blueprint-` + blueprint + `\">\r\n                <p>` + bp.name + `</p>\r\n                <h6>-` + formula + `-</h6>\r\n                <img src=\"` + bp.texture + `\">\r\n                <span class=\"tooltip\">` + bp.tooltip + `</span>\r\n            </button>\r\n\r\n            `;\r\n        \r\n    }\r\n\r\n    // Blueprint Slots\r\n    for(let btn of document.getElementsByClassName('btn-blueprint'))\r\n        btn.onclick = () =>  {\r\n            let blueprint = btn.id.substring(14); // Name of the blueprint, the first 14 characters are 'btn-blueprint-'\r\n            console.log(blueprint + ' selected in slot ' + selectedSlot);\r\n            document.getElementById('bp-slot-' + selectedSlot).innerHTML = BLUEPRINTS[blueprint].name;\r\n            hideElement('bp-select');\r\n            cookies.setCookie(GLOBAL.COOKIES[selectedSlot + GLOBAL.INPUT_COUNT - 1], blueprint, GLOBAL.COOKIE_DAYS);\r\n        };\r\n\r\n    // Add enter listeners for all inputs\r\n    for(let i = 0; i < GLOBAL.INPUT_COUNT; i++) {\r\n        cookieInputs[i].addEventListener('keypress', e => {\r\n            const key = e.which || e.keyCode;\r\n    \r\n            if (key === GLOBAL.KEY_ENTER)\r\n                joinGame();\r\n        });\r\n    }\r\n\r\n    // Behavior when room type is changed\r\n    if (cookieInputs[7].value !== 'private')\r\n        hideElement('room');\r\n    else\r\n        showElement('room');\r\n\r\n    cookieInputs[7].onchange = () => {\r\n        if(cookieInputs[7].value === 'private')\r\n            showElement('room');\r\n        else\r\n            hideElement('room');\r\n\r\n        cookies.setCookie(GLOBAL.COOKIES[7], cookieInputs[7].value, GLOBAL.COOKIE_DAYS);\r\n    };\r\n\r\n    // Server changed\r\n    cookieInputs[8].onchange = () => {\r\n        cookies.setCookie(GLOBAL.COOKIES[8], cookieInputs[8].value, GLOBAL.COOKIE_DAYS);\r\n    };\r\n};\r\n\r\n// function onClick(e) {\r\n//     swal('', 'oooooo!!!', 'info');\r\n//     console.log(\"ONCLICK!\");\r\n// }\r\n\r\n/**\r\n * Sets mouse positions for tooltip\r\n */\r\nwindow.onmousemove = (e) => {\r\n    mouseX = e.clientX;\r\n    mouseY = e.clientY;\r\n};\r\n\r\n// function setupEventHandlers() {  \r\n//     document.addEventListener('mousedown', this._onMouseDown.bind(this));    \r\n//     document.addEventListener('mousemove', this._onMouseMove.bind(this));  \r\n//     document.addEventListener('mouseup', this._onMouseUp.bind(this));    \r\n//     document.addEventListener('wheel', this._onWheel.bind(this));    \r\n//     document.addEventListener('touchstart', this._onTouchStart.bind(this));    \r\n//     document.addEventListener('touchmove', this._onTouchMove.bind(this));    \r\n//     document.addEventListener('touchend', this._onTouchEnd.bind(this));    \r\n//     document.addEventListener('touchcancel', this._onTouchCancel.bind(this));    \r\n//     document.addEventListener('pointerdown', this._onPointerDown.bind(this));\r\n// };\r\n\r\n/**\r\n * Transitions from in-game displays to the main menu.\r\n * @param {string} msg The message to be displayed in the menu after disconnect. \r\n * @param {boolean} isError True if the game quit was due to an error; false otherwise.\r\n */\r\nexport function quitGame(msg, isError) {\r\n\r\n    // Disconnect from server\r\n    disconnect();\r\n\r\n    // Set status of ingame\r\n    setIngame(false);\r\n\r\n    // menu\r\n    hideElement('gameAreaWrapper');\r\n    hideElement('hud');\r\n    hideElement('menubox');\r\n    showElement('startMenuWrapper');\r\n    hideElement('lobby');\r\n    swal('Disconnected from Game', msg, (isError) ? 'error' : 'info');\r\n}\r\n\r\n/**\r\n * Binds handlerMethod to onclick event for element id.\r\n * @param {string} id \r\n * @param {function} handlerMethod \r\n */\r\nexport function bindHandler(id, handlerMethod) {\r\n    document.getElementById(id).onclick = handlerMethod;\r\n}\r\n\r\n/**\r\n * Displays a hidden element\r\n * @param {string} el The id of the element to show\r\n */\r\nexport function showElement(el) {\r\n    document.getElementById(el).style.display = 'block';\r\n}\r\n\r\n/**\r\n * Hides a visible element\r\n * @param {string} el The id of the element to hide\r\n */\r\nexport function hideElement(el) {\r\n    document.getElementById(el).style.display = 'none';\r\n}\r\n\r\n/**\r\n * Makes tooltip follow the mouse. Call when a button is hovered.\r\n * @param {HTMLElement} button The element reference for the button currently being hovered.\r\n */\r\nwindow.tooltipFollow = (button) => {\r\n    let tooltip = button.getElementsByClassName('tooltip')[0];\r\n    tooltip.style.top = (mouseY - 150) + 'px';\r\n    tooltip.style.left = (mouseX - 150) + 'px';\r\n};\r\n\r\n/**\r\n * Updates the list of atoms that the player holds.\r\n * Only updates the entry for the particular ID given.\r\n * @param {string} atomID The ID of the atom to update.\r\n */\r\nexport function updateAtomList(atomID) {\r\n    let list = document.getElementById('atom-count');\r\n\r\n    if(document.getElementById('atom-list-' + atomID) === null) {\r\n        let newEntry = document.createElement('li');\r\n        newEntry.setAttribute('id', 'atom-list-' + atomID);\r\n        list.appendChild(newEntry);\r\n    }\r\n\r\n    document.getElementById('atom-list-' + atomID).innerHTML = '' + atomID.charAt(0).toUpperCase() + atomID.substr(1) + ': ' + player.atoms[atomID];\r\n\r\n    updateCompoundButtons(); //No need to update selection\r\n}\r\n\r\n/**\r\n * \r\n * @param {number} selectedSlot The index of the selected slot. 0-3\r\n */\r\nexport function updateCompoundButtons(selectedSlot) {\r\n    if(selectedSlot === undefined)\r\n        selectedSlot = selectedCompound;\r\n    else\r\n        selectedCompound = selectedSlot;\r\n\r\n    for(let i = 0; i < selectedBlueprints.length; i++) {\r\n        if (selectedSlot != i) {\r\n            if(canCraft(selectedBlueprints[i])){\r\n                document.getElementById('bp-ingame-' + (i + 1)).style.background ='#2ecc71';\r\n            }\r\n            else{\r\n                document.getElementById('bp-ingame-' + (i + 1)).style.background = '#C8C8C8';\r\n            }\r\n        }\r\n        else { //is selected\r\n            if (canCraft(selectedBlueprints[i])) {\r\n                document.getElementById('bp-ingame-' + (i + 1)).style.background = '#003CA8';\r\n            }\r\n            else {\r\n                document.getElementById('bp-ingame-' + (i + 1)).style.background = '#3D66D1';\r\n            }\r\n            document.getElementById('bp-select-label').innerHTML = 'Selected Compound: ' + selectedBlueprints[i].name;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Updates the team scoreboard on screen.\r\n */\r\nexport function updateScores(teamSlot, increment) {\r\n    document.getElementById('team-score-' + teamSlot).innerHTML = parseInt(document.getElementById('team-score-' + teamSlot).innerHTML) + increment;\r\n}\r\n\r\n/**\r\n * Run on new player join to sync lobby information\r\n * @param {*} data The data transferred from server\r\n */\r\nexport function updateLobby(data) {\r\n\r\n// Wipe innerHTML first\r\n    let lobby = document.getElementById('team-display');\r\n    lobby.innerHTML = '';\r\n    for(let player in data) {\r\n        if (document.getElementById(data[player].team) === null || document.getElementById(data[player].team) === undefined) {\r\n            lobby.innerHTML += `\r\n            <div class=\"col-3\">\r\n                <h3>` + data[player].team + `</h3>\r\n                <ul id=\"` + data[player].team + `\">\r\n                </ul>\r\n            </div>\r\n            `;\r\n        }\r\n        let listItem = document.createElement('LI');\r\n        listItem.appendChild(document.createTextNode(data[player].name));\r\n        document.getElementById(data[player].team).appendChild(listItem);\r\n    }\r\n}\r\n\r\n/**\r\n * Displays the winner panel after a game has concluded.\r\n * @param {*} data Server sent data, including name and score of winning team.\r\n */\r\nexport function displayWinner(data) {\r\n    // console.log(data);\r\n    document.getElementById('winner-name').innerHTML = data.winner.name + ' has won!';\r\n    showElement('winner-panel');\r\n}\r\n\r\n/**\r\n * Sets all player owned atoms to 9999 only if method is called on a DEBUG\r\n * enabled server.\r\n */\r\nexport function devTest() {\r\n    if (GLOBAL.DEBUG) {\r\n        console.warn(JSON.stringify(player.atoms));\r\n        for (let i in player.atoms) {\r\n            player.atoms[i] = 9999;\r\n        }\r\n        updateCompoundButtons();\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "cookieInputs",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~cookieInputs",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{cookieInputs}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "selectedBlueprints",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~selectedBlueprints",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{selectedBlueprints}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "nickErrorText",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~nickErrorText",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "selectedCompound",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~selectedCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{selectedCompound}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "function",
    "name": "joinGame",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~joinGame",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "function",
    "name": "validNick",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~validNick",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "check if nick is valid alphanumeric characters (and underscores)",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "true if the nickname is valid, false otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if the nickname is valid, false otherwise"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "allBlueprintsSelected",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~allBlueprintsSelected",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "Returns true if all four blueprint slots are filled.",
    "lineNumber": 87,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "testHandler",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~testHandler",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "Its a method for testing stuff",
    "lineNumber": 97,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "quitGame",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~quitGame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{quitGame}",
    "description": "Transitions from in-game displays to the main menu.",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message to be displayed in the menu after disconnect."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isError",
        "description": "True if the game quit was due to an error; false otherwise."
      }
    ],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "bindHandler",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~bindHandler",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{bindHandler}",
    "description": "Binds handlerMethod to onclick event for element id.",
    "lineNumber": 302,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handlerMethod",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "showElement",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~showElement",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{showElement}",
    "description": "Displays a hidden element",
    "lineNumber": 310,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The id of the element to show"
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "hideElement",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~hideElement",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{hideElement}",
    "description": "Hides a visible element",
    "lineNumber": 318,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The id of the element to hide"
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "updateAtomList",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateAtomList",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateAtomList}",
    "description": "Updates the list of atoms that the player holds.\nOnly updates the entry for the particular ID given.",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "atomID",
        "description": "The ID of the atom to update."
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "updateCompoundButtons",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateCompoundButtons",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateCompoundButtons}",
    "description": "",
    "lineNumber": 355,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedSlot",
        "description": "The index of the selected slot. 0-3"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "updateScores",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateScores",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateScores}",
    "description": "Updates the team scoreboard on screen.",
    "lineNumber": 385,
    "params": [
      {
        "name": "teamSlot",
        "types": [
          "*"
        ]
      },
      {
        "name": "increment",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "updateLobby",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateLobby",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateLobby}",
    "description": "Run on new player join to sync lobby information",
    "lineNumber": 393,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data transferred from server"
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "displayWinner",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~displayWinner",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{displayWinner}",
    "description": "Displays the winner panel after a game has concluded.",
    "lineNumber": 418,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Server sent data, including name and score of winning team."
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "devTest",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~devTest",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{devTest}",
    "description": "Sets all player owned atoms to 9999 only if method is called on a DEBUG\nenabled server.",
    "lineNumber": 428,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/client/js/app.test.js",
    "content": "test('Placeholder test', () => {\r\n    expect();\r\n});",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/app.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/client/js/global.js",
    "content": "import { MAP_LAYOUT } from './obj/tiles';\r\n\r\n// Contains all global constants and functions for both the client and server.\r\nexport const GLOBAL = {\r\n    \r\n    DEBUG: true,\r\n    // Keys and other mathematical constants\r\n    KEY_ESC: 27,\r\n    KEY_ENTER: 13,\r\n    KEY_W: 87,\r\n    KEY_A: 65,  \r\n    KEY_S: 83,\r\n    KEY_D: 68,\r\n    KEY_1: 49,\r\n    KEY_2: 50,\r\n    KEY_3: 51,\r\n    KEY_4: 52,\r\n    KEY_SPACE: 32,\r\n\r\n    //Blueprints\r\n    BP_SELECT: 'Blueprint Select - Slot ', // Text for blueprint select header\r\n    BP_MAX: 4, // Maximum number of blueprints a player can have in one game at a time\r\n\r\n    // Main menu\r\n    INPUT_COUNT: 3, // Number of input boxes on main menu\r\n\r\n    // Chat\r\n    PLACEHOLDER_NAME: 'Unnamed Player',\r\n    MAX_CHATS: 50, // Max number of chats to be displayed before deleting\r\n\r\n    // Server\r\n    SERVER_IP: 'https://atomblast.herokuapp.com/', // Change during production!!!!!\r\n    LOCAL_HOST: 'localhost:3000',\r\n    TEST_IP: 'https://iogame-test.herokuapp.com/',\r\n    NO_ROOM_IDENTIFIER: '$_NOROOM', // Pass to server if matchmaking is required\r\n    ROOM_DELETE_DELAY: 30000, // Time, in ms, between winning and room closing\r\n\r\n    // Cookies\r\n    COOKIES: [\r\n        'name', //0\r\n        'room', //1\r\n        'team', //2\r\n        'bp-slot-1', //3\r\n        'bp-slot-2', //4\r\n        'bp-slot-3', //5 \r\n        'bp-slot-4', //6\r\n        'room-type', //7\r\n        'server', //8\r\n    ],\r\n    COOKIE_DAYS: 14, // Cookie lifetime\r\n\r\n    // Player Movement\r\n    MAX_SPEED: 6,\r\n    PLAYER_RADIUS: 100,\r\n    VELOCITY_STEP: 0.85, // speed multiplier when player is gliding to a stop\r\n    LERP_VALUE: 0.2,\r\n    DEADZONE: 0.1,\r\n    MAX_HEALTH: 100, // Starting health of players\r\n\r\n    // Atoms\r\n    ATOM_RADIUS: 30, // size of spawned atoms\r\n    MIN_POWERUPS: 150, // minimum number of powerups to be spawned (TEMPORARY)\r\n    MAX_POWERUPS: 300, // maximum number of powerups to be spawned (TEMPORARY)\r\n    ATTRACTION_RADIUS: 150, // Max distance for powerup to be attracted to player\r\n    ATTRACTION_COEFFICIENT: 100, // Multiplier for attraction strength\r\n    ATOM_SPAWN_SPEED: 15, // Speed that atom travels away from spawner\r\n    ATOM_SPAWN_DELAY: 5000, // Atom spawn delay, in milliseconds\r\n\r\n    // Map\r\n    TILE_TEXTURE_DIR: '../assets/map/Tiles/',\r\n    MAP_SIZE: 2000,\r\n    SPAWN_POINTS: [\r\n        {x: 0, y: 0},\r\n        {x: 9, y: 9},\r\n        {x: 0, y: 9},\r\n        {x: 9, y: 0}\r\n    ],  // Spawn points for different teams\r\n\r\n    // Drawing\r\n    DRAW_RADIUS: 1000, // Radius around player in which to draw other objects\r\n    GRID_SPACING: 200, // space between each line on the grid\r\n    GRID_LINE_STROKE: 1,\r\n    FRAME_RATE: 60,\r\n\r\n    // Colors\r\n    GRID_LINE_COLOUR: 0xD3D3D3,\r\n    FRIENDLY_COLOUR: 0x2ECC71,\r\n    FRIENDLY_COLOUR_HEX: '#2ECC71',\r\n    ENEMY_COLOUR: 0xEA6153,\r\n    ENEMY_COLOUR_HEX: '#EA6153',\r\n\r\n    // Sprites and textures\r\n    PLAYER_SPRITES: [\r\n        '../assets/testplayer.png',\r\n        \r\n    ],\r\n    IGNITE_SPRITE: '../assets/placeholder_ignited.png',\r\n\r\n    // Atoms: ID's and Sprites. ATOM_SPRITES[id] returns the texture location of atom of that id.\r\n    ATOM_IDS: [\r\n        'h',\r\n        'he',\r\n        'c',\r\n        'cl',\r\n        'n',\r\n        'o'\r\n    ],\r\n    ATOM_SPRITES: [\r\n        '../assets/atom-hydrogen.png',\r\n        '../assets/atom_helium.png',\r\n        '../assets/atom_carbon.png',\r\n        '../assets/testplayer2.png',\r\n        '../assets/atom_nitrogen.png',\r\n        '../assets/atom_oxygen.png',\r\n    ],\r\n    //Each Value corresponds with the above event\r\n    EXPERIENCE_VALUES: {\r\n        CRAFT: 10,\r\n        KILL: 124\r\n    },\r\n\r\n    //The cutoffs for each level. Index 0 = level 1, 1 = level 2, etc\r\n    EXPERIENCE_LEVELS: [\r\n        0,\r\n        10,\r\n        20,\r\n        40,\r\n        100,\r\n        140,\r\n        160\r\n    ],\r\n\r\n    // Deaths\r\n    KILL_SCORE: 6, // How many points are awarded to the player/team who dealt the most damage to the player\r\n    ASSIST_SCORE: 2, // How many points are awarded to all players who assist in killing the player\r\n    WINNING_SCORE: 20, // How many points are required to win the game per team. TODO increase\r\n    MAX_DEATH_ATOMS: 100, // How many atoms of each type can be ejected on death at maximum. Prevents testers from ejecting thousands of atoms at a time.\r\n};\r\n\r\n/**\r\n * Returns the distance between two objects.\r\n * Both objects must be GameObjects\r\n * @param {GameObject} obj1 First object \r\n * @param {GameObject} obj2 Second object\r\n */\r\nexport function distanceBetween(obj1, obj2) {\r\n    return Math.sqrt(Math.pow(obj1.posX - obj2.posX, 2) + Math.pow(obj1.posY - obj2.posY, 2));\r\n}\r\n\r\n/**\r\n * Returns true if the object parameter is within the map boundaries.\r\n * @param {GameObject} obj The object to test\r\n * @return true if the object parameter is within the map boundaries\r\n */\r\nexport function isInBounds(obj) {\r\n    return obj.posX > 0 && obj.posY > -GLOBAL.GRID_SPACING * 2 && obj.posX < MAP_LAYOUT[0].length * GLOBAL.GRID_SPACING * 2 && obj.posY < (MAP_LAYOUT.length - 1) * GLOBAL.GRID_SPACING * 2;\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/global.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "GLOBAL",
    "memberof": "src/client/js/global.js",
    "static": true,
    "longname": "src/client/js/global.js~GLOBAL",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{GLOBAL}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"DEBUG\": boolean, \"KEY_ESC\": number, \"KEY_ENTER\": number, \"KEY_W\": number, \"KEY_A\": number, \"KEY_S\": number, \"KEY_D\": number, \"KEY_1\": number, \"KEY_2\": number, \"KEY_3\": number, \"KEY_4\": number, \"KEY_SPACE\": number, \"BP_SELECT\": string, \"BP_MAX\": number, \"INPUT_COUNT\": number, \"PLACEHOLDER_NAME\": string, \"MAX_CHATS\": number, \"SERVER_IP\": string, \"LOCAL_HOST\": string, \"TEST_IP\": string, \"NO_ROOM_IDENTIFIER\": string, \"ROOM_DELETE_DELAY\": number, \"COOKIES\": *, \"COOKIE_DAYS\": number, \"MAX_SPEED\": number, \"PLAYER_RADIUS\": number, \"VELOCITY_STEP\": number, \"LERP_VALUE\": number, \"DEADZONE\": number, \"MAX_HEALTH\": number, \"ATOM_RADIUS\": number, \"MIN_POWERUPS\": number, \"MAX_POWERUPS\": number, \"ATTRACTION_RADIUS\": number, \"ATTRACTION_COEFFICIENT\": number, \"ATOM_SPAWN_SPEED\": number, \"ATOM_SPAWN_DELAY\": number, \"TILE_TEXTURE_DIR\": string, \"MAP_SIZE\": number, \"SPAWN_POINTS\": *, \"DRAW_RADIUS\": number, \"GRID_SPACING\": number, \"GRID_LINE_STROKE\": number, \"FRAME_RATE\": number, \"GRID_LINE_COLOUR\": number, \"FRIENDLY_COLOUR\": number, \"FRIENDLY_COLOUR_HEX\": string, \"ENEMY_COLOUR\": number, \"ENEMY_COLOUR_HEX\": string, \"PLAYER_SPRITES\": *, \"IGNITE_SPRITE\": string, \"ATOM_IDS\": *, \"ATOM_SPRITES\": *, \"EXPERIENCE_VALUES\": *, \"EXPERIENCE_LEVELS\": *, \"KILL_SCORE\": number, \"ASSIST_SCORE\": number, \"WINNING_SCORE\": number, \"MAX_DEATH_ATOMS\": number}"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "distanceBetween",
    "memberof": "src/client/js/global.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/global.js~distanceBetween",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{distanceBetween}",
    "description": "Returns the distance between two objects.\nBoth objects must be GameObjects",
    "lineNumber": 146,
    "params": [
      {
        "nullable": null,
        "types": [
          "GameObject"
        ],
        "spread": false,
        "optional": false,
        "name": "obj1",
        "description": "First object"
      },
      {
        "nullable": null,
        "types": [
          "GameObject"
        ],
        "spread": false,
        "optional": false,
        "name": "obj2",
        "description": "Second object"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "isInBounds",
    "memberof": "src/client/js/global.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/global.js~isInBounds",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{isInBounds}",
    "description": "Returns true if the object parameter is within the map boundaries.",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "GameObject"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if the object parameter is within the map boundaries"
    }
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/client/js/lib/chat-client.js",
    "content": "/** \r\n * Client-side chat window connection, adapted for use from agario-clone (https://github.com/huytd/agar.io-clone/) by Ben Cuan\r\n * Created 17 April 2018\r\n */\r\n\r\nimport {GLOBAL} from '../global.js';\r\nimport { socket } from '../socket.js';\r\nimport {devTest} from '../app.js';\r\n\r\nlet player, room, team;\r\nexport default class ChatClient {\r\n\r\n    // Use this constructor during init to connect ChatClient to the server\r\n    constructor(params) {\r\n        // this.canvas = params.canvas;\r\n        // this.mobile = params.mobile;\r\n        this.player = params.player;\r\n        this.team = params.team;\r\n        const self = this;\r\n        this.commands = {};\r\n        this.commandPrefix = \"-\";\r\n        let input = document.getElementById('chatInput');\r\n        input.addEventListener('keypress', key => {this.sendChat(key);}); //This works WTF\r\n        input.addEventListener('keyup', key => {\r\n            input = document.getElementById('chatInput');\r\n            key = key.which || key.keyCode;\r\n            if (key === global.KEY_ESC) {\r\n                input.value = '';\r\n                // self.canvas.cv.focus();\r\n            }\r\n        });\r\n    }\r\n\r\n    // TODO: Break out many of these GameControls into separate classes.\r\n    /** \r\n    * MISSING COMMENT\r\n    */\r\n    registerFunctions() {\r\n        const self = this;\r\n\r\n        this.registerCommand('help', 'Information about the chat commands.', () => {\r\n            self.printHelp();\r\n        });\r\n\r\n        this.registerCommand('test', 'Gives 5000 of every element', () => {\r\n            if(GLOBAL.DEBUG) {\r\n                devTest();\r\n                self.addSystemLine(\"Developer Configurations Applied!\");\r\n            }\r\n            else {\r\n                self.addSystemLine(\"Invalid Permission.\");\r\n            }\r\n        });\r\n        this.registerCommand('damage', 'Damages you by the given amount.', (params) => {\r\n            console.log(params);\r\n            if(GLOBAL.DEBUG) {\r\n                if(params[0] !== undefined && typeof parseInt(params[0]) === 'number') {\r\n                    socket.emit('damage', {damage: parseInt(params[0]), sender: socket.id, player: socket.id});\r\n                    self.addSystemLine(\"Damaged player by \" + params[0] + \" health points\");\r\n                }\r\n                else\r\n                    self.addSystemLine(\"Invalid parameter. Parameter must be of type number\");\r\n            }\r\n            else {\r\n                self.addSystemLine(\"Invalid Permission.\");\r\n            }\r\n        });\r\n        this.registerCommand('spawnAtom', 'Spawns a Hydrogen atom at the bottom left vent.', () => {\r\n            socket.emit('spawnAtom', {row: 9, col: 0});\r\n        })\r\n\r\n        // this.registerCommand('login', 'Login as an admin.', function (args) {\r\n        //     self.socket.emit('pass', args);\r\n        // });\r\n\r\n        // this.registerCommand('kick', 'Kick a player, for admins only.', function (args) {\r\n        //     self.socket.emit('kick', args);\r\n        // });\r\n        global.chatClient = this;\r\n    }\r\n\r\n    /**\r\n     * Places the message DOM node into the chat box.\r\n     * @param {string} innerHTML The message to be displayed.\r\n     * @param {string} styleClass How the message should be styled - see `main.css` for styles and to create more styles.\r\n     */\r\n    appendMessage(innerHTML, styleClass) {\r\n        if (this.mobile)\r\n            return;\r\n\r\n        const newline = document.createElement('li');\r\n\r\n        // Colours the chat input correctly.\r\n        newline.className = styleClass;\r\n        // Add content\r\n        newline.innerHTML = innerHTML;\r\n\r\n        const chatList = document.getElementById('chatList');\r\n        // Remove old chats\r\n        if (chatList.childNodes.length > GLOBAL.MAX_CHATS) {\r\n            chatList.removeChild(chatList.childNodes[0]);\r\n        }\r\n        chatList.appendChild(newline);\r\n        //Scroll to view new chat\r\n        chatList.scrollTop += 100;\r\n    }\r\n\r\n    /**\r\n     * Chat box implementation for the users.\r\n     * @param {string} name Name of the player who sent the message\r\n     * @param {string} message Message that was sent\r\n     * @param {boolean} me True if the sender matches the receiver\r\n     */\r\n    addChatLine(name, message, me) {\r\n       this.appendMessage(\r\n           `<b>${(name.length < 1) ? GLOBAL.PLACEHOLDER_NAME : name}</b>: ${message}`,\r\n           (me) ? 'me' : 'friend'\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Chat box implementation for the users.\r\n     * @param {string} name Name of the player who sent the message\r\n     * @param {string} message Message that was sent\r\n     * @param {boolean} me True if the sender matches the receiver\r\n     */\r\n    addPrivateMessage(name, message, me) {\r\n       this.appendMessage(\r\n           `<b>${(name.length < 1) ? GLOBAL.PLACEHOLDER_NAME : name}</b>: ${message}`,\r\n           (me) ? 'me' : 'friend'\r\n        );\r\n    }\r\n\r\n    // Message to notify players when a new player joins\r\n    addLoginMessage(name, me) {\r\n        console.log(`${name} joined`);\r\n       \r\n        this.appendMessage(\r\n            `<b>${(me) ? '</b>You have' : (name.length < 1) ? GLOBAL.PLACEHOLDER_NAME : name + '</b> has'} joined the room!`,\r\n            'join'\r\n        );\r\n    }\r\n\r\n    // Chat box implementation for the system.\r\n    addSystemLine(message) {\r\n        this.appendMessage(\r\n            message,\r\n            'system'\r\n        );\r\n    }\r\n\r\n    // Places the message DOM node into the chat box.\r\n    // appendMessage(node) {\r\n    //     if (this.mobile) {\r\n    //         return;\r\n    //     }\r\n        // const chatList = document.getElementById('chatList');\r\n        // // if (chatList.childNodes.length > 10) {\r\n        // //     chatList.removeChild(chatList.childNodes[0]);\r\n        // // }\r\n        // chatList.appendChild(node);\r\n    // }\r\n\r\n    // Sends a message or executes a command on the click of enter.\r\n    sendChat(key) {\r\n        const commands = this.commands;\r\n        const input = document.getElementById('chatInput');\r\n\r\n        key = key.which || key.keyCode;\r\n\r\n        if (key === GLOBAL.KEY_ENTER) {\r\n            const text = input.value.replace(/(<([^>]+)>)/ig, '');\r\n            if (text !== '') {\r\n\r\n                // Chat command.\r\n                if (text.indexOf(this.commandPrefix) === 0) {\r\n                    const args = text.substring(1).split(' ');\r\n                    if (commands[args[0]]) {\r\n                        commands[args[0]].callback(args.slice(1));\r\n                    } else {\r\n                        this.addSystemLine(`Unrecognized Command: ${text}, type -help for more info.`);\r\n                    }\r\n\r\n                    // Allows for regular messages to be sent to the server.\r\n                } else {\r\n                    //Debug lines for messages - Remove on production\r\n                    // console.log(\"This Player: \" + this.player);\r\n                    // console.log(\"This message: \" + text);\r\n                    socket.emit('playerChat', { sender: this.player, message: text });\r\n                    this.addChatLine(this.player, text, true);\r\n                }\r\n\r\n                // Resets input.\r\n                input.value = '';\r\n                // this.canvas.cv.focus();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Allows for addition of commands.\r\n    registerCommand(name, description, callback) {\r\n        this.commands[name] = {\r\n            description,\r\n            callback\r\n        };\r\n    }\r\n\r\n    // Allows help to print the list of all the commands and their descriptions.\r\n    printHelp() {\r\n        const commands = this.commands;\r\n        for (const cmd in commands) {\r\n            if (commands.hasOwnProperty(cmd)) {\r\n                this.addSystemLine(`-${cmd}: ${commands[cmd].description}`);\r\n            }\r\n        }\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/lib/chat-client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "ChatClient",
    "memberof": "src/client/js/lib/chat-client.js",
    "static": true,
    "longname": "src/client/js/lib/chat-client.js~ChatClient",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/chat-client.js",
    "importStyle": "ChatClient",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "player",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#player",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "team",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#team",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "commands",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#commands",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "commandPrefix",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#commandPrefix",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "registerFunctions",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#registerFunctions",
    "access": "public",
    "description": "MISSING COMMENT",
    "lineNumber": 38,
    "params": [],
    "return": null
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "appendMessage",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#appendMessage",
    "access": "public",
    "description": "Places the message DOM node into the chat box.",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "innerHTML",
        "description": "The message to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "styleClass",
        "description": "How the message should be styled - see `main.css` for styles and to create more styles."
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "addChatLine",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addChatLine",
    "access": "public",
    "description": "Chat box implementation for the users.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the player who sent the message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message that was sent"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "True if the sender matches the receiver"
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "addPrivateMessage",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addPrivateMessage",
    "access": "public",
    "description": "Chat box implementation for the users.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the player who sent the message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message that was sent"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "True if the sender matches the receiver"
      }
    ],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "addLoginMessage",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addLoginMessage",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "me",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "addSystemLine",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addSystemLine",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "sendChat",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#sendChat",
    "access": "public",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "registerCommand",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#registerCommand",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "description",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "printHelp",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#printHelp",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/client/js/lib/cookies.js",
    "content": "/**\r\n * Cookies.js was adopted from a StackOverflow answer \r\n * (https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript).\r\n */\r\n\r\n/**\r\n * Sets the value of a cookie.\r\n * @param {string} name Name of cookie\r\n * @param {string} value New value of cookie\r\n * @param {number} days Number of days this cookie will last for\r\n */\r\nexport function setCookie(name, value, days) {\r\n    let expires = \"\";\r\n    if (days) {\r\n        const date = new Date();\r\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\r\n        expires = `; expires=${date.toUTCString()}`;\r\n    }\r\n    document.cookie = `${name}=${value || \"\"}${expires}; path=/`;\r\n}\r\n\r\n/**\r\n * Sets the value of a cookie.\r\n * @param {string} name Name of cookie\r\n * @return {string} The value of the cookie. Returns null if the cookie is not found.\r\n */\r\nexport function getCookie(name) {\r\n    const nameEQ = `${name}=`;\r\n    const ca = document.cookie.split(';');\r\n\r\n    for (let c of ca) {\r\n        while (c.charAt(0) == ' ') c = c.substring(1, c.length);\r\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Removes the given cookie.\r\n * @param {string} name The name of the cookie to erase.\r\n */\r\nexport function eraseCookie(name) {\r\n    document.cookie = `${name}=; Max-Age=-99999999;`;\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/lib/cookies.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "function",
    "name": "setCookie",
    "memberof": "src/client/js/lib/cookies.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/cookies.js~setCookie",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/cookies.js",
    "importStyle": "{setCookie}",
    "description": "Sets the value of a cookie.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of cookie"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "New value of cookie"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "days",
        "description": "Number of days this cookie will last for"
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "getCookie",
    "memberof": "src/client/js/lib/cookies.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/cookies.js~getCookie",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/cookies.js",
    "importStyle": "{getCookie}",
    "description": "Sets the value of a cookie.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of cookie"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The value of the cookie. Returns null if the cookie is not found."
    }
  },
  {
    "__docId__": 91,
    "kind": "function",
    "name": "eraseCookie",
    "memberof": "src/client/js/lib/cookies.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/cookies.js~eraseCookie",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/cookies.js",
    "importStyle": "{eraseCookie}",
    "description": "Removes the given cookie.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the cookie to erase."
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "file",
    "name": "src/client/js/lib/keyboard.js",
    "content": "/**\r\n * Key listener function, adapted from https://github.com/kittykatattack/learningPixi#keyboard\r\n * Please refer to this link for extended documentation.\r\n * @param {number} keyCode ASCII key code for the key to listen. For best results declare the key codes in GLOBAL.js \r\n */\r\nimport { isFocused } from '../pixigame';\r\n\r\n\r\nexport function keyboard(keyCode) {\r\n  let key = {};\r\n  key.code = keyCode;\r\n  key.isDown = false;\r\n  key.isUp = true;\r\n  key.press = undefined;\r\n  key.release = undefined;\r\n  //The `downHandler`\r\n  key.downHandler = event => {\r\n      if (event.keyCode === key.code) {\r\n        if (isFocused()) {\r\n          if (key.isUp && key.press){\r\n            key.press();\r\n          }\r\n          key.isDown = true;\r\n          key.isUp = false;\r\n        }\r\n        //If \r\n        else{\r\n          key.isDown = false;\r\n          key.isUp = true;\r\n        }\r\n    // event.preventDefault();\r\n      }\r\n  };\r\n\r\n  //The `upHandler`\r\n  key.upHandler = event => {\r\n      if (event.keyCode === key.code) {\r\n        if(isFocused()){\r\n          if (key.isDown && key.release){\r\n            key.release();\r\n          }\r\n          key.isDown = false;\r\n          key.isUp = true;\r\n        }\r\n        else{\r\n          key.isDown = false;\r\n          key.isUp = true;\r\n        }\r\n      }\r\n    // event.preventDefault();\r\n  };\r\n\r\n  //Attach event listeners\r\n  window.addEventListener(\r\n    \"keydown\", key.downHandler.bind(key), false\r\n  );\r\n  window.addEventListener(\r\n    \"keyup\", key.upHandler.bind(key), false\r\n  );\r\n  return key;\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/lib/keyboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "keyboard",
    "memberof": "src/client/js/lib/keyboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/keyboard.js~keyboard",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/keyboard.js",
    "importStyle": "{keyboard}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "keyCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/client/js/obj/atom.js",
    "content": "import * as PIXI from 'pixi.js';\r\nimport { Player } from './player.js';\r\nimport { GLOBAL } from '../global.js';\r\nimport { GameObject } from './gameobject.js';\r\nimport { distanceBetween } from '../global.js';\r\nimport { screenCenterX, screenCenterY, player } from '../pixigame.js';\r\nimport { socket } from '../socket.js';\r\nimport { updateAtomList } from '../app.js';\r\n\r\n/**\r\n * An Atom can be picked up by players and used to create Compounds.\r\n */\r\nexport class Atom extends GameObject {\r\n\r\n    /**\r\n     * Creates a atom at the given coordinates. If no coordinates are given, then \r\n     * the atom spawns in a random location.\r\n     * @param {number} id The ID of this atom (generated by server)\r\n     * @param {string} typeID The numerical type of this atom (see spawnAtom or global for details)\r\n     * @param {string} texture The Pixi texture corresponding to this Atom\r\n     * @param {number} x (optional) X Coordinate of the atom \r\n     * @param {number} y (optional) Y Coordinate of the atom \r\n     * @param {number} vx Horizontal velocity\r\n     * @param {number} vy Vertical velocity\r\n     */\r\n    constructor(id, typeID, texture, x, y, vx, vy) {\r\n        // Atoms have a random ID between 100000 and 999999, inclusive.\r\n        super(texture, id, x, y, vx, vy);\r\n        this.height = GLOBAL.ATOM_RADIUS * 2;\r\n        this.width = GLOBAL.ATOM_RADIUS * 2;\r\n        this.isEquipped = false;\r\n        this.typeID = typeID;\r\n    }\r\n\r\n    /**\r\n     * Run when players are nearby to check if they picked this atom up.\r\n     * If the player is nearby but not close enough to pick up, then it becomes attracted towards the player.\r\n     * @returns true if collision detected, false otherwise\r\n     */\r\n    checkCollision() {\r\n        if (this.isEquipped || player === undefined)\r\n            return false;\r\n        \r\n        // let distance = distanceBetween(\r\n        //     {posX: this.posX + GLOBAL.ATOM_RADIUS, posY: this.posY - GLOBAL.ATOM_RADIUS},\r\n        //     {posX: player.posX + GLOBAL.PLAYER_RADIUS, posY: player.posY - GLOBAL.PLAYER_RADIUS});\r\n\r\n        // // Attractive force\r\n        // if(distance < GLOBAL.ATTRACTION_RADIUS) {\r\n        //     // let theta = Math.tan((this.posY - player.posY)/());\r\n        //     this.vx += 1/(player.posX - this.posX) * GLOBAL.ATTRACTION_COEFFICIENT;\r\n        //     this.vy += 1/(player.posY - this.posY) * GLOBAL.ATTRACTION_COEFFICIENT;\r\n        //     // console.log(this.vx, this.vy, this.posX, this.posY);\r\n        //     socket.emit('move', {type: 'atoms', id: this.id, posX: this.posX, posY: this.posY, vx: this.vx, vy: this.vy});\r\n        // }\r\n        // else if(this.vx !== 0 || this.vy !== 0) {\r\n        //     this.vx *= GLOBAL.VELOCITY_STEP;\r\n        //     this.vy *= GLOBAL.VELOCITY_STEP;\r\n        // }\r\n\r\n        // Collected by player\r\n        let distance = distanceBetween(\r\n            { posX: this.posX + GLOBAL.ATOM_RADIUS, posY: this.posY - GLOBAL.ATOM_RADIUS },\r\n            { posX: player.posX + GLOBAL.PLAYER_RADIUS, posY: player.posY - GLOBAL.PLAYER_RADIUS });\r\n\r\n        if (distance < GLOBAL.ATOM_RADIUS + GLOBAL.PLAYER_RADIUS) {\r\n            this.isEquipped = true;\r\n            player.addAtom(this.typeID);\r\n            updateAtomList(this.typeID);\r\n            socket.emit('atomCollision', {id: this.id});\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    tick() {\r\n\r\n        // Movement\r\n        super.tick();\r\n\r\n        if (!this.isEquipped) {\r\n            this.checkCollision();\r\n            this.draw();\r\n        }\r\n        else\r\n            this.hide();\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Returns a new atom object of the given type.\r\n * @param {string} typeID ID of the atom to be created (string name). ID reference can be found in GLOBAL.\r\n * @param {number} id The ID of this atom (generated by server)\r\n * @param {number} x (optional) x-coordinate of the atom\r\n * @param {number} y (optional) y-coordinate of the atom\r\n * @param {number} vx Horizontal velocity\r\n * @param {number} vy Vertical velocity\r\n */\r\nexport function spawnAtom(typeID, id, x, y, vx, vy) {\r\n\r\n    let texture = PIXI.loader.resources[GLOBAL.ATOM_SPRITES[GLOBAL.ATOM_IDS.indexOf(typeID)]].texture;\r\n\r\n    if(typeID === '')\r\n        throw new Error('The Atom object cannot be created without specifying behavior.');\r\n\r\n    if(texture === undefined)\r\n        throw new Error('Atom of type ' + typeID + ' could not be found!');\r\n\r\n    return new Atom(id, typeID, texture, x, y, vx, vy);\r\n} ",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/atom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "class",
    "name": "Atom",
    "memberof": "src/client/js/obj/atom.js",
    "static": true,
    "longname": "src/client/js/obj/atom.js~Atom",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/atom.js",
    "importStyle": "{Atom}",
    "description": "An Atom can be picked up by players and used to create Compounds.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/client/js/obj/gameobject.js~GameObject"
    ]
  },
  {
    "__docId__": 96,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#constructor",
    "access": "public",
    "description": "Creates a atom at the given coordinates. If no coordinates are given, then \nthe atom spawns in a random location.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of this atom (generated by server)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeID",
        "description": "The numerical type of this atom (see spawnAtom or global for details)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "The Pixi texture corresponding to this Atom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "(optional) X Coordinate of the atom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "(optional) Y Coordinate of the atom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "Horizontal velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "Vertical velocity"
      }
    ]
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "height",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#height",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "width",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#width",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "isEquipped",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#isEquipped",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "member",
    "name": "typeID",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#typeID",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "checkCollision",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#checkCollision",
    "access": "public",
    "description": "Run when players are nearby to check if they picked this atom up.\nIf the player is nearby but not close enough to pick up, then it becomes attracted towards the player.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "true if collision detected, false otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if collision detected, false otherwise"
    },
    "params": []
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/atom.js~Atom",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/atom.js~Atom#tick",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "spawnAtom",
    "memberof": "src/client/js/obj/atom.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/atom.js~spawnAtom",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/atom.js",
    "importStyle": "{spawnAtom}",
    "description": "Returns a new atom object of the given type.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "typeID",
        "description": "ID of the atom to be created (string name). ID reference can be found in GLOBAL."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of this atom (generated by server)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "(optional) x-coordinate of the atom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "(optional) y-coordinate of the atom"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "Horizontal velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "Vertical velocity"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/client/js/obj/blueprints.js",
    "content": "/**\r\n * This constant stores all data that is used to define Blueprints, \r\n * which define the recipe and behaviors of Compounds.\r\n * \r\n * Fields required:\r\n * Name: The formatted name of the compound to display\r\n * Tooltip: Description of compound\r\n * Texture: Path to image to load\r\n * Type: Class of compound. Each different type has a different behavior as defined in `compound.js`.\r\n * Params: Optional parameters to pass to the compound class associated with the given type.\r\n * Atoms: How to make the compound. Format is `Element symbol: Number required`. All excluded atoms will be considered 0.\r\n */\r\nexport const BLUEPRINTS = {\r\n    binaryHydrogen: {\r\n        name: 'Hydrogen',\r\n        tooltip: 'This is quite literally the smallest compound in the universe. Why are you using this as a weapon?',\r\n        texture: '../assets/atom-hydrogen.png',\r\n        type: 'flammable',\r\n        params: {\r\n            speed: 5*3,\r\n            damage: 1,\r\n            size: 20,\r\n            ignitedDamage: 10,\r\n            splash: 50,\r\n            splashImage: '../assets/explosion.png'\r\n        },\r\n        atoms: {\r\n            h: 2\r\n        }\r\n    },\r\n    basicMethane: {\r\n        name: 'Methane',\r\n        tooltip: 'Okay, who passed gas?',\r\n        texture: '../assets/atom-hydrogen.png',\r\n        type: 'basic',\r\n        params: {\r\n            speed: 3*3,\r\n            damage: 3,\r\n            size: 10\r\n        },\r\n        atoms: {\r\n            c: 1,\r\n            h: 4\r\n        }\r\n    },\r\n    basicBenzene: {\r\n        name: 'Benzene',\r\n        tooltip: 'Carbon rings. They smell nice.',\r\n        texture: '../assets/atom_carbon.png',\r\n        type: 'basic',\r\n        params: {\r\n            speed: 1*3,\r\n            damage: 5,\r\n            size: 30\r\n        },\r\n        atoms: {\r\n            h: 6,\r\n            c: 6\r\n        }\r\n    },\r\n    basicWater: {\r\n        name: 'Water',\r\n        tooltip: 'Why life exists. Are you trying to drown someone?',\r\n        texture: '../assets/atom-hydrogen.png',\r\n        type: 'stream',\r\n        params: {\r\n            speed: 4*3,\r\n            damage: 1,\r\n            size: 15,\r\n            length: 10,\r\n            spacing: 50     \r\n        },\r\n        atoms: {\r\n            h: 2,\r\n            o: 1\r\n        }\r\n    },\r\n    binaryNitrogen: {\r\n        name: 'Nitrogen',\r\n        tooltip: '78% of your air, and also why you get the bends.',\r\n        texture: '../assets/atom_nitrogen.png',\r\n        type: 'basic',\r\n        params: {\r\n            speed: 3*3,\r\n            damage: 3,\r\n            size: 20\r\n        },\r\n        atoms: {\r\n            n: 2\r\n        }\r\n    },\r\n    binaryHelium: {\r\n        name: 'Helium',\r\n        tooltip: 'A nonreactive, inert gas. In other words, useless.',\r\n        texture: '../assets/atom_helium.png',\r\n        type: 'basic',\r\n        params: {\r\n            speed: 4 * 3,\r\n            damage: 2,\r\n            size: 14\r\n        },\r\n        atoms: {\r\n            he: 2\r\n        }\r\n    },\r\n    ionicSodiumChloride: {\r\n        name: 'Sodium Chloride',\r\n        tooltip: 'Can kill small insects, slugs, and snails. Cannot kill much else.',\r\n        texture: '../assets/atom_helium.png',\r\n        type: 'ionic',\r\n        params: {\r\n            speed: 4 * 3,\r\n            damage: 2,\r\n            size: 14\r\n        },\r\n        atoms: {\r\n            na: 1,\r\n            cl: 1\r\n        }\r\n    },\r\n    acidicHydrogenChloride: {\r\n        name: 'Hydrochloric Acid',\r\n        tooltip: 'In a pure form, can corrode metal.',\r\n        texture: '../assets/atom_helium.png',\r\n        type: 'acidic',\r\n        params: {\r\n            speed: 4 * 3,\r\n            damage: 2,\r\n            size: 14\r\n        },\r\n        atoms: {\r\n            h: 1,\r\n            cl: 1\r\n        }\r\n    },\r\n    nuclearLithiumHydrogen: {\r\n        name: 'Lithium Deuteride',\r\n        tooltip: 'Used as the primary fuel in thermonuclear weapons.',\r\n        texture: '../assets/atom_lithium.png',\r\n        type: 'nuclear',\r\n        params: {\r\n            speed: 1 * 3,\r\n            damage: 2,\r\n            size: 14\r\n        },\r\n        atoms: {\r\n            h: 1,\r\n            li: 1\r\n        }\r\n    },\r\n    glucose: {\r\n        name: 'Glucose',\r\n        tooltip: 'S U G A R R U S H !!!!',\r\n        texture: '../assets/atom-hydrogen.png',\r\n        type: 'speed',\r\n        params: {\r\n            speedFactor: 0.5\r\n        },\r\n        atoms: {\r\n            c: 6,\r\n            h: 12,\r\n            o: 6\r\n        }\r\n    },\r\n    protonPack: {\r\n        name: 'Proton Pack',\r\n        tooltip: 'Easy health!',\r\n        texture: '../assets/atom-hydrogen.png',\r\n        type: 'health',\r\n        params: {\r\n            healthModifier: 10\r\n        },\r\n        atoms: {\r\n            h: 10\r\n        }\r\n    }\r\n};\r\n\r\n",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/blueprints.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "variable",
    "name": "BLUEPRINTS",
    "memberof": "src/client/js/obj/blueprints.js",
    "static": true,
    "longname": "src/client/js/obj/blueprints.js~BLUEPRINTS",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/blueprints.js",
    "importStyle": "{BLUEPRINTS}",
    "description": "This constant stores all data that is used to define Blueprints, \nwhich define the recipe and behaviors of Compounds.\n\nFields required:\nName: The formatted name of the compound to display\nTooltip: Description of compound\nTexture: Path to image to load\nType: Class of compound. Each different type has a different behavior as defined in `compound.js`.\nParams: Optional parameters to pass to the compound class associated with the given type.\nAtoms: How to make the compound. Format is `Element symbol: Number required`. All excluded atoms will be considered 0.",
    "lineNumber": 13,
    "type": {
      "types": [
        "{\"binaryHydrogen\": *, \"basicMethane\": *, \"basicBenzene\": *, \"basicWater\": *, \"binaryNitrogen\": *, \"binaryHelium\": *, \"ionicSodiumChloride\": *, \"acidicHydrogenChloride\": *, \"nuclearLithiumHydrogen\": *, \"glucose\": *, \"protonPack\": *}"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/client/js/obj/compound.js",
    "content": "import { GameObject } from './gameobject';\r\nimport { socket, objects } from '../socket';\r\nimport { BLUEPRINTS } from './blueprints';\r\nimport * as PIXI from 'pixi.js';\r\nimport { app, player } from '../pixigame';\r\nimport { updateCompoundButtons } from '../app';\r\nimport { GLOBAL, distanceBetween } from '../global';\r\nimport { MAP_LAYOUT } from './tiles';\r\n\r\n/**\r\n * Generic Compound which can be instantiated into the scene as a GameObject.\r\n * Created when a player uses a Blueprint.\r\n */\r\nexport class Compound extends GameObject {\r\n\r\n    constructor(id, x, y, vx, vy, blueprint, sendingTeam, sender) {\r\n        super(PIXI.loader.resources[blueprint.texture].texture, id, x, y, vx, vy);\r\n        this.blueprint = blueprint;\r\n        this.sendingTeam = sendingTeam;\r\n        this.sender = sender;\r\n        this.ignited = false; // Becomes true if this compound passes over a flame tile\r\n\r\n        // Parse params\r\n        for (let param in this.blueprint.params) {\r\n            this[param] = this.blueprint.params[param];\r\n        }\r\n\r\n        // Use params\r\n        this.width = this.size;\r\n        this.height = this.size;\r\n\r\n    }\r\n\r\n    /**\r\n     * Runs once a frame.\r\n     */\r\n    tick() {\r\n        // Different behaviors based on type\r\n        switch (this.blueprint.type) {\r\n        case 'binary':\r\n            //do stuff\r\n            break;\r\n        case 'basic':\r\n            //do other stuff (basic is essentially level 2 binary - but uses a larger scale)\r\n            break;\r\n        case 'stream':\r\n            break;\r\n        case 'flammable':\r\n            let tileCol = Math.floor(this.posX / (GLOBAL.GRID_SPACING * 2));\r\n            let tileRow = Math.floor(this.posY / (GLOBAL.GRID_SPACING * 2));\r\n            if (MAP_LAYOUT[MAP_LAYOUT.length - tileRow - 2] !== undefined && MAP_LAYOUT[MAP_LAYOUT.length - tileRow - 2][tileCol] === 'F' && !this.ignited) {\r\n                console.log('IGNITE');\r\n                this.ignited = true;\r\n                this.texture = PIXI.loader.resources[GLOBAL.IGNITE_SPRITE].texture;\r\n            }\r\n            break;\r\n\r\n        default:\r\n            throw new Error('Blueprint ' + this.blueprint.name + ' has invalid type ' + this.blueprint.type);\r\n        }\r\n\r\n        this.checkCollision();\r\n\r\n        // Movement\r\n        super.tick();\r\n        this.draw();\r\n    }\r\n\r\n    /**\r\n     * Run when players are nearby to check if they picked this atom up.\r\n     * If the player is nearby but not close enough to pick up, then it becomes attracted towards the player.\r\n     * @returns true if collision detected, false otherwise\r\n     */\r\n    checkCollision() {\r\n\r\n        if (player === undefined)\r\n            return false;\r\n        // No friendly fire\r\n        if(this.sendingTeam === player.team)\r\n            return false;\r\n        let distance = distanceBetween(\r\n            { posX: this.posX + this.width / 2, posY: this.posY - this.height / 2 },\r\n            { posX: player.posX + GLOBAL.PLAYER_RADIUS, posY: player.posY - GLOBAL.PLAYER_RADIUS });\r\n        \r\n        // Hit player\r\n        if (distance < this.blueprint.params.size + GLOBAL.PLAYER_RADIUS) {\r\n            player.health -= this.blueprint.params.damage;\r\n            if(!this.ignited)\r\n                socket.emit('compoundCollision', { id: this.id, player: socket.id, sentBy: this.sender, damage: this.blueprint.params.damage });\r\n            else\r\n                socket.emit('compoundCollision', { id: this.id, player: socket.id, sentBy: this.sender, damage: this.blueprint.params.ignitedDamage, splash: this.blueprint.params.splash }); \r\n            return true;\r\n        }\r\n        // for (let objType in objects) {\r\n        //     if (objType !== 'atoms')\r\n        //         for (let obj in objects[objType]) {\r\n        //             let distance = distanceBetween(this, objects[objType][obj]);\r\n\r\n        //             // Collision with player or other powerup\r\n        //             if (distance < GLOBAL.ATOM_RADIUS + GLOBAL.PLAYER_RADIUS) {\r\n        //                 socket.emit('compoundCollision', { id: this.id, collidedWith: obj });\r\n        //                 return true;\r\n        //             }\r\n        //         }\r\n        // }\r\n\r\n        return false;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a Compound by sending a request to the server.\r\n * @param {*} blueprint Then blueprint to create the compound from\r\n * @param {int} xIn x-coords\r\n * @param {int} yIn y-coords\r\n */\r\nexport function createNewCompound(blueprint, xIn, yIn) {\r\n\r\n    updateCompoundButtons();\r\n\r\n    if(blueprint.type === 'speed') {\r\n        // this.hide();\r\n        player.speedMult += blueprint.params.speedFactor * (1/player.speedMult);\r\n        console.log('New speed is ' + player.speedMult);\r\n    }\r\n    else if(blueprint.type === 'health'){\r\n        socket.emit('damage', {damage: -blueprint.params.healthModifier, sender: socket.id});\r\n        if(player.health > GLOBAL.MAX_HEALTH){\r\n            player.health = GLOBAL.MAX_HEALTH;\r\n        }\r\n    }\r\n    else {\r\n        // let cursor = app.renderer.plugins.interaction.mouse.global;\r\n\r\n        let centerX = window.innerWidth / 2;\r\n        let centerY = window.innerHeight / 2;\r\n        // console.log(centerX - cursor.x, cursor.y - centerY)\r\n        socket.emit('createCompound', {\r\n            blueprint: blueprint,\r\n            sendingTeam: player.team,\r\n            sender: socket.id,\r\n            // mousePos: { x: cursor.x - centerX, y: centerY - cursor.y }\r\n            mousePos: { x: xIn - centerX, y: centerY - yIn }\r\n        });\r\n\r\n        // TODO: Add proper spray directional change based on mouse position when spraying is implemented\r\n        if(blueprint.type === 'stream')\r\n            for(let i = 0; i < blueprint.params.length - 1; i++)\r\n                setTimeout(() => {\r\n                    socket.emit('createCompound', {\r\n                        blueprint: blueprint,\r\n                        sendingTeam: player.team,\r\n                        sender: socket.id,\r\n                        // mousePos: { x: cursor.x - centerX, y: centerY - cursor.y }\r\n                        mousePos: { x: xIn - centerX, y: centerY - yIn },\r\n                        streamNumber: i\r\n                    });\r\n                }, blueprint.params.spacing * i);\r\n    }\r\n\r\n    //Emits the crafting event to update experience\r\n    socket.emit('experienceEvent', {\r\n        event: 'CRAFT'\r\n    });\r\n\r\n}\r\n\r\n/**\r\n * Recreates an already spawned compound on the clientside based on server data.\r\n * @param {*} data Data sent from server\r\n */\r\nexport function createCompound(data) {\r\n    return new Compound(data.id, data.posX, data.posY, data.vx, data.vy, data.blueprint, data.sendingTeam, data.sender);\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/compound.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "Compound",
    "memberof": "src/client/js/obj/compound.js",
    "static": true,
    "longname": "src/client/js/obj/compound.js~Compound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/compound.js",
    "importStyle": "{Compound}",
    "description": "Generic Compound which can be instantiated into the scene as a GameObject.\nCreated when a player uses a Blueprint.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "src/client/js/obj/gameobject.js~GameObject"
    ]
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "blueprint",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#blueprint",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "sendingTeam",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#sendingTeam",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "sender",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#sender",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "ignited",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#ignited",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "[param]",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#[param]",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "width",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#width",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "height",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#height",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#tick",
    "access": "public",
    "description": "Runs once a frame.",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "texture",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#texture",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "checkCollision",
    "memberof": "src/client/js/obj/compound.js~Compound",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/compound.js~Compound#checkCollision",
    "access": "public",
    "description": "Run when players are nearby to check if they picked this atom up.\nIf the player is nearby but not close enough to pick up, then it becomes attracted towards the player.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "true if collision detected, false otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if collision detected, false otherwise"
    },
    "params": []
  },
  {
    "__docId__": 121,
    "kind": "function",
    "name": "createNewCompound",
    "memberof": "src/client/js/obj/compound.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/compound.js~createNewCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/compound.js",
    "importStyle": "{createNewCompound}",
    "description": "Creates a Compound by sending a request to the server.",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blueprint",
        "description": "Then blueprint to create the compound from"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "xIn",
        "description": "x-coords"
      },
      {
        "nullable": null,
        "types": [
          "int"
        ],
        "spread": false,
        "optional": false,
        "name": "yIn",
        "description": "y-coords"
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "createCompound",
    "memberof": "src/client/js/obj/compound.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/compound.js~createCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/compound.js",
    "importStyle": "{createCompound}",
    "description": "Recreates an already spawned compound on the clientside based on server data.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data sent from server"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/client/js/obj/gameobject.js",
    "content": "import * as PIXI from 'pixi.js';\r\nimport { app, screenCenterX, screenCenterY, player } from '../pixigame';\r\nimport { GLOBAL } from '../global';\r\nimport { MAP_LAYOUT } from './tiles';\r\n\r\n/**\r\n * GameObject class that all objects in the game space should inherit.\r\n * Provides standard field variables such as posX and posY, as well as \r\n * standard methods to manipulate them.\r\n * \r\n * A GameObject cannot be added directly; it must be inherited.\r\n * setup() and tick() must be overridden.\r\n */\r\nexport class GameObject extends PIXI.Sprite {\r\n\r\n    /**\r\n     * Creates a new GameObject.\r\n     * @param {PIXI.Texture} texture The texture associated with this sprite\r\n     * @param {string} id Unique identifier- for example, socket ID for players, numerical ID for atoms\r\n     * @param {number} x Global x-coordinate\r\n     * @param {number} y Global y-coordinate\r\n     * @param {number} vx Horizontal velocity\r\n     * @param {number} vy Vertical velocity\r\n     */\r\n    constructor(texture, id, x, y, vx, vy) {\r\n        super(texture);\r\n        this.id = id;\r\n        this.posX = x;\r\n        this.posY = y;\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        \r\n        app.stage.addChild(this);\r\n    }\r\n\r\n    /**\r\n     * Sets global coordinates of this player\r\n     * @param {number} newX New x-coordinate to move to\r\n     * @param {number} newY New y-coordinate to move to\r\n     */\r\n    setCoordinates(newX, newY) {\r\n        this.posX = newX;\r\n        this.posY = newY;\r\n    }\r\n\r\n    /**\r\n     * Sets global coordinates and speeds of this player\r\n     * @param {number} newX New x-coordinate to move to\r\n     * @param {number} newY New y-coordinate to move to\r\n     * @param {number} vx New x velocity\r\n     * @param {number} vy New y velocity\r\n     */\r\n    setData(newX, newY, vx, vy) {\r\n        this.setCoordinates(newX, newY);\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n    }\r\n\r\n    /**\r\n     * Call during tick() if necessary. \r\n     * Draws object in the correct position on the player screen.\r\n     */\r\n    draw() {\r\n        if(player !== undefined) {\r\n            this.x = screenCenterX + this.posX - player.posX;\r\n            this.y = screenCenterY + player.posY - this.posY;\r\n        }\r\n    }\r\n\r\n    /** TEMP\r\n     * Moves this object to (9999, 9999) on local screen space, effectively\r\n     * hiding it from view.\r\n     */\r\n    hide() {\r\n        this.x = 9999;\r\n        this.y = 9999;\r\n    }\r\n\r\n    /**\r\n     * Override optional. Called once, during game setup phase.\r\n     */\r\n    setup() {\r\n    }\r\n\r\n    /**\r\n     * Override optional. Default behavior: handles movement. Call super.tick() from child class if movable.\r\n     */\r\n    tick() {\r\n        // Prevent drifting due to minimal negative values\r\n        if (Math.abs(this.vx) < GLOBAL.DEADZONE)\r\n            this.vx = 0;\r\n        if (Math.abs(this.vy) < GLOBAL.DEADZONE)\r\n            this.vy = 0;\r\n\r\n        // Change position based on speed and direction. Don't allow objects to go out of bounds\r\n        if ((this.vx > 0 && this.posX < MAP_LAYOUT[0].length * GLOBAL.GRID_SPACING * 2 - GLOBAL.GRID_SPACING) || (this.vx < 0 && this.posX > 0))\r\n            this.posX += this.vx;\r\n        if ((this.vy > 0 && this.posY < (MAP_LAYOUT.length - 1) * GLOBAL.GRID_SPACING * 2) || (this.vy < 0 && this.posY > -GLOBAL.GRID_SPACING))\r\n            this.posY += this.vy;\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/gameobject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "class",
    "name": "GameObject",
    "memberof": "src/client/js/obj/gameobject.js",
    "static": true,
    "longname": "src/client/js/obj/gameobject.js~GameObject",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/gameobject.js",
    "importStyle": "{GameObject}",
    "description": "GameObject class that all objects in the game space should inherit.\nProvides standard field variables such as posX and posY, as well as \nstandard methods to manipulate them.\n\nA GameObject cannot be added directly; it must be inherited.\nsetup() and tick() must be overridden.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "pixi.js~PIXI.Sprite"
    ]
  },
  {
    "__docId__": 125,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#constructor",
    "access": "public",
    "description": "Creates a new GameObject.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "PIXI.Texture"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "The texture associated with this sprite"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Unique identifier- for example, socket ID for players, numerical ID for atoms"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Global x-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Global y-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "Horizontal velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "Vertical velocity"
      }
    ]
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "id",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#id",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "member",
    "name": "posX",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#posX",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "posY",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#posY",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "vx",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#vx",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "vy",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#vy",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "setCoordinates",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#setCoordinates",
    "access": "public",
    "description": "Sets global coordinates of this player",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newX",
        "description": "New x-coordinate to move to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newY",
        "description": "New y-coordinate to move to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "setData",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#setData",
    "access": "public",
    "description": "Sets global coordinates and speeds of this player",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newX",
        "description": "New x-coordinate to move to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newY",
        "description": "New y-coordinate to move to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "New x velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "New y velocity"
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "draw",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#draw",
    "access": "public",
    "description": "Call during tick() if necessary. \nDraws object in the correct position on the player screen.",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "x",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#x",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "y",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#y",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "hide",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#hide",
    "access": "public",
    "description": "TEMP\nMoves this object to (9999, 9999) on local screen space, effectively\nhiding it from view.",
    "lineNumber": 74,
    "params": [],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "setup",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#setup",
    "access": "public",
    "description": "Override optional. Called once, during game setup phase.",
    "lineNumber": 82,
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#tick",
    "access": "public",
    "description": "Override optional. Default behavior: handles movement. Call super.tick() from child class if movable.",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/client/js/obj/maptile.js",
    "content": "import * as PIXI from 'pixi.js';\r\nimport { TILES } from './tiles';\r\nimport { GLOBAL } from '../global';\r\nimport { app, player, screenCenterX, screenCenterY } from '../pixigame';\r\n/**\r\n * One Tile component of the map. \r\n */\r\nexport class MapTile extends PIXI.Sprite {\r\n\r\n    /**\r\n     * Constructs one Tile to add to the map.\r\n     * @param {string} name Name of the tile to place. Takes this name from `tiles.js` and loads its resources\r\n     * @param {number} gridX X-coordinate on the grid. Every 1 gridX = 400 posX \r\n     * @param {number} gridY Y-coordinate on the grid.\r\n     */\r\n    constructor(name, gridX, gridY) {\r\n        super(PIXI.loader.resources[GLOBAL.TILE_TEXTURE_DIR + TILES[name].texture].texture);\r\n        this.tile = TILES[name];\r\n        this.posX = gridX * GLOBAL.GRID_SPACING * 2;\r\n        this.posY = gridY * GLOBAL.GRID_SPACING * 2;\r\n        this.height = GLOBAL.GRID_SPACING * 2;\r\n        this.width = GLOBAL.GRID_SPACING * 2;\r\n        app.stage.addChild(this);\r\n    }\r\n\r\n    /**\r\n     * Draws object in the correct position on the player screen.\r\n     */\r\n    tick() {\r\n        if (player !== undefined) {\r\n            this.x = screenCenterX + this.posX - player.posX;\r\n            this.y = screenCenterY + player.posY - this.posY;\r\n        }\r\n    }\r\n\r\n    /** TEMP\r\n     * Moves this tile to (9999, 9999) on local screen space, effectively\r\n     * hiding it from view.\r\n     */\r\n    // hide() {\r\n    //     this.x = 9999;\r\n    //     this.y = 9999;\r\n    // }\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/maptile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "class",
    "name": "MapTile",
    "memberof": "src/client/js/obj/maptile.js",
    "static": true,
    "longname": "src/client/js/obj/maptile.js~MapTile",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/maptile.js",
    "importStyle": "{MapTile}",
    "description": "One Tile component of the map. ",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "pixi.js~PIXI.Sprite"
    ]
  },
  {
    "__docId__": 151,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#constructor",
    "access": "public",
    "description": "Constructs one Tile to add to the map.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the tile to place. Takes this name from `tiles.js` and loads its resources"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gridX",
        "description": "X-coordinate on the grid. Every 1 gridX = 400 posX"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gridY",
        "description": "Y-coordinate on the grid."
      }
    ]
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "tile",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#tile",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "posX",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#posX",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "member",
    "name": "posY",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#posY",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "height",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#height",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "width",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#width",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#tick",
    "access": "public",
    "description": "Draws object in the correct position on the player screen.",
    "lineNumber": 29,
    "params": [],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "x",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#x",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "y",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#y",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "file",
    "name": "src/client/js/obj/player.js",
    "content": "import {GLOBAL} from '../global.js';\r\nimport * as PIXI from 'pixi.js';\r\nimport { player, screenCenterX, screenCenterY } from '../pixigame.js';\r\nimport { socket } from '../socket.js';\r\nimport { GameObject } from './gameobject.js';\r\nimport { cookieInputs } from '../app.js';\r\n\r\nexport class Player extends GameObject {\r\n\r\n    /**\r\n     * Constructor for creating a new Player in the server side.\r\n     * Player is a Sprite instance that can be added to the stage.\r\n     * Each Player should only be created once, and updated subsequently with\r\n     * setData().\r\n     * @param {PIXI.Texture} texture The texture associated with this sprite\r\n     * @param {string} id Socket ID of the player\r\n     * @param {string} name Name of the player\r\n     * @param {string} room Room that the player belongs to\r\n     * @param {string} team Team that the player belongs to\r\n     * @param {number} health Health of the player\r\n     * @param {number} x Global x-coordinate\r\n     * @param {number} y Global y-coordinate\r\n     * @param {number} vx Horizontal velocity\r\n     * @param {number} vy Vertical velocity\r\n     */\r\n    constructor(texture, id, name, room, team, health, x, y, vx, vy, experience) {\r\n\r\n        // Call GameObject\r\n        super(texture, id, x, y, vx, vy);\r\n\r\n        // Pixi Values\r\n        this.width = GLOBAL.PLAYER_RADIUS * 2;\r\n        this.height = GLOBAL.PLAYER_RADIUS * 2;\r\n\r\n        if(id === socket.id) {\r\n            // console.log('this player');\r\n            this.x = screenCenterX;\r\n            this.y = screenCenterY;\r\n        }\r\n        else { // take this player off screen until it can be processed\r\n            this.hide();\r\n        }\r\n\r\n        // Custom fields\r\n        this.name = name;\r\n        this.room = room;\r\n        this.team = team;\r\n        this.health = health; //Set the health of the player\r\n        this.isMoving = false;\r\n        this.experience = experience; //Sets the experience of the player(Passed in)\r\n        this.speedMult = 1; // Speed multiplier. Increased/decreased by different compounds\r\n        this.damagedBy = {}; // Object containing the values of damage that each player has dealt.\r\n\r\n        this.atoms = { // List of all atoms and the number that the player has. Continue list later\r\n        };\r\n\r\n        for(let atom of GLOBAL.ATOM_IDS)\r\n            this.atoms[atom] = 0;\r\n            \r\n        this.textObjects = {}; // Contains Text to be drawn under the player (name, id, etc)\r\n\r\n        this.setup();\r\n    }\r\n\r\n    /**\r\n     * First-time setup for this player. All of the functions in this method will only be called once.\r\n     */\r\n    setup() {\r\n        // Create text objects\r\n        this.textObjects.nametext = new PIXI.Text('name: ');\r\n        this.textObjects.idtext = new PIXI.Text('id: ');\r\n        this.textObjects.postext = new PIXI.Text('placeholderpos');\r\n        this.textObjects.teamtext = new PIXI.Text('team: ');\r\n        this.textObjects.healthtext = new PIXI.Text('health: ');\r\n\r\n        // Assign values and positions\r\n        this.textObjects.idtext.position.set(0, GLOBAL.PLAYER_RADIUS * 9);\r\n        this.textObjects.idtext.text += this.id;\r\n        this.textObjects.nametext.position.set(0, GLOBAL.PLAYER_RADIUS * 9 + 100);\r\n        this.textObjects.nametext.text += this.name;\r\n        this.textObjects.postext.position.set(0, GLOBAL.PLAYER_RADIUS * 9 + 200);\r\n        this.textObjects.teamtext.text += this.team;\r\n        this.textObjects.teamtext.position.set(0, GLOBAL.PLAYER_RADIUS * 9 + 300);\r\n\r\n        // create text and assign color\r\n        for (let item in this.textObjects) {\r\n            // Add text\r\n            this.textObjects[item].style = new PIXI.TextStyle({\r\n                fill: (cookieInputs[2].value === this.team) ? GLOBAL.FRIENDLY_COLOUR : GLOBAL.ENEMY_COLOUR,\r\n                fontSize: 120\r\n            });  \r\n            this.addChild(this.textObjects[item]);\r\n        }\r\n    }\r\n    /**\r\n      * Draws all components of a given player.\r\n      * This method should be included in the ticker and called once a frame.\r\n    * Therefore, all setup tasks\r\n     * should be called in setup().\r\n    */\r\n    tick() {\r\n        \r\n        // Movement\r\n        super.tick();\r\n        \r\n        // Update text\r\n        this.textObjects.postext.text = '(' + Math.round(this.posX) + ', ' + Math.round(this.posY) + ')';\r\n        this.textObjects.healthtext.text = 'health: ' + this.health;\r\n\r\n        // Draw other player\r\n        if(this.id !== socket.id) {\r\n            this.draw();\r\n        }\r\n    }\r\n\r\n    /**\r\n        * Adds an atom to the list\r\n        * @param {string} id The ID of the atom to add to the player\r\n        */\r\n    addAtom(id) {\r\n        this.atoms[id]++;\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "Player",
    "memberof": "src/client/js/obj/player.js",
    "static": true,
    "longname": "src/client/js/obj/player.js~Player",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/player.js",
    "importStyle": "{Player}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/client/js/obj/gameobject.js~GameObject"
    ]
  },
  {
    "__docId__": 162,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#constructor",
    "access": "public",
    "description": "Constructor for creating a new Player in the server side.\nPlayer is a Sprite instance that can be added to the stage.\nEach Player should only be created once, and updated subsequently with\nsetData().",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "PIXI.Texture"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "The texture associated with this sprite"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Socket ID of the player"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the player"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Room that the player belongs to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "Team that the player belongs to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "health",
        "description": "Health of the player"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Global x-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Global y-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "Horizontal velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "Vertical velocity"
      }
    ]
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "width",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#width",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "height",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#height",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "x",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#x",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "y",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#y",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "name",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#name",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "room",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#room",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "team",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#team",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "health",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#health",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#isMoving",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "experience",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#experience",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "speedMult",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#speedMult",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "damagedBy",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#damagedBy",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "atoms",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#atoms",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "textObjects",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#textObjects",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "setup",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#setup",
    "access": "public",
    "description": "First-time setup for this player. All of the functions in this method will only be called once.",
    "lineNumber": 68,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#tick",
    "access": "public",
    "description": "Draws all components of a given player.\nThis method should be included in the ticker and called once a frame.\nTherefore, all setup tasks\nshould be called in setup().",
    "lineNumber": 101,
    "params": [],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "addAtom",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#addAtom",
    "access": "public",
    "description": "Adds an atom to the list",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID of the atom to add to the player"
      }
    ],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/client/js/obj/tiles.js",
    "content": "/**\r\n * This constant contains all data on how to draw and manage tiles. \r\n * \r\n * Fields required:\r\n * type: Choose one: spawner, teamBase, wall\r\n * params: Different for each type. For example, spawner will require the `atomToSpawn` param, and teamBase will require the `teamName` param.\r\n * texture: String path of the texture file for this texture, starting in the `map` folder. (ex. 'foo.png' corresponds to '../../assets/map/Tiles/foo.png') \r\n */\r\nexport const TILES = {\r\n    empty: {\r\n        texture: 'SolidTile.png',\r\n        type: 'none'\r\n    },\r\n    flame: {\r\n        texture: 'FlameTile.png',\r\n        type: 'flame'\r\n    },\r\n    topLeft: {\r\n        texture: 'InteriorCorner BR.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['bottom', 'right']\r\n        }\r\n    },\r\n    topRight: {\r\n        texture: 'InteriorCorner BL.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['bottom', 'left']\r\n        }\r\n    },\r\n    bottomLeft: {\r\n        texture: 'InteriorCorner TR.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['top', 'right']\r\n        }\r\n    },\r\n    bottomRight: {\r\n        texture: 'InteriorCorner TL.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['top', 'left']\r\n        }\r\n    },\r\n    edgeTop: {\r\n        texture: 'EdgeTile B.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['bottom']\r\n        }\r\n    },\r\n    edgeBottom: {\r\n        texture: 'EdgeTile T.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['top']\r\n        }\r\n    },\r\n    edgeLeft: {\r\n        texture: 'EdgeTile R.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['right']\r\n        }\r\n    },\r\n    edgeRight: {\r\n        texture: 'EdgeTile L.png',\r\n        type: 'wall',\r\n        params: {\r\n            border: ['left']\r\n        }\r\n    },\r\n    hydrogenVent: {\r\n        texture: 'HydrogenVent.png',\r\n        type: 'spawner',\r\n        params: {\r\n            atomsToSpawn: ['h']\r\n        }\r\n    },\r\n    oxygenVent: {\r\n        texture: 'OxygenVent.png',\r\n        type: 'spawner',\r\n        params: {\r\n            atomsToSpawn: ['o']\r\n        }\r\n    },\r\n    nitrogenVent: {\r\n        texture: 'NitrogenVent.png',\r\n        type: 'spawner',\r\n        params: {\r\n            atomsToSpawn: ['n']\r\n        }\r\n    },\r\n    carbonVent: {\r\n        texture: 'CarbonSource.png',\r\n        type: 'spawner',\r\n        params: {\r\n            atomsToSpawn: ['c']\r\n        }\r\n    },\r\n};\r\n\r\n/**\r\n * 2D array containing the entire map tile layout. Top left is (0,0), furthest right is (n, 0) and furthest bottom is (0, n).\r\n * Shortcuts:\r\n * E = Empty\r\n * O = Oxygen\r\n * N = Nitrogen\r\n * C = Carbon\r\n */\r\nexport const MAP_LAYOUT = [\r\n    ['H', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'H'],\r\n    ['E', 'O', 'O', 'E', 'N', 'N', 'E', 'O', 'O', 'E'],\r\n    ['E', 'O', 'E', 'E', 'E', 'E', 'E', 'E', 'O', 'E'],\r\n    ['E', 'E', 'E', 'H', 'F', 'F', 'H', 'E', 'E', 'E'],\r\n    ['E', 'N', 'E', 'F', 'C', 'C', 'F', 'E', 'N', 'E'],\r\n    ['F', 'N', 'E', 'F', 'C', 'C', 'F', 'E', 'N', 'E'],\r\n    ['E', 'E', 'E', 'H', 'F', 'F', 'H', 'E', 'E', 'E'],\r\n    ['E', 'O', 'E', 'E', 'E', 'E', 'E', 'E', 'O', 'E'],\r\n    ['E', 'O', 'O', 'E', 'N', 'N', 'E', 'O', 'O', 'E'],\r\n    ['H', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'E', 'H'],\r\n];\r\n\r\nexport const TILE_NAMES = {\r\n    E: 'empty',\r\n    O: 'oxygenVent',\r\n    N: 'nitrogenVent',\r\n    C: 'carbonVent',\r\n    H: 'hydrogenVent',\r\n    F: 'flame',\r\n    q: 'topLeft',\r\n    w: 'edgeTop',\r\n    e: 'topRight',\r\n    a: 'edgeLeft',\r\n    d: 'edgeRight',\r\n    z: 'bottomLeft',\r\n    x: 'edgeBottom',\r\n    c: 'bottomRight'\r\n};",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/obj/tiles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "TILES",
    "memberof": "src/client/js/obj/tiles.js",
    "static": true,
    "longname": "src/client/js/obj/tiles.js~TILES",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/tiles.js",
    "importStyle": "{TILES}",
    "description": "This constant contains all data on how to draw and manage tiles. \n\nFields required:\ntype: Choose one: spawner, teamBase, wall\nparams: Different for each type. For example, spawner will require the `atomToSpawn` param, and teamBase will require the `teamName` param.\ntexture: String path of the texture file for this texture, starting in the `map` folder. (ex. 'foo.png' corresponds to '../../assets/map/Tiles/foo.png') ",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"empty\": *, \"flame\": *, \"topLeft\": *, \"topRight\": *, \"bottomLeft\": *, \"bottomRight\": *, \"edgeTop\": *, \"edgeBottom\": *, \"edgeLeft\": *, \"edgeRight\": *, \"hydrogenVent\": *, \"oxygenVent\": *, \"nitrogenVent\": *, \"carbonVent\": *}"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "MAP_LAYOUT",
    "memberof": "src/client/js/obj/tiles.js",
    "static": true,
    "longname": "src/client/js/obj/tiles.js~MAP_LAYOUT",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/tiles.js",
    "importStyle": "{MAP_LAYOUT}",
    "description": "2D array containing the entire map tile layout. Top left is (0,0), furthest right is (n, 0) and furthest bottom is (0, n).\nShortcuts:\nE = Empty\nO = Oxygen\nN = Nitrogen\nC = Carbon",
    "lineNumber": 112,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "TILE_NAMES",
    "memberof": "src/client/js/obj/tiles.js",
    "static": true,
    "longname": "src/client/js/obj/tiles.js~TILE_NAMES",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/tiles.js",
    "importStyle": "{TILE_NAMES}",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "{\"E\": string, \"O\": string, \"N\": string, \"C\": string, \"H\": string, \"F\": string, \"q\": string, \"w\": string, \"e\": string, \"a\": string, \"d\": string, \"z\": string, \"x\": string, \"c\": string}"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/client/js/pixigame.js",
    "content": "import * as PIXI from 'pixi.js';\r\nimport { keyboard } from './lib/keyboard';\r\nimport { GLOBAL } from './global';\r\nimport { Player } from './obj/player';\r\nimport { hideElement, showElement, selectedBlueprints, updateAtomList, updateCompoundButtons, selectedCompound, cookieInputs, mouseX, mouseY } from './app';\r\nimport { socket, objects } from './socket';\r\nimport { BLUEPRINTS } from './obj/blueprints';\r\nimport { createNewCompound} from './obj/compound';\r\nimport { TILES, MAP_LAYOUT, TILE_NAMES } from './obj/tiles';\r\nimport { MapTile } from './obj/maptile';\r\n\r\nexport var isSetup; // True after the stage is fully set up\r\nexport var player; // The player being controlled by this client\r\nexport var screenCenterX; // X-coordinate of the center of the screen\r\nexport var screenCenterY; // Y-coordinate of the center of the screen\r\nexport var app; // Pixi app\r\n\r\n\r\nlet inGame = false; // True after game has begun\r\n\r\n// let sprites = []; // Sprites on the stage\r\n\r\nlet esc, space, blueprintKeys, moveKeys; // Key handlers\r\nlet vertLines = [];\r\nlet horizLines = [];\r\n\r\nexport function loadTextures() {\r\n    if (!isSetup) {\r\n        //Initialization\r\n        let type = (PIXI.utils.isWebGLSupported()) ? 'WebGL' : 'canvas';\r\n        PIXI.utils.sayHello(type);\r\n\r\n        //Create a Pixi Application\r\n        app = new PIXI.Application(0, 0, {\r\n            view: document.getElementById('gameView')\r\n        });\r\n        //Add the canvas that Pixi automatically created for you to the HTML document\r\n        // document.body.appendChild(app.view);\r\n\r\n        // Renderer settings\r\n        app.renderer.autoResize = true;\r\n        app.renderer.resize(window.innerWidth, window.innerHeight);\r\n        screenCenterX = window.innerWidth / 2 - GLOBAL.PLAYER_RADIUS;\r\n        screenCenterY = window.innerHeight / 2 - GLOBAL.PLAYER_RADIUS;\r\n\r\n        // Load resources if not already loaded\r\n        let TEXTURES = [];\r\n        TEXTURES.push(GLOBAL.IGNITE_SPRITE);\r\n        for (let bp in BLUEPRINTS) {\r\n            // Prevent duplicate textures from being loaded\r\n            if (TEXTURES.indexOf(BLUEPRINTS[bp].texture) < 0)\r\n                TEXTURES.push(BLUEPRINTS[bp].texture);\r\n            if (BLUEPRINTS[bp].params.splashImage !== undefined && TEXTURES.indexOf(BLUEPRINTS[bp].params.splashImage) < 0)\r\n                TEXTURES.push(BLUEPRINTS[bp].params.splashImage);\r\n        }\r\n        for (let atom of GLOBAL.ATOM_SPRITES)\r\n            if (TEXTURES.indexOf(atom) < 0)\r\n                TEXTURES.push(atom);\r\n        for(let tile in TILES)\r\n            if (TEXTURES.indexOf(GLOBAL.TILE_TEXTURE_DIR + TILES[tile].texture) < 0)\r\n                TEXTURES.push(GLOBAL.TILE_TEXTURE_DIR + TILES[tile].texture);\r\n        console.log(TEXTURES);\r\n\r\n\r\n        if (Object.keys(PIXI.loader.resources).length < 1) {\r\n            PIXI.loader\r\n                .add(GLOBAL.PLAYER_SPRITES)\r\n                .add(TEXTURES)\r\n                .load(registerCallbacks);\r\n        }\r\n    }\r\n\r\n    // If already initialized, use existing app variable\r\n    if (isSetup) {\r\n        console.info('Stage already initialized!');\r\n        clearStage();\r\n        registerCallbacks();\r\n    }\r\n}\r\n\r\n/**\r\n * Sets up the stage. Call after init(), and begins the draw() loop once complete.\r\n */\r\nfunction registerCallbacks() {\r\n    if (!isSetup) {\r\n        // Set up key listeners\r\n        esc = keyboard(GLOBAL.KEY_ESC);\r\n        space = keyboard(GLOBAL.KEY_SPACE);\r\n\r\n        //All the movement keys for easy access\r\n        moveKeys = [\r\n            keyboard(GLOBAL.KEY_A), // Left           \r\n            keyboard(GLOBAL.KEY_D), // Right                 \r\n            keyboard(GLOBAL.KEY_W), // Up               \r\n            keyboard(GLOBAL.KEY_S), // Down              \r\n        ];\r\n        //Set up the blueprint key listeners\r\n        blueprintKeys = [\r\n            keyboard(GLOBAL.KEY_1),\r\n            keyboard(GLOBAL.KEY_2),\r\n            keyboard(GLOBAL.KEY_3),\r\n            keyboard(GLOBAL.KEY_4)\r\n        ];\r\n\r\n        esc.press = () => {\r\n            if (isFocused()) {\r\n                if (document.activeElement !== document.getElementById('chatInput'))\r\n                    toggleMenu();\r\n                else\r\n                    document.getElementById('chatInput').blur();\r\n            }\r\n        };\r\n\r\n\r\n        // var mousePosition = renderer.interaction.mouse.global;\r\n\r\n\r\n        // Chat box styling on select\r\n        document.getElementById('chatInput').onfocus = () => {\r\n            document.getElementById('chatbox').style.boxShadow = '0px 0px 1rem 0px #311B92';\r\n        };\r\n\r\n        document.getElementById('chatInput').onblur = () => {\r\n            document.getElementById('chatbox').style.boxShadow = '0px 0px 1rem 0px rgba(180,180,180)';\r\n        };\r\n\r\n        //Bind each blueprint key\r\n        for (let key in blueprintKeys) {\r\n            blueprintKeys[key].press = () => {\r\n                if (isFocused() && inGame) {\r\n                    updateCompoundButtons(key);\r\n                }\r\n            };\r\n        }\r\n\r\n        // app.stage.on('mousedown', () => {\r\n        //     //Creates a compound of that certain blueprint\r\n        //     console.warn(\"--TRIG--\");\r\n        //     if (canCraft(selectedBlueprints[key])) {\r\n    \r\n        //         createNewCompound(selectedBlueprints[key]); \r\n\r\n        //         // Subtract atoms needed to craft\r\n        //         deductCraftMaterial(selectedBlueprints[key]);\r\n        //     } else\r\n        //         console.log(\"Not enough atoms to craft this blueprint!\");\r\n        // });\r\n\r\n        // Background\r\n        app.renderer.backgroundColor = 0xFFFFFF;\r\n\r\n        // Resize\r\n        document.getElementsByTagName('body')[0].onresize = () => {\r\n            app.renderer.resize(window.innerWidth, window.innerHeight);\r\n            screenCenterX = window.innerWidth / 2 - GLOBAL.PLAYER_RADIUS;\r\n            screenCenterY = window.innerHeight / 2 - GLOBAL.PLAYER_RADIUS;\r\n            player.x = screenCenterX;\r\n            player.y = screenCenterY;\r\n        };\r\n\r\n        // Begin game loop\r\n        app.ticker.add(delta => draw(delta));\r\n    }\r\n\r\n    isSetup = true;\r\n\r\n    // Draw map\r\n    for (let row = 0; row < MAP_LAYOUT.length; row++) {\r\n        for (let col = 0; col < MAP_LAYOUT[0].length; col++) {\r\n            let tileName = 'tile_' + col + '_' + row;\r\n            if (objects.tiles[tileName] === undefined || objects.tiles[tileName] === null) {\r\n                if (TILE_NAMES[MAP_LAYOUT[row][col]] !== undefined)\r\n                    objects.tiles[tileName] = new MapTile(TILE_NAMES[MAP_LAYOUT[row][col]], col, MAP_LAYOUT.length - row - 1);\r\n                else\r\n                    throw new Error('Tile ' + MAP_LAYOUT[row][col] + ' could not be resolved to a name.');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Draw grid\r\n    // Grid\r\n    let line;\r\n    for (let x = 0; x < window.innerWidth / GLOBAL.GRID_SPACING; x++) {\r\n        line = new PIXI.Graphics();\r\n        line.lineStyle(GLOBAL.GRID_LINE_STROKE, GLOBAL.GRID_LINE_COLOUR, 1);\r\n        line.oX = x * GLOBAL.GRID_SPACING;\r\n        line.moveTo(line.oX, 0);\r\n        line.lineTo(line.oX, window.innerHeight);\r\n        vertLines.push(line);\r\n        app.stage.addChild(line);\r\n    }\r\n    for (let y = 0; y < window.innerHeight / GLOBAL.GRID_SPACING; y++) {\r\n        line = new PIXI.Graphics();\r\n        line.lineStyle(GLOBAL.GRID_LINE_STROKE, GLOBAL.GRID_LINE_COLOUR, 1);\r\n        line.oY = y * GLOBAL.GRID_SPACING;\r\n        line.moveTo(0, line.oY);\r\n        line.lineTo(window.innerWidth, line.oY);\r\n        horizLines.push(line);\r\n        app.stage.addChild(line);\r\n    }\r\n\r\n\r\n    showGameUI();\r\n}\r\n\r\nexport function elementStart() {\r\n    console.warn('--TRIG--');\r\n    if (canCraft(selectedBlueprints[selectedCompound])) {\r\n\r\n        createNewCompound(selectedBlueprints[selectedCompound]); \r\n\r\n        // Subtract atoms needed to craft\r\n        deductCraftMaterial(selectedBlueprints[selectedCompound]);\r\n    } else\r\n        console.log('Not enough atoms to craft this blueprint!');\r\n}\r\n\r\n/**\r\n * Called once per frame. Updates all moving sprites on the stage.\r\n * @param {number} delta Time value from Pixi\r\n */\r\nfunction draw(delta) {\r\n    // Handle this player and movement\r\n    if (player !== undefined) {\r\n\r\n        // Make sure player is not in chat before checking move\r\n        if (isFocused() && inGame) {\r\n            if (moveKeys[0].isDown && player.vx > -GLOBAL.MAX_SPEED * player.speedMult) // Left\r\n                player.vx += -GLOBAL.VELOCITY_STEP * player.speedMult;\r\n            if (moveKeys[1].isDown && player.vx < GLOBAL.MAX_SPEED * player.speedMult) // Right\r\n                player.vx += GLOBAL.VELOCITY_STEP * player.speedMult;\r\n            if (moveKeys[2].isDown && player.vy < GLOBAL.MAX_SPEED * player.speedMult) // Up\r\n                player.vy += GLOBAL.VELOCITY_STEP * player.speedMult;\r\n            if (moveKeys[3].isDown && player.vy > -GLOBAL.MAX_SPEED * player.speedMult) // Down\r\n                player.vy += -GLOBAL.VELOCITY_STEP * player.speedMult;\r\n\r\n            player.isMoving = false;\r\n            for(let key of moveKeys)\r\n                if(key.isDown)\r\n                    player.isMoving = true;\r\n        } else {\r\n            player.isMoving = false;\r\n\r\n            //Because the document is not focused disable all keys(Stops moving!)\r\n            for (let key in moveKeys) {\r\n                moveKeys[key].isDown = false;\r\n                moveKeys[key].isUp = true;\r\n            }\r\n        }\r\n\r\n        // Slow down gradually - unaffected by chat input\r\n        if (!moveKeys[2].isDown && !moveKeys[3].isDown)\r\n            player.vy *= GLOBAL.VELOCITY_STEP;\r\n        if (!moveKeys[0].isDown && !moveKeys[1].isDown)\r\n            player.vx *= GLOBAL.VELOCITY_STEP;\r\n\r\n        // Shooting\r\n        space.press = () => {\r\n            if(isFocused() && inGame) {\r\n                if (canCraft(selectedBlueprints[selectedCompound])) {\r\n                    createNewCompound(selectedBlueprints[selectedCompound], mouseX, mouseY);\r\n                    // Subtract atoms needed to craft\r\n                    deductCraftMaterial(selectedBlueprints[selectedCompound]);\r\n                } else\r\n                    console.log('Not enough atoms to craft this blueprint!');\r\n            }\r\n        };\r\n\r\n        // Move player\r\n        player.tick();\r\n\r\n        // Send coordinates\r\n        socket.emit('move', {\r\n            type: 'players',\r\n            id: player.id,\r\n            posX: player.posX,\r\n            posY: player.posY,\r\n            vx: player.vx,\r\n            vy: player.vy\r\n        });\r\n\r\n        // Move grid\r\n        for (let line of vertLines)\r\n            line.x = line.oX - player.posX % (GLOBAL.GRID_SPACING * 2);\r\n\r\n        for (let line of horizLines)\r\n            line.y = line.oY + player.posY % (GLOBAL.GRID_SPACING * 2);\r\n    }\r\n\r\n    // Handle objects except for this player\r\n    for (let objType in objects) {\r\n        for (let obj in objects[objType])\r\n            if (objType !== 'players' || player !== objects[objType][obj]) {\r\n                objects[objType][obj].tick();\r\n            }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Shows or hides the in-game menu box\r\n */\r\nfunction toggleMenu() {\r\n    if (document.getElementById('menubox').offsetParent === null)\r\n        showElement('menubox');\r\n    else\r\n        hideElement('menubox');\r\n}\r\n\r\n/**\r\n * Remove all elements pre-rendered on stage.\r\n */\r\nfunction clearStage() {\r\n    for (var i = app.stage.children.length - 1; i >= 0; i--) {\r\n        app.stage.removeChild(app.stage.children[i]);\r\n    }\r\n}\r\n\r\n/**\r\n * Destroy everything in PIXI. DANGEROUS avoid!\r\n */\r\nexport function destroyPIXI() {\r\n    app.destroy(true, {\r\n        children: true,\r\n        texture: true,\r\n        baseTexture: true\r\n    });\r\n    PIXI.loader.reset();\r\n    isSetup = false;\r\n    app = undefined;\r\n}\r\n\r\n/**\r\n * Call this function to hide loading div and show UI\r\n */\r\nexport function showGameUI() {\r\n    // Hide loading screen\r\n    hideElement('loading');\r\n    if(!inGame)\r\n        showElement('lobby');\r\n}\r\n\r\n/**\r\n * Creates a Player instance once the stage is fully set up and ready.\r\n * @param {*} data Starting values to assign to the player. Generated from server\r\n * @returns {Player} The Player object that was created\r\n */\r\nexport function createPlayer(data) {\r\n    if (isSetup) {\r\n        console.log('create player ' + data.id);\r\n        console.log(data);\r\n        let newPlayer = new Player(PIXI.loader.resources[GLOBAL.PLAYER_SPRITES[0]].texture, data.id, data.name, data.room, data.team, data.health, data.posX, data.posY, data.vx, data.vy);\r\n        if (data.id === socket.id)\r\n            player = newPlayer;\r\n\r\n        return newPlayer;\r\n    }\r\n}\r\n\r\n/**\r\n * If the document is Focused return true otherwise false\r\n **/\r\nexport function isFocused() {\r\n    return document.hasFocus() && document.activeElement !== document.getElementById('chatInput');\r\n}\r\n\r\n/**\r\n * Returns true if the player has the materials necessary to create a particular blueprint.\r\n * @param {string} blueprint The name of the blueprint to check.\r\n */\r\nexport function canCraft(blueprint) {\r\n    if(blueprint === undefined)\r\n        return false;\r\n    for (let atom in blueprint.atoms) {\r\n        if (player.atoms[atom] === undefined || player.atoms[atom] < blueprint.atoms[atom])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n * Deduct material needed to craft. \r\n * @param {string} blueprint The name of the blueprint to check.\r\n * @returns {boolean} Returns true if success, false if fail.\r\n */\r\nexport function deductCraftMaterial(blueprint) {\r\n    if (canCraft) {\r\n        for (let atom in blueprint.atoms) {\r\n            player.atoms[atom] -= blueprint.atoms[atom];\r\n            updateAtomList(atom);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * Starts the game after lobby closes.\r\n * @param {boolean} emit True if this client should emit the event to the server.\r\n * @param {*} teams Array of teams on the scoreboard.\r\n */\r\nexport function startGame(emit, teams) {\r\n    setIngame(true);\r\n    hideElement('lobby');\r\n    showElement('hud');\r\n    if (emit)\r\n        socket.emit('startGame', {\r\n            start: true\r\n        });\r\n    \r\n    // Init scoreboard\r\n    if(teams !== undefined) {\r\n        for(let i = 0; i < teams.length; i++) {\r\n            document.getElementById('score').innerHTML += '-<span id=\"team-score-' + i + '\">0</span>';\r\n            document.getElementById('team-score-' + i).style.color = ((cookieInputs[2].value === teams[i].name) ? GLOBAL.FRIENDLY_COLOUR_HEX : GLOBAL.ENEMY_COLOUR_HEX);\r\n        }\r\n        document.getElementById('score').style.fontSize = '3vw';\r\n        document.getElementById('score').innerHTML += '-';\r\n    }\r\n}\r\n\r\n/**\r\n * Sets the value of inGame\r\n * @param {boolean} newValue Value to set inGame to \r\n */\r\nexport function setIngame(newValue) {\r\n    inGame = newValue;\r\n}\r\n\r\n/**\r\n * @returns {boolean} Returns inGame variable\r\n */\r\nexport function getIngame() {\r\n    return inGame;\r\n}\r\n\r\n/**\r\n * Called on mouse click from app.js\r\n * @param {*} e Click event\r\n */\r\nexport function mouseClickHandler(e) {\r\n    if (!inGame || !isFocused()) {\r\n        return false;\r\n    }\r\n    // console.log(e);\r\n    // console.info(\"Selected Compound: \" + selectedCompound);\r\n    if (canCraft(selectedBlueprints[selectedCompound])) {\r\n\r\n        createNewCompound(selectedBlueprints[selectedCompound], e.clientX, e.clientY);\r\n\r\n        // Subtract atoms needed to craft\r\n        deductCraftMaterial(selectedBlueprints[selectedCompound]);\r\n    } else\r\n        console.log('Not enough atoms to craft this blueprint!');\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/pixigame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "inGame",
    "memberof": "src/client/js/pixigame.js",
    "static": true,
    "longname": "src/client/js/pixigame.js~inGame",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 186,
    "kind": "variable",
    "name": "vertLines",
    "memberof": "src/client/js/pixigame.js",
    "static": true,
    "longname": "src/client/js/pixigame.js~vertLines",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "horizLines",
    "memberof": "src/client/js/pixigame.js",
    "static": true,
    "longname": "src/client/js/pixigame.js~horizLines",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "function",
    "name": "loadTextures",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~loadTextures",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{loadTextures}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "registerCallbacks",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~registerCallbacks",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Sets up the stage. Call after init(), and begins the draw() loop once complete.",
    "lineNumber": 84,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "elementStart",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~elementStart",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{elementStart}",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "draw",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~draw",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Called once per frame. Updates all moving sprites on the stage.",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "Time value from Pixi"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "toggleMenu",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~toggleMenu",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Shows or hides the in-game menu box",
    "lineNumber": 303,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "clearStage",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~clearStage",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Remove all elements pre-rendered on stage.",
    "lineNumber": 313,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "destroyPIXI",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~destroyPIXI",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{destroyPIXI}",
    "description": "Destroy everything in PIXI. DANGEROUS avoid!",
    "lineNumber": 322,
    "params": [],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "showGameUI",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~showGameUI",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{showGameUI}",
    "description": "Call this function to hide loading div and show UI",
    "lineNumber": 336,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "createPlayer",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~createPlayer",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{createPlayer}",
    "description": "Creates a Player instance once the stage is fully set up and ready.",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Player} The Player object that was created"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Starting values to assign to the player. Generated from server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Player"
      ],
      "spread": false,
      "description": "The Player object that was created"
    }
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "isFocused",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~isFocused",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{isFocused}",
    "description": "If the document is Focused return true otherwise false",
    "lineNumber": 363,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "canCraft",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~canCraft",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{canCraft}",
    "description": "Returns true if the player has the materials necessary to create a particular blueprint.",
    "lineNumber": 371,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blueprint",
        "description": "The name of the blueprint to check."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "deductCraftMaterial",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~deductCraftMaterial",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{deductCraftMaterial}",
    "description": "Deduct material needed to craft. ",
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns true if success, false if fail."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blueprint",
        "description": "The name of the blueprint to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true if success, false if fail."
    }
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "startGame",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~startGame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{startGame}",
    "description": "Starts the game after lobby closes.",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "emit",
        "description": "True if this client should emit the event to the server."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "teams",
        "description": "Array of teams on the scoreboard."
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "setIngame",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~setIngame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{setIngame}",
    "description": "Sets the value of inGame",
    "lineNumber": 427,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": "Value to set inGame to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "getIngame",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~getIngame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{getIngame}",
    "description": "",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns inGame variable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns inGame variable"
    },
    "params": []
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "mouseClickHandler",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~mouseClickHandler",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{mouseClickHandler}",
    "description": "Called on mouse click from app.js",
    "lineNumber": 442,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "file",
    "name": "src/client/js/socket.js",
    "content": "import { GLOBAL, distanceBetween } from './global';\r\nimport { cookieInputs, quitGame, updateLobby, updateScores, showElement, hideElement, displayWinner, updateAtomList } from './app';\r\nimport ChatClient from './lib/chat-client';\r\nimport { loadTextures, app, createPlayer, isSetup, showGameUI, startGame, player, setIngame } from './pixigame';\r\nimport { spawnAtom } from './obj/atom';\r\nimport { createCompound } from './obj/compound';\r\nimport { MapTile } from './obj/maptile';\r\nimport { MAP_LAYOUT } from './obj/tiles';\r\n\r\n/**\r\n * Socket.js contains all of the clientside networking interface.\r\n * It contains all variables which are synced between client and server.\r\n */\r\n\r\n// Socket.io instance\r\nexport var socket;\r\n\r\n/* Object containing all synced objects. Contains nested objects, which correspond to different types\r\n * (for example, objects[atoms], objects[players], objects[compounds])\r\n */\r\nexport var objects = {\r\n    players: {},\r\n    atoms: {},\r\n    compounds: {},\r\n    tiles: {}\r\n};\r\n\r\n/**\r\n * Attempts to connect to the server.\r\n */\r\nexport function beginConnection() {\r\n    //Joins debug server if conditions are met\r\n    let room = (cookieInputs[7].value === 'private' ? cookieInputs[1].value : GLOBAL.NO_ROOM_IDENTIFIER);\r\n    if (cookieInputs[1].value === 'test') {\r\n        console.info('Connecting to: ' + GLOBAL.TEST_IP);\r\n        // DEVELOPMENT server - auto deploy from pixi branch\r\n        socket = io.connect(GLOBAL.TEST_IP, {\r\n            query: `room=${room}&name=${cookieInputs[0].value}&team=${cookieInputs[2].value}&roomType=${cookieInputs[7].value}`,\r\n            reconnectionAttempts: 3\r\n        });\r\n    }\r\n    else if (cookieInputs[1].value === 'jurassicexp') {\r\n        console.log('Dev Backdoor Initiated! Connecting to devserver');\r\n        // Local server\r\n        socket = io.connect(GLOBAL.LOCAL_HOST, {\r\n            query: `room=${room}&name=${cookieInputs[0].value}&team=${cookieInputs[2].value}&roomType=${cookieInputs[7].value}`,\r\n            reconnectionAttempts: 3\r\n        });\r\n    }\r\n    else {\r\n        // Production server\r\n        console.log('connecting to main server');\r\n        socket = io.connect(GLOBAL.SERVER_IP, {\r\n            query: `room=${room}&name=${cookieInputs[0].value}&team=${cookieInputs[2].value}&roomType=${cookieInputs[7].value}`,\r\n            reconnectionAttempts: 3\r\n        });\r\n    }\r\n\r\n    socket.on('connect', () => {\r\n        setupSocket();\r\n        // Init pixi\r\n        loadTextures();\r\n        if (typeof app !== undefined) {\r\n            app.start();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Run on disconnect to reset all server-based variables and connections\r\n */\r\nexport function disconnect() {\r\n    app.stop();\r\n    socket.disconnect();\r\n\r\n    // Wipe objects list\r\n    for(let objType in objects)\r\n        objects[objType] = {};\r\n}\r\n\r\n/** \r\n * First time setup when connection starts. Run on connect event to ensure that the socket is connected first.\r\n */\r\nfunction setupSocket() {\r\n\r\n\r\n    //Debug\r\n    console.log('Socket:', socket);\r\n\r\n    //Instantiate Chat System\r\n    let chat = new ChatClient({ player: cookieInputs[0].value, room: cookieInputs[1].value, team: cookieInputs[2].value });\r\n    chat.addLoginMessage(cookieInputs[0].value, true);\r\n    chat.registerFunctions();\r\n\r\n\r\n    // On Connection Failure\r\n    socket.on('reconnect_failed', () => {\r\n        alert('You have lost connection to the server!');\r\n    });\r\n\r\n    socket.on('reconnecting', (attempt) => {\r\n        console.log('Lost connection. Reconnecting on attempt: ' + attempt);\r\n        quitGame('Lost connection to server');\r\n    });\r\n\r\n    socket.on('reconnect_error', (err) => {\r\n        console.log('CRITICAL: Reconnect failed! ' + err);\r\n    });\r\n\r\n    socket.on('pong', (ping) => {\r\n        console.log('Your Ping Is: ' + ping);\r\n    });\r\n\r\n    // Syncs all objects from server once a frame\r\n    socket.on('objectSync', (data) => {\r\n        for(let objType in data) {\r\n            if(objType !== 'tiles') {\r\n                for (let obj in data[objType]) {\r\n                    if (data[objType][obj] !== null) {\r\n                        let objRef = data[objType][obj];\r\n                        let clientObj = objects[objType][obj];\r\n                        // Already exists in database\r\n                        if (clientObj !== undefined && clientObj !== null) {\r\n                            if (objRef.id !== socket.id)\r\n                                objects[objType][obj].setData(objRef.posX, objRef.posY, objRef.vx, objRef.vy);\r\n                            if (objType === 'players') {\r\n                                objects[objType][obj].health = objRef.health;\r\n                                objects[objType][obj].damagedBy = objRef.damagedBy;\r\n                            }\r\n                        }\r\n                        // Does not exist - need to clone to clientside\r\n                        else if (isSetup) {\r\n                            switch (objType) {\r\n                            case 'players':\r\n                                objects[objType][obj] = createPlayer(objRef);\r\n                                break;\r\n                            case 'atoms':\r\n                                objects[objType][obj] = spawnAtom(objRef.typeID, objRef.id, objRef.posX, objRef.posY, objRef.vx, objRef.vy);\r\n                                break;\r\n                            case 'compounds':\r\n                                objects[objType][obj] = createCompound(objRef);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // else { //Tile drawing\r\n            //     for (let tile of data.tiles) {\r\n\r\n            //         let tileName = 'tile_' + tile.col + '_' + tile.row;\r\n            //         if (objects.tiles[tileName] === undefined) {\r\n            //             // console.log(tileName);\r\n            //             objects.tiles[tileName] = new MapTile(MAP_LAYOUT[tile.row][tile.col], tile.col, tile.row);\r\n            //         }\r\n\r\n            //     }\r\n            // }\r\n\r\n        }\r\n    });\r\n\r\n \r\n      \r\n\r\n    // Sync objects when they are deleted or move out of view\r\n    socket.on('serverSendObjectRemoval', (data) => {\r\n        //An Atom was removed\r\n        if (objects[data.type][data.id] !== undefined) {\r\n            objects[data.type][data.id].hide();\r\n            delete objects[data.type][data.id];\r\n        }\r\n    });\r\n\r\n    socket.on('disconnectedPlayer', (data) => {\r\n        console.log('Player ' + data.id + ' has disconnected');\r\n        chat.addSystemLine('Player ' + objects.players[data.id].name + ' has disconnected');\r\n        if (objects.players[data.id] !== undefined) {\r\n            objects.players[data.id].hide();\r\n            delete objects.players[data.id];\r\n        }\r\n    });\r\n\r\n    //Chat system receiver\r\n    socket.on('serverMSG', data => {\r\n        chat.addSystemLine(data);\r\n    });\r\n\r\n    socket.on('serverSendPlayerChat', data => {\r\n        chat.addChatLine(data.sender, data.message, false);\r\n    });\r\n\r\n    socket.on('serverSendLoginMessage', data => {\r\n        chat.addLoginMessage(data.sender, false);\r\n    });\r\n\r\n    socket.on('serverSendDisconnect', () => {\r\n        quitGame('The game has ended.', false);\r\n        hideElement('winner-panel');\r\n    });\r\n\r\n    // Errors on join\r\n    socket.on('connectionError', (data) => {\r\n        socket.disconnect();\r\n        quitGame(data.msg, true);\r\n    });\r\n\r\n    // Receive information about room players\r\n    socket.on('roomInfo', (data) => {\r\n        // Update lobby info. Pass to app.js\r\n        updateLobby(data);\r\n\r\n        // if(GLOBAL.DEBUG) {\r\n        //     console.log(\"rcvd: \",data);\r\n        // }\r\n    });\r\n\r\n    socket.on('serverSendStartGame', (data) => {\r\n        console.log('game has started');\r\n        startGame(false, data.teams);\r\n    });\r\n\r\n    socket.on('levelUp', (data) => {\r\n        console.log('You LEVELED UP! Level: ' + data.newLevel);\r\n    });\r\n\r\n    // Respawn\r\n    socket.on('serverSendPlayerDeath', (data) => {\r\n        console.log('You Died!');\r\n\r\n        // TODO move trigger to server\r\n        // Releases atoms and deletes the entire atoms array in player\r\n        socket.emit('playerDeathAtoms', {atoms: player.atoms, x: player.posX, y: player.posY});\r\n        for(let at in player.atoms) {\r\n            player.atoms[at] = 0;\r\n            updateAtomList(at);\r\n        }\r\n\r\n        // Reset position to spawnpoint\r\n        player.posX = GLOBAL.SPAWN_POINTS[data.teamNumber].x * GLOBAL.GRID_SPACING * 2;\r\n        player.posY = GLOBAL.SPAWN_POINTS[data.teamNumber].y * GLOBAL.GRID_SPACING * 2;\r\n        socket.emit('move', {\r\n            id: socket.id,\r\n            posX: player.posX,\r\n            posY: player.posY,\r\n            vx: 0,\r\n            vy: 0,\r\n            type: 'players'\r\n        });\r\n    });\r\n\r\n    // Update timer\r\n    socket.on('time', (data) => {\r\n        document.getElementById('timer').innerHTML = '<p>' + data.time + '</p>';\r\n    });\r\n\r\n    // Update scores\r\n    socket.on('serverSendScoreUpdate', (data) => {\r\n        updateScores(data.teamSlot, data.increment);\r\n    });\r\n\r\n    // A player has won\r\n    socket.on('serverSendWinner', (data) => {\r\n        setIngame(false); // Disable keyboard controls and rendering\r\n        displayWinner(data);\r\n    });\r\n\r\n    //Emit join message,\r\n    socket.emit('playerJoin', { sender: chat.player, team: chat.team });\r\n}\r\n\r\n// Linear Interpolation function. Adapted from p5.lerp\r\nfunction lerp(v0, v1, t) {\r\n    return v0 * (1 - t) + v1 * t;\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/client/js/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "objects",
    "memberof": "src/client/js/socket.js",
    "static": true,
    "longname": "src/client/js/socket.js~objects",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{objects}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{\"players\": *, \"atoms\": *, \"compounds\": *, \"tiles\": *}"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "function",
    "name": "beginConnection",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~beginConnection",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{beginConnection}",
    "description": "Attempts to connect to the server.",
    "lineNumber": 31,
    "params": [],
    "return": null
  },
  {
    "__docId__": 207,
    "kind": "function",
    "name": "disconnect",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~disconnect",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{disconnect}",
    "description": "Run on disconnect to reset all server-based variables and connections",
    "lineNumber": 72,
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "function",
    "name": "setupSocket",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~setupSocket",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": "First time setup when connection starts. Run on connect event to ensure that the socket is connected first.",
    "lineNumber": 84,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "lerp",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~lerp",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [
      {
        "name": "v0",
        "types": [
          "*"
        ]
      },
      {
        "name": "v1",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 210,
    "kind": "file",
    "name": "src/server/entry.js",
    "content": "/**\r\n * ENTRY POINT for server.js.\r\n * Uses babel to compile es6 into \r\n */\r\nrequire('babel-register')({\r\n    presets: ['env']\r\n});\r\n\r\nmodule.exports = require('./server.js');",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/entry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/server/server.js",
    "content": "const express = require('express');\r\nconst app = express();\r\nconst http = require('http').Server(app);\r\nconst io = require('socket.io')(http);\r\nimport colors from 'colors'; // Console colors :D\r\nimport {GLOBAL, distanceBetween, isInBounds} from '../client/js/global';\r\nimport { MAP_LAYOUT, TILES, TILE_NAMES } from '../client/js/obj/tiles';\r\nimport { roomMatchmaker } from './utils/matchmaker';\r\nimport { generateID, getTeamNumber, spawnAtomAtVent, spawnAtom } from './utils/serverutils';\r\nimport { initGlobal, initPlayer } from './utils/serverinit';\r\nimport { frameSync } from './utils/framesync';\r\nimport { damage } from './utils/ondamage';\r\nvar config = require('./config.json');\r\n\r\nconst DEBUG = true;\r\nconst COLLISIONVERBOSE = false; // Turn on for debug messages with collision detection\r\n\r\napp.use(express.static(`${__dirname}/../client`));\r\n\r\n/* Contains all game data, including which rooms and players are active.\r\n * \r\n * Structure of Rooms object:\r\n * \r\n// rooms = {\r\n//     roomName: {\r\n//         joinable: true,\r\n//         type: '4v4',\r\n//         teams: [\r\n//             name: 'teamname',\r\n//             players: [...]\r\n//         ],\r\n//         players: {...},\r\n//         atoms: {...},\r\n//         compounds: {...},\r\n//         time: {\r\n//             minutes: 0,\r\n//             seconds: 0,\r\n//             formattedTime: '0:00'\r\n//         }\r\n//     }\r\n// }\r\n*/\r\nlet rooms = {};\r\n\r\n/**\r\n * Teams object containing all the currently playing teams.\r\n * Structure:\r\n * teamName: {\r\n *    room: 'roomName',\r\n *    players: ['playerSocketId', 'player2SocketId', ...],\r\n *    joinable: false/true\r\n * }\r\n * \r\n * -> Create a Team when the first player joins any lobby. Populate room when this occurs.\r\n * -> Change joinable to false when a Team is either full or the game has begun.\r\n * -> Delete the room from the database when the last player leaves.\r\n * -> There cannot be two teams with the same name. Throw an error if this occurs.\r\n */\r\nlet teams = {};\r\n\r\n// Initializize Server. Includes atom spawning and timer mechanics\r\ninitGlobal();\r\n\r\n\r\n// Initialize all socket listeners when a request is established\r\nio.on('connection', socket => {\r\n\r\n    // Local variable declaration\r\n    let room = socket.handshake.query.room;\r\n    let roomType = socket.handshake.query.roomType;\r\n    let team = socket.handshake.query.team;\r\n\r\n    // Run matchmaker\r\n    room = roomMatchmaker(socket, room, teams[team]);\r\n\r\n    // Init player\r\n    initPlayer(socket, room);\r\n    let thisPlayer = rooms[room].players[socket.id];\r\n \r\n    // Setup player array sync- once a frame\r\n    setInterval(() => {\r\n        frameSync(socket, room, thisPlayer);\r\n    }, 1000/60);\r\n\r\n    // Receives a chat from a player, then broadcasts it to other players\r\n    socket.to(room).on('playerChat', data => {\r\n    // console.log('sender: ' + data.sender);\r\n        const _sender = data.sender.replace(/(<([^>]+)>)/ig, '');\r\n        const _message = data.message.replace(/(<([^>]+)>)/ig, '');\r\n\r\n        console.log('[CHAT] '.bold.blue + `${(new Date()).getHours()}:${(new Date()).getMinutes()} ${_sender}: ${_message}`.magenta);\r\n\r\n        socket.to(room).broadcast.emit('serverSendPlayerChat', { sender: _sender, message: _message.substring(0, 35) });\r\n    });\r\n\r\n    // Other player joins the socket.to(room)\r\n    socket.to(room).on('playerJoin', data => {\r\n    // console.log('sender: ' + data.sender);\r\n        const _sender = data.sender.replace(/(<([^>]+)>)/ig, '');\r\n        socket.to(room).broadcast.emit('serverSendLoginMessage', { sender: _sender, team: data.team });\r\n        if(DEBUG) {\r\n            socket.to(room).broadcast.emit('serverMSG', 'You are connected to a DEBUG enabled server. ');\r\n        }\r\n\r\n    });\r\n\r\n    // Broadcasts player join message\r\n   \r\n    socket.to(room).broadcast.emit('serverSendLoginMessage', {\r\n        sender: socket.id\r\n    });\r\n    if(DEBUG) {\r\n        socket.to(room).broadcast.emit('serverMSG', 'You are connected to a DEBUG enabled server. ');\r\n    }\r\n\r\n    // Hides the lobby screen if the game has already started\r\n    if(rooms[room].started) {\r\n        socket.emit('serverSendStartGame', {teams: rooms[room].teams});\r\n    }\r\n\r\n    /**\r\n   * On player movement:\r\n   * data is in format\r\n   *  - id: index of player that moved\r\n   *  - type: atoms, players, or compounds\r\n   *  - posX: new x position\r\n   *  - posY: new y position\r\n   *  - vx: x-velocity\r\n   *  - vy: y-velocity\r\n   */\r\n    socket.to(room).on('move', data => {\r\n    // Player exists in database already because it was created serverside - no need for extra checking\r\n        if(rooms[room][data.type][data.id] !== undefined) {\r\n            rooms[room][data.type][data.id].posX = data.posX;\r\n            rooms[room][data.type][data.id].posY = data.posY;\r\n            rooms[room][data.type][data.id].vx = data.vx;\r\n            rooms[room][data.type][data.id].vy = data.vy;\r\n        }\r\n\r\n    }); \r\n\r\n    // An atom was collected or changed\r\n    socket.to(room).on('atomCollision', data => {\r\n        if (COLLISIONVERBOSE) {\r\n            console.log('atomCollision');\r\n        }\r\n        delete rooms[room].atoms[data.id];\r\n        socket.to(room).broadcast.emit('serverSendObjectRemoval', {id: data.id, type: 'atoms'});\r\n    });\r\n\r\n    socket.to(room).on('compoundCollision', data => {\r\n        if (COLLISIONVERBOSE) {\r\n            console.log('compoundCollision');\r\n        }\r\n        if(rooms[room].compounds[data.id] !== undefined) {\r\n            damage(data, room, socket);   \r\n            delete rooms[room].compounds[data.id];\r\n            socket.to(room).broadcast.emit('serverSendObjectRemoval', {id: data.id, type: 'compounds'});\r\n            socket.emit('serverSendObjectRemoval', {id: data.id, type: 'compounds'});\r\n\r\n        }\r\n    });\r\n\r\n    socket.to(room).on('damage', data => {\r\n        damage(data, room, socket);\r\n    });\r\n\r\n    // A player spawned a Compound\r\n    socket.to(room).on('createCompound', data => {\r\n    // Calculate velocities based on cursor position\r\n        let theta = Math.atan2(data.mousePos.y,data.mousePos.x);\r\n        let newCompound = {\r\n            id: generateID(),\r\n            posX: thisPlayer.posX + GLOBAL.PLAYER_RADIUS, \r\n            posY: thisPlayer.posY - GLOBAL.PLAYER_RADIUS,\r\n            vx: data.blueprint.params.speed * Math.cos(theta),\r\n            vy: data.blueprint.params.speed * Math.sin(theta),\r\n            blueprint: data.blueprint,\r\n            sendingTeam: data.sendingTeam,\r\n            sender: data.sender\r\n        };\r\n        rooms[room].compounds[newCompound.id] = newCompound;\r\n    // socket.to(room).broadcast.emit('serverSendCreateCompound', newCompound); //Send to everyone but the sender\r\n    // socket.to(room).emit('serverSendCreateCompound', newCompound); //Send to the sender\r\n    });\r\n\r\n    //A Player has performed an action and gained experience\r\n    socket.to(room).on('experienceEvent', data => {\r\n    //data.event is the event that occured\r\n\r\n    //Add a specific amount to the players experience\r\n    //Get the index of the Event and then pass it into the values array to get the actual value\r\n        thisPlayer.experience += GLOBAL.EXPERIENCE_VALUES[data.event];\r\n\r\n        // Determine the player's level based on experience\r\n        let oldLevel = thisPlayer.level;\r\n        for(let level of GLOBAL.EXPERIENCE_LEVELS){\r\n            if(thisPlayer.experience >= level)\r\n                thisPlayer.level = GLOBAL.EXPERIENCE_LEVELS.indexOf(level) + 1;\r\n        }\r\n\r\n        // Check to see if the player leveled up\r\n        if(thisPlayer.level > oldLevel) {\r\n            socket.emit('levelUp', {newLevel: thisPlayer.level});\r\n        }\r\n    });\r\n\r\n    socket.on('startGame', data => {\r\n        console.log('Game has started in room ' + room);\r\n        // Make the room and teams unjoinable\r\n        for(let tm of rooms[room].teams) {\r\n            teams[tm.name].joinable = false;\r\n        }\r\n        rooms[room].joinable = false;\r\n\r\n        socket.broadcast.to(room).emit('serverSendStartGame', {start: data.start, teams: rooms[room].teams});\r\n        socket.emit('serverSendStartGame', {start: data.start, teams: rooms[room].teams});\r\n        rooms[room].started = true;\r\n    });\r\n\r\n    socket.on('spawnAtom', (data) => {\r\n        spawnAtomAtVent(data.row, data.col, room, true);\r\n    });\r\n\r\n    // Atom information sent on player death. Spreads atoms randomly in a circle around the death area.\r\n    socket.on('playerDeathAtoms', (data) => {\r\n        for(let at in data.atoms) {\r\n            for(let i = 0; i < GLOBAL.MAX_DEATH_ATOMS && i < data.atoms[at]; i++)\r\n                spawnAtom(data.x, data.y, at, room, false);\r\n        }\r\n    });\r\n\r\n    socket.on('disconnect', data => {\r\n        console.log('[Server]'.bold.blue + ' Disconnect Received: '.red + ('' + socket.id).yellow + ('' + rooms[room].players[socket.id]).green + ': ' + data);\r\n\r\n        socket.to(room).broadcast.emit('disconnectedPlayer', { id: socket.id }); //Broadcast to everyone in the room to delete the player\r\n\r\n        delete rooms[room].players[socket.id]; //Remove the server side player\r\n\r\n        // Delete room if there is nobody inside\r\n        if (Object.keys(rooms[room].players).length === 0) {\r\n            console.log('[Server] '.bold.blue + 'Closing room '.red + (room + '').bold.red);\r\n            delete io.sockets.adapter.rooms[socket.id];\r\n            delete rooms[room];\r\n\r\n            if (room !== GLOBAL.NO_ROOM_IDENTIFIER) {\r\n                // Remove from teams array\r\n                teams[team].players.splice(teams[team].players.indexOf(socket.id), 1);\r\n                // rooms[room].teams[team].players.splice(rooms[room].teams[team].players.indexOf(socket.id), 1);\r\n\r\n                // Delete team if all players have left\r\n                if (teams[team].players.length === 0)\r\n                    delete teams[team];\r\n\r\n            }\r\n        }\r\n    });\r\n});\r\n\r\n// Notify on console when server has started\r\nconst serverPort = process.env.PORT || config.port;\r\nhttp.listen(serverPort, () => {\r\n    rooms = {};\r\n    console.log('[Server] '.bold.blue + `started on port: ${serverPort}`.blue);\r\n});\r\n\r\n/**\r\n * Sets a new value for a protected server field.\r\n * Adopted from https://stackoverflow.com/questions/18936915/dynamically-set-property-of-nested-object\r\n * @param {*} value The value to set\r\n * @param {*} path Array containing all of the subobject identifiers, with the 0th index being the lowest level. \r\n *                 Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']\r\n */\r\nexport function setField(value, path) {\r\n\r\n    if(path === undefined || path.length === 0)\r\n        throw new Error('Error in setField: path cannot be empty');\r\n    \r\n    let schema = (path[0] === 'rooms') ? rooms : (path[0] === 'teams') ? teams : undefined;\r\n    if (schema === undefined)\r\n        throw new Error('Base object ' + path[0] + ' does not exist!');\r\n\r\n    let len = path.length;\r\n    for (let i = 1; i < len - 1; i++) {\r\n        let elem = path[i];\r\n        if (!schema[elem]) schema[elem] = {};\r\n        schema = schema[elem];\r\n    }\r\n\r\n    schema[path[len - 1]] = value;\r\n\r\n}\r\n\r\n/**\r\n * Returns the value given a path to that value.\r\n * Adopted from https://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key\r\n * @param {*} path Array containing all of the subobject identifiers, with the 0th index being the lowest level.\r\n *                 Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']\r\n * @returns The value for the given field.\r\n */\r\nexport function getField(path) {\r\n    if (path === undefined || path.length === 0)\r\n        throw new Error('Error in setField: path cannot be empty');\r\n    if (path.length === undefined)\r\n        throw new Error('Error in setField: path must be an array');\r\n    \r\n    let obj = (path[0] === 'rooms') ? rooms : (path[0] === 'teams') ? teams : undefined;\r\n    if(obj === undefined)\r\n        throw new Error('Error in setField: Base object ' + path[0] + ' does not exist!');\r\n\r\n    for(let i = 1; i < path.length; i++)\r\n        obj = obj[path[i]];\r\n    // console.log(path, obj);\r\n    return obj;\r\n}\r\n\r\n/**\r\n * Deletes one of the three types of gameObjects synced to the server\r\n * @param {string} type Either player, atom, compound \r\n * @param {*} id ID of the object to delete\r\n * @param {string} room Room name to delete in\r\n */\r\nexport function deleteObject(type, id, room) {\r\n    delete rooms[room][type][id];\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "express",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~express",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "app",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~app",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "http",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~http",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "io",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~io",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "config",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~config",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "variable",
    "name": "DEBUG",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~DEBUG",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "COLLISIONVERBOSE",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~COLLISIONVERBOSE",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "rooms",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~rooms",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "teams",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~teams",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": "Teams object containing all the currently playing teams.\nStructure:\nteamName: {\n   room: 'roomName',\n   players: ['playerSocketId', 'player2SocketId', ...],\n   joinable: false/true\n}\n\n-> Create a Team when the first player joins any lobby. Populate room when this occurs.\n-> Change joinable to false when a Team is either full or the game has begun.\n-> Delete the room from the database when the last player leaves.\n-> There cannot be two teams with the same name. Throw an error if this occurs.",
    "lineNumber": 59,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "serverPort",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~serverPort",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "setField",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~setField",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{setField}",
    "description": "Sets a new value for a protected server field.\nAdopted from https://stackoverflow.com/questions/18936915/dynamically-set-property-of-nested-object",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Array containing all of the subobject identifiers, with the 0th index being the lowest level. \n                Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']"
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "function",
    "name": "getField",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~getField",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{getField}",
    "description": "Returns the value given a path to that value.\nAdopted from https://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key",
    "lineNumber": 301,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The value for the given field."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Array containing all of the subobject identifiers, with the 0th index being the lowest level.\n                Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value for the given field."
    }
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "deleteObject",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~deleteObject",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{deleteObject}",
    "description": "Deletes one of the three types of gameObjects synced to the server",
    "lineNumber": 323,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Either player, atom, compound"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the object to delete"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Room name to delete in"
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/server/utils/framesync.js",
    "content": "import { distanceBetween, isInBounds, GLOBAL } from '../../client/js/global';\r\nimport { deleteObject, getField, setField } from '../server';\r\n\r\n/**\r\n * Runs once a frame, per player.\r\n * @param {*} socket The socket.io instance\r\n * @param {string} room The name of the room\r\n * @param {*} thisPlayer The player object\r\n */\r\nexport function frameSync(socket, room, thisPlayer) {\r\n    if(socket.connected) {\r\n\r\n        let thisRoom = getField(['rooms', room]);\r\n    \r\n        if (thisRoom !== undefined) {\r\n            // Distance checking for all objects\r\n            let tempObjects = {\r\n                players: {},\r\n                atoms: {},\r\n                compounds: {}\r\n            };\r\n    \r\n            // Move compounds\r\n            for (let compound in thisRoom.compounds) {\r\n                let compoundRef = thisRoom.compounds[compound];\r\n                if (isInBounds(compoundRef)) {\r\n                    setField(compoundRef.posX + compoundRef.vx, ['rooms', room, 'compounds', compound, 'posX']);\r\n                    setField(compoundRef.posY + compoundRef.vy, ['rooms', room, 'compounds', compound, 'posY']);\r\n                    // compoundRef.posX += compoundRef.vx;\r\n                    // compoundRef.posY += compoundRef.vy;\r\n                }\r\n                else { // delete\r\n                    socket.to(room).broadcast.emit('serverSendObjectRemoval', { id: compound, type: 'compounds' });\r\n                    socket.emit('serverSendObjectRemoval', { id: compound, type: 'compounds' });\r\n                    deleteObject('compounds', compound, room);\r\n                }\r\n            }\r\n            // Move atoms\r\n            for (let atom in thisRoom.atoms) {\r\n                let distance = distanceBetween(\r\n                    { posX: thisRoom.atoms[atom].posX + GLOBAL.ATOM_RADIUS, posY: thisRoom.atoms[atom].posY - GLOBAL.ATOM_RADIUS },\r\n                    { posX: thisPlayer.posX + GLOBAL.PLAYER_RADIUS, posY: thisPlayer.posY - GLOBAL.PLAYER_RADIUS });\r\n                // Attractive force\r\n                if (distance < GLOBAL.ATTRACTION_RADIUS) {\r\n                    let theta = Math.atan2((thisPlayer.posY - thisRoom.atoms[atom].posY), (thisPlayer.posX - thisRoom.atoms[atom].posX));\r\n    \r\n                    // Attraction is based on logarithmic algorithm\r\n    \r\n                    setField(1 / distance * Math.cos(theta) * GLOBAL.ATTRACTION_COEFFICIENT, ['rooms', room, 'atoms', atom, 'vx']);\r\n                    setField(1 / distance * Math.sin(theta) * GLOBAL.ATTRACTION_COEFFICIENT, ['rooms', room, 'atoms', atom, 'vy']);\r\n                    // thisRoom.atoms[atom].vx = 1 / distance * Math.cos(theta) * GLOBAL.ATTRACTION_COEFFICIENT;\r\n                    // thisRoom.atoms[atom].vy = 1 / distance * Math.sin(theta) * GLOBAL.ATTRACTION_COEFFICIENT;\r\n                    // console.log(this.vx, this.vy, this.posX, this.posY);\r\n                }\r\n                // Atom slowing down\r\n                else if (Math.abs(thisRoom.atoms[atom].vx) > GLOBAL.DEADZONE || Math.abs(thisRoom.atoms[atom].vy) > GLOBAL.DEADZONE) {\r\n                    setField(thisRoom.atoms[atom].vx * GLOBAL.VELOCITY_STEP, ['rooms', room, 'atoms', atom, 'vx']);\r\n                    setField(thisRoom.atoms[atom].vy * GLOBAL.VELOCITY_STEP, ['rooms', room, 'atoms', atom, 'vy']);\r\n                    // thisRoom.atoms[atom].vx *= GLOBAL.VELOCITY_STEP;\r\n                    // thisRoom.atoms[atom].vy *= GLOBAL.VELOCITY_STEP;\r\n                }\r\n    \r\n                if (Math.abs(thisRoom.atoms[atom].vx) <= GLOBAL.DEADZONE)\r\n                    setField(0, ['rooms', room, 'atoms', atom, 'vx']);\r\n                if (Math.abs(thisRoom.atoms[atom].vy) <= GLOBAL.DEADZONE)\r\n                    setField(0, ['rooms', room, 'atoms', atom, 'vy']);\r\n    \r\n                // Move atom\r\n                setField(thisRoom.atoms[atom].posX + thisRoom.atoms[atom].vx, ['rooms', room, 'atoms', atom, 'posX']);\r\n                setField(thisRoom.atoms[atom].posY + thisRoom.atoms[atom].vy, ['rooms', room, 'atoms', atom, 'posY']);\r\n                // thisRoom.atoms[atom].posX += thisRoom.atoms[atom].vx;\r\n                // thisRoom.atoms[atom].posY += thisRoom.atoms[atom].vy;\r\n            }\r\n    \r\n            for (let objType in tempObjects) {\r\n                for (let obj in thisRoom[objType]) {\r\n                    if (distanceBetween(thisRoom[objType][obj], thisPlayer) < GLOBAL.DRAW_RADIUS)\r\n                        tempObjects[objType][obj] = thisRoom[objType][obj];\r\n                    else if (objType === 'players') // Player left view\r\n                        socket.emit('serverSendObjectRemoval', { id: obj, type: objType });\r\n                }\r\n            }\r\n    \r\n            socket.emit('objectSync', tempObjects);\r\n    \r\n            if (thisRoom.started)\r\n                socket.emit('time', { time: thisRoom.time.formattedTime });\r\n    \r\n            if (thisRoom !== undefined && !thisRoom.started) {\r\n                // Send over the room player information\r\n                // socket.to(room).broadcast.emit('roomInfo', thisRoom.players);\r\n                socket.emit('roomInfo', thisRoom.players);\r\n            }\r\n        }\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/utils/framesync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "frameSync",
    "memberof": "src/server/utils/framesync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/framesync.js~frameSync",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/framesync.js",
    "importStyle": "{frameSync}",
    "description": "Runs once a frame, per player.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "The socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The name of the room"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "thisPlayer",
        "description": "The player object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/server/utils/matchmaker.js",
    "content": "import { GLOBAL } from '../../client/js/global';\r\nimport { getField, setField } from '../server';\r\nimport { generateID } from './serverutils';\r\n\r\n/**\r\n * Matchmaking system for public matches. Runs after initial socket.io server connection, but before connecting to a server.\r\n * @param {*} socket Socket.io instance\r\n * @param {string} room Name of room\r\n * @param {string} team Name of team\r\n * @returns The new room that has been assigned\r\n */\r\nexport function roomMatchmaker(socket, room, team) {\r\n\r\n    let validJoin = false; // This join attempt was valid.\r\n    let roomType = socket.handshake.query.roomType;\r\n\r\n    // Make sure the room you are trying to join is valid\r\n    // console.log(getField(['rooms', room]));\r\n    if (room !== GLOBAL.NO_ROOM_IDENTIFIER && getField(['rooms', room]) !== undefined && !getField(['rooms', room]).joinable && getField(['rooms', room]) !== undefined) // Room full\r\n        socket.emit('connectionError', { msg: 'The room ' + room + ' has started or is full!' });\r\n\r\n    if (team !== undefined && team.room !== undefined) {\r\n        // Make sure everything is compatible\r\n        if (getField(['rooms', team.room]) !== undefined && getField(['rooms', team.room]).type !== roomType) // Wrong room type\r\n            socket.emit('connectionError', { msg: 'Your team is playing in a ' + getField('rooms', team.room).type + ' room, but you are trying to join a ' + roomType + ' room!' });\r\n        else if (!team.joinable) // Team full\r\n            socket.emit('connectionError', { msg: 'Your team is already in game or full!' });\r\n        else {// is joinable\r\n            validJoin = true;\r\n            room = team.room;\r\n\r\n            // Equivalent to teams[socket.handshake.query.team].players.push(socket.id);\r\n            setField(socket.id, ['teams', socket.handshake.query.team, 'players', getField(['teams', socket.handshake.query.team, 'players']).length ]);\r\n\r\n            if ((roomType === '2v2v2v2' && team.players.length === 2) || team.players.length === 4)\r\n                setField(false, ['teams', socket.handshake.query.team, 'joinable']);\r\n        }\r\n    }\r\n    // Team not found \r\n    else {\r\n        // Try joining a room\r\n        for (let roomName in getField(['rooms'])) {\r\n            if (roomName.indexOf(roomType) > -1)\r\n                if ((roomType === '4v4' && getField(['rooms', roomName, 'teams']).length < 2) || getField(['rooms', roomName, 'teams']).length < 4) {\r\n                    room = roomName;\r\n                }\r\n        }\r\n\r\n        // No matching rooms - must create a new room\r\n        if (room === GLOBAL.NO_ROOM_IDENTIFIER)\r\n            room = 'NA_' + roomType + '_' + generateID();\r\n\r\n        // Make team\r\n        setField({\r\n            room: room,\r\n            players: [socket.id],\r\n            joinable: true\r\n        }, ['teams', socket.handshake.query.team]);\r\n\r\n        validJoin = true;\r\n    }\r\n\r\n    // Join custom room\r\n    if (validJoin)\r\n        socket.join(room, () => {\r\n            console.log('[Server] '.bold.blue + `Player ${socket.handshake.query.name} (${socket.id}) joined room ${room} in team ${socket.handshake.query.team}`.yellow);\r\n        });\r\n\r\n    return room;\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/utils/matchmaker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "roomMatchmaker",
    "memberof": "src/server/utils/matchmaker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/matchmaker.js~roomMatchmaker",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/matchmaker.js",
    "importStyle": "{roomMatchmaker}",
    "description": "Matchmaking system for public matches. Runs after initial socket.io server connection, but before connecting to a server.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The new room that has been assigned"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Name of room"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "Name of team"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The new room that has been assigned"
    }
  },
  {
    "__docId__": 229,
    "kind": "file",
    "name": "src/server/utils/ondamage.js",
    "content": "import { GLOBAL } from '../../client/js/global';\r\nimport { getField, setField } from '../server';\r\nimport { getTeamNumber } from './serverutils';\r\n\r\n/**\r\n * Changes the health of the player by the amount given.\r\n * @param {*} data The data sent by the client.\r\n * @param {string} room This room.\r\n * @param {*} socket This socket.\r\n * Must include the player id and amount to damage.\r\n * Amount may be negative (for health boost).\r\n */\r\nexport function damage(data, room, socket) {\r\n\r\n    let thisRoom = getField(['rooms', room]);\r\n    let thisPlayer = thisRoom.players[data.player];\r\n\r\n    if (thisPlayer !== undefined) {\r\n\r\n        // thisPlayer.health -= data.damage;\r\n        setField(thisPlayer.health - data.damage, ['rooms', room, 'players', data.player, 'health']);\r\n\r\n        // Add damage to database\r\n        if (thisPlayer.damagedBy[data.sentBy] === undefined)\r\n            setField(0, ['rooms', room, 'players', data.player, 'damagedBy', data.sentBy]);\r\n        // thisPlayer.damagedBy[data.sentBy] += data.damage;\r\n        setField(thisPlayer.damagedBy[data.sentBy] + data.damage, ['rooms', room, 'players', data.player, 'damagedBy', data.sentBy]);\r\n\r\n        if (thisPlayer.health <= 0) {\r\n            // console.log(thisRoom.teams.indexOf(socket.handshake.query.team));\r\n            socket.emit('serverSendPlayerDeath', { teamNumber: getTeamNumber(room, socket.handshake.query.team) });\r\n            setField(GLOBAL.MAX_HEALTH, ['rooms', room, 'players', data.player, 'health']);\r\n\r\n            if(data.id !== undefined) {\r\n                // Read damagedBy to award points, clear in the process\r\n                let max = null;\r\n                let dataToSend;\r\n                for (let pl in thisPlayer.damagedBy) {\r\n                    dataToSend = {\r\n                        player: pl,\r\n                        teamSlot: getTeamNumber(room, thisRoom.compounds[data.id].sendingTeam),\r\n                        increment: GLOBAL.ASSIST_SCORE,\r\n                        kill: false\r\n                    };\r\n\r\n                    // Add to team score, checking if team score is initialized\r\n                    setField((thisRoom.teams[dataToSend.teamSlot].score === undefined) ? dataToSend.increment : thisRoom.teams[dataToSend.teamSlot].score + dataToSend.increment, ['rooms', room, 'teams', dataToSend.teamSlot, 'score']);\r\n\r\n\r\n                    socket.to(room).broadcast.emit('serverSendScoreUpdate', dataToSend);\r\n                    socket.emit('serverSendScoreUpdate', dataToSend);\r\n                    if (max === null || thisPlayer.damagedBy[pl] > thisPlayer.damagedBy[max])\r\n                        max = pl;\r\n                }\r\n\r\n                // Add to score of person who dealt the most damage\r\n                dataToSend.player = max;\r\n                dataToSend.increment = GLOBAL.KILL_SCORE - GLOBAL.ASSIST_SCORE;\r\n                dataToSend.kill = true;\r\n                socket.to(room).broadcast.emit('serverSendScoreUpdate', dataToSend);\r\n                socket.emit('serverSendScoreUpdate', dataToSend);\r\n\r\n                // Add to team score\r\n                setField(thisRoom.teams[dataToSend.teamSlot].score + dataToSend.increment, ['rooms', room, 'teams', dataToSend.teamSlot, 'score']);\r\n\r\n                // Clear damagedBy values\r\n                for (let pl in thisPlayer.damagedBy)\r\n                    setField(0, ['rooms', room, 'players', data.player, 'damagedBy', pl]);\r\n\r\n                // Check if a team won\r\n                for (let tm of thisRoom.teams) {\r\n                    if (tm.score >= GLOBAL.WINNING_SCORE) {\r\n\r\n                        let dataToSend = {\r\n                            winner: tm\r\n                            // teamScore: thisRoom.teams[dataToSend.teamSlot].score             \r\n                            //other data here TODO post ranking\r\n                        };\r\n                        socket.to(room).broadcast.emit('serverSendWinner', dataToSend);\r\n                        socket.emit('serverSendWinner', dataToSend);\r\n\r\n                        // Close room after delay (kick all players)\r\n                        setTimeout(() => {\r\n                            socket.emit('serverSendDisconnect', {});\r\n                            socket.to(room).broadcast.emit('serverSendDisconnect', {});\r\n                        }, GLOBAL.ROOM_DELETE_DELAY);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else\r\n        console.warn('Player of ID ' + data.id + ' couldn\\'t be damaged because they don\\'t exist!');\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/utils/ondamage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "damage",
    "memberof": "src/server/utils/ondamage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/ondamage.js~damage",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/ondamage.js",
    "importStyle": "{damage}",
    "description": "Changes the health of the player by the amount given.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data sent by the client."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "This room."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "This socket.\nMust include the player id and amount to damage.\nAmount may be negative (for health boost)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/server/utils/serverinit.js",
    "content": "import { getField, setField } from '../server';\r\nimport { MAP_LAYOUT, TILES, TILE_NAMES } from '../../client/js/obj/tiles';\r\nimport { GLOBAL } from '../../client/js/global';\r\nimport { spawnAtomAtVent } from './serverutils';\r\nimport colors from 'colors'; // Console colors :D\r\n\r\n/**\r\n * Methods to run on server initialization and player connect initialization.\r\n */\r\n\r\n/**\r\n * Global initialiation. Run once on server start.\r\n */\r\nexport function initGlobal() {\r\n    // Set up atom spawning three times a second. This is processed outside of the player specific behavior because more players joining !== more resources spawn.\r\n    setInterval(() => {\r\n        for (let room in getField(['rooms'])) {\r\n            for (let row = 0; row < MAP_LAYOUT.length; row++)\r\n                for (let col = 0; col < MAP_LAYOUT[0].length; col++) {\r\n                    if (TILES[TILE_NAMES[MAP_LAYOUT[row][col]]].type === 'spawner') {\r\n                        spawnAtomAtVent(row, col, room, false);\r\n                    }\r\n\r\n                }\r\n        }\r\n    }, GLOBAL.ATOM_SPAWN_DELAY);\r\n\r\n    // Timer\r\n    setInterval(() => {\r\n        for (let room in getField(['rooms'])) {\r\n            if (getField(['rooms', room, 'started'])) {\r\n                let seconds = getField(['rooms', room, 'time', 'seconds']), \r\n                    minutes = getField(['rooms', room, 'time', 'minutes']);\r\n                    \r\n                // Equivalent to rooms[room].time.seconds++;\r\n                setField(seconds + 1, ['rooms', room, 'time', 'seconds']);\r\n\r\n                if (seconds >= 60) {\r\n                    setField(0, ['rooms', room, 'time', 'seconds']);\r\n                    setField(minutes + 1, ['rooms', room, 'time', 'minutes']);\r\n                }\r\n\r\n                // Set formatted Time\r\n                setField(minutes + ':' + ((seconds < 10) ? '0' : '') + seconds, ['rooms', room, 'time', 'formattedTime']);\r\n            }\r\n        }\r\n    }, 1000);\r\n}\r\n\r\n/**\r\n * Run on every player join.\r\n * @param {*} socket The socket.io instance\r\n * @param {string} room The name of the room that the player belongs to\r\n */\r\nexport function initPlayer(socket, room) {\r\n    // Initialize room array and spawn atoms on first player join\r\n    let thisRoom = getField(['rooms', room]);\r\n    if (thisRoom === undefined || thisRoom === null) {\r\n        console.log('[Server] '.bold.blue + 'Setting up room '.yellow + ('' + room).bold.red + ' as type ' + socket.handshake.query.roomType);\r\n        setField({\r\n            joinable: true,\r\n            teams: [],\r\n            atoms: {},\r\n            compounds: {},\r\n            type: socket.handshake.query.roomType,\r\n            time: {\r\n                minutes: 0,\r\n                seconds: 0,\r\n                formattedTime: '0:00'\r\n            }\r\n        }, ['rooms', room]);\r\n    }\r\n    thisRoom = getField(['rooms', room]);\r\n\r\n    // Add team to database\r\n\r\n    // Equivalent to rooms[room].teams.push({ name: team });\r\n    setField({name: socket.handshake.query.team}, ['rooms', room, 'teams', getField(['rooms', room, 'teams']).length]);\r\n\r\n    // Check if room is full\r\n    if (((thisRoom.type === '4v4' || thisRoom.type === '2v2') && thisRoom.teams.length === 2) || thisRoom.teams.length === 4)\r\n        setField(false, ['rooms', room, 'joinable']);\r\n\r\n    // Create new player in rooms object\r\n    setField({\r\n        id: socket.id,\r\n        name: socket.handshake.query.name,\r\n        room: socket.handshake.query.room,\r\n        team: socket.handshake.query.team,\r\n        health: GLOBAL.MAX_HEALTH,\r\n        posX: GLOBAL.SPAWN_POINTS[thisRoom.teams.length - 1].x * GLOBAL.GRID_SPACING * 2,\r\n        posY: GLOBAL.SPAWN_POINTS[thisRoom.teams.length - 1].y * GLOBAL.GRID_SPACING * 2,\r\n        vx: 0,\r\n        vy: 0,\r\n        experience: 0,\r\n        damagedBy: {}\r\n    }, ['rooms', room, 'players', socket.id]);\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/utils/serverinit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "initGlobal",
    "memberof": "src/server/utils/serverinit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverinit.js~initGlobal",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverinit.js",
    "importStyle": "{initGlobal}",
    "description": "Global initialiation. Run once on server start.",
    "lineNumber": 14,
    "params": [],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "initPlayer",
    "memberof": "src/server/utils/serverinit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverinit.js~initPlayer",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverinit.js",
    "importStyle": "{initPlayer}",
    "description": "Run on every player join.",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "The socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The name of the room that the player belongs to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "src/server/utils/serverutils.js",
    "content": "import { TILES, TILE_NAMES, MAP_LAYOUT } from '../../client/js/obj/tiles';\r\nimport { getField, setField } from '../server';\r\nimport { GLOBAL } from '../../client/js/global';\r\n\r\n/**\r\n * Misc. standalone utilities for the server.\r\n */\r\n\r\n/**\r\n* Returns a random number between between 10000000 and 99999999, inclusive.\r\n* TODO Make every ID guaranteed unique\r\n* @returns random id between 10000000 and 99999999\r\n*/\r\nexport function generateID() {\r\n    return Math.floor(Math.random() * 90000000) + 10000000;\r\n}\r\n\r\n/**\r\n * Spawns an atom at the vent at the given row and column.\r\n * @param {number} row The row of the vent \r\n * @param {number} col The column of the vent to spawn at\r\n * @param {string} room The room to spawn in\r\n * @param {boolean} verbose True if this method should output to the console\r\n */\r\nexport function spawnAtomAtVent(row, col, room, verbose) {\r\n    // Atom to spawn. Gets a random element from the tile paramter array `atomsToSpawn`\r\n    let atomToSpawn = TILES[TILE_NAMES[MAP_LAYOUT[row][col]]].params.atomsToSpawn[Math.floor(Math.random() * TILES[TILE_NAMES[MAP_LAYOUT[row][col]]].params.atomsToSpawn.length)];\r\n\r\n    let x = col * GLOBAL.GRID_SPACING * 2 + GLOBAL.GRID_SPACING;\r\n    let y = row * GLOBAL.GRID_SPACING * 2 - GLOBAL.GRID_SPACING;\r\n\r\n    spawnAtom(x, y, atomToSpawn, room, verbose);\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param {number} x X-position of center\r\n * @param {number} y Y-position of center\r\n * @param {string} type Type of atom to spawn\r\n * @param {string} room The room to spawn in\r\n * @param {boolean} verbose True if this method should output to the console\r\n */\r\nexport function spawnAtom(x, y, type, room, verbose) {\r\n\r\n    let theta = Math.random() * Math.PI * 2; // Set random direction for atom to go in once spawned\r\n\r\n    let atom = {\r\n        typeID: type,\r\n        id: generateID(),\r\n        posX: x,\r\n        posY: y,\r\n        vx: Math.cos(theta) * GLOBAL.ATOM_SPAWN_SPEED,\r\n        vy: Math.sin(theta) * GLOBAL.ATOM_SPAWN_SPEED\r\n    };\r\n    if (getField(['rooms', room]) !== undefined)\r\n        setField(atom, ['rooms', room, 'atoms', atom.id]);\r\n\r\n    // Log to console\r\n    if (verbose)\r\n        console.log('SPAWN ATOM ' + atomToSpawn + ' theta:' + theta + ', vx: ' + atom.vx + ', vy: ' + atom.vy);\r\n}\r\n\r\n/**\r\n * Returns the index of the given team within the team array of the given room.\r\n * @param {string} room The room name to check\r\n * @param {string} teamName The team name to return the number of\r\n */\r\nexport function getTeamNumber(room, teamName) {\r\n    for (let i = 0; i < getField(['rooms', room, 'teams']).length; i++)\r\n        if (getField(['rooms', room, 'teams'])[i].name === teamName)\r\n            return i;\r\n\r\n    return -1; //Team not found\r\n}",
    "static": true,
    "longname": "C:/Users/BenCu/Documents/AtomBlast.io/src/server/utils/serverutils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "generateID",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~generateID",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{generateID}",
    "description": "Returns a random number between between 10000000 and 99999999, inclusive.\nTODO Make every ID guaranteed unique",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "random id between 10000000 and 99999999"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "random id between 10000000 and 99999999"
    },
    "params": []
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "spawnAtomAtVent",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~spawnAtomAtVent",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{spawnAtomAtVent}",
    "description": "Spawns an atom at the vent at the given row and column.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "The row of the vent"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "The column of the vent to spawn at"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to spawn in"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "True if this method should output to the console"
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "spawnAtom",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~spawnAtom",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{spawnAtom}",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X-position of center"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y-position of center"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of atom to spawn"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to spawn in"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "True if this method should output to the console"
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "getTeamNumber",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~getTeamNumber",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{getTeamNumber}",
    "description": "Returns the index of the given team within the team array of the given room.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room name to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "teamName",
        "description": "The team name to return the number of"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# AtomBlast.io\r\nOur first attempt at an multiplayer IO game.\r\n\r\n\r\n[![Inline docs](https://inch-ci.org/github/BananiumLabs/AtomBlast.io.svg?branch=pixi)](https://inch-ci.org/github/BananiumLabs/AtomBlast.io)\r\n\r\n[Click here](https://docs.google.com/document/d/1WfPeLDOq0typScXC974l0_CQz-JU2uzMb1uliLe71E4/edit#) to view our concept doc. Contact us at admin@bananiumlabs.com to request access.\r\n",
    "longname": "C:\\Users\\BenCu\\Documents\\AtomBlast.io\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n    \"name\": \"atomblast.io\",\r\n    \"version\": \"1.0.0\",\r\n    \"description\": \"First attempt at multiplayer online io game\",\r\n    \"main\": \"index.js\",\r\n    \"scripts\": {\r\n        \"test\": \"(jest && echo \\\" \\\\033[1;40;32m Unit testing passed.\\\\033[m \\\") || (echo \\\" \\\\033[1;41;33m Unit testing failed.\\\\033[m \\\" && exit 1)\",\r\n        \"watch\": \"watchify src/client/js/app.js -o src/client/js/public/build.js -v\",\r\n        \"server\": \"nodemon src/server/entry.js\",\r\n        \"start\": \"npm-run-all --parallel watch server\",\r\n        \"build\": \"browserify src/client/js/app.js -o  src/client/js/public/build.js\",\r\n        \"lint\": \"echo 'Working directory: ' && pwd && echo '\\nPlease wait. Lint Checking...\\n' && ((npm run env-test && ./node_modules/.bin/eslint ./src/ && echo \\\" \\\\033[1;40;32m Linting Passed. \\\\033[m \\\" ) || ( (echo \\\"$(tput setaf 5)$(tput setab 0)linting check failed and aborted. Run 'npm run fix-lint' to attemp automatic fix \\\\033[m \\\" && exit 1)))\",\r\n        \"lint-compatibility-mode\": \"./node_modules/.bin/eslint ./src/\",\r\n        \"fix-lint\": \"npm run -s env-test; (echo 'Please wait. Linting...\\n' && ./node_modules/.bin/eslint ./src/ --fix) || (echo \\\" \\\\033[1;41;33m Auto Linting failed. Please manually fix the above errors. \\\\033[m \\\" && exit 1)\",\r\n        \"env-test\": \"if [ -d './src/' ]; then echo \\\" \\\\033[1;40;32m src directory detected! \\\\033[m \\\"; else echo \\\" \\\\033[1;41;33m \\n\\nCRITICAL: src directory NOT DETECTED\\nABORTING!!!\\n\\n \\\\033[m \\\" && exit 1; fi\",\r\n        \"precommit\": \"npm run -s lint && echo \\\"Running unit testing..\\\" && npm test\",\r\n        \"prepush\": \"npm run -s lint && echo 'Prepush build skipped' && npm test\",\r\n        \"docs\": \"esdoc\"\r\n    },\r\n    \"repository\": {\r\n        \"type\": \"git\",\r\n        \"url\": \"https://github.com/BananiumLabs/AtomBlast.io.git\"\r\n    },\r\n    \"keywords\": [\r\n        \"io\",\r\n        \"game\"\r\n    ],\r\n    \"author\": \"Bananium Labs\",\r\n    \"license\": \"MIT\",\r\n    \"contributors\": [\r\n        \"Ben Cuan <ben@bananiumlabs.com> (https://github.com/dbqeo)\",\r\n        \"Vikram Peddinti <vikram@bananiumlabs.com> (https://github.com/darkflamex1)\",\r\n        \"Eric Qian <eric@enumc.com> (https://github.com/EnumC)\"\r\n    ],\r\n    \"bugs\": {\r\n        \"url\": \"https://github.com/BananiumLabs/AtomBlast.io/issues\"\r\n    },\r\n    \"homepage\": \"https://github.com/BananiumLabs/AtomBlast.io#readme\",\r\n    \"dependencies\": {\r\n        \"babel-preset-env\": \"^1.7.0\",\r\n        \"babel-register\": \"^6.26.0\",\r\n        \"colors\": \"^1.2.4\",\r\n        \"express\": \"^4.13.0\",\r\n        \"pixi.js\": \"^4.8.1\",\r\n        \"socket.io\": \"^2.1.1\",\r\n        \"sweetalert\": \"^2.1.0\"\r\n    },\r\n    \"devDependencies\": {\r\n        \"babel-core\": \"^6.26.3\",\r\n        \"babel-preset-es2015\": \"^6.24.1\",\r\n        \"babelify\": \"^8.0.0\",\r\n        \"browserify\": \"^16.2.0\",\r\n        \"esdoc\": \"^1.1.0\",\r\n        \"esdoc-standard-plugin\": \"^1.0.0\",\r\n        \"eslint\": \"^5.1.0\",\r\n        \"husky\": \"^0.14.3\",\r\n        \"jest\": \"^23.4.1\",\r\n        \"nodemon\": \"^1.18.4\",\r\n        \"npm-run-all\": \"^4.1.2\",\r\n        \"npm-run-parallel\": \"^0.6.0\",\r\n        \"watchify\": \"^3.11.0\"\r\n    },\r\n    \"browserify\": {\r\n        \"transform\": [\r\n            [\r\n                \"babelify\",\r\n                {\r\n                    \"presets\": [\r\n                        \"es2015\"\r\n                    ]\r\n                }\r\n            ]\r\n        ]\r\n    }\r\n}\r\n",
    "longname": "C:\\Users\\BenCu\\Documents\\AtomBlast.io\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]