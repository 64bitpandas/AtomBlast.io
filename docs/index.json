[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/client/js/app.js",
    "content": "/**\n * App.js is responsible for connecting the UI with the game functionality.\n * Most of the functionality is used for the main menu and connecting/disconnecting behavior.\n */\n'use strict'\nimport { GLOBAL } from './global.js'\nimport * as cookies from './lib/cookies.js'\nimport { BLUEPRINTS } from './obj/blueprints.js'\nimport { beginConnection, disconnect, teamColors } from './socket.js'\nimport { player, setIngame, startGame, mouseUpHandler, mouseDownHandler } from './pixigame.js'\nimport swal from 'sweetalert'\nimport VirtualJoystick from './lib/mobilejoystick.js'\n\n// Array containing all inputs which require cookies, and their values\nexport const cookieInputs = GLOBAL.COOKIES.map(val => document.getElementById(val))\n\n// Array containing the four chosen blueprints\nexport var selectedBlueprints = new Array(GLOBAL.BP_MAX)\n\nconst nickErrorText = document.getElementById('nickErrorText')\n\n// Mouse position - used for tooltips\nexport let mouseX, mouseY\n\n// Currently selected blueprint slot\nexport let selectedCompound = 0\n\nlet selectedSlot\n\nexport let music\n\nexport let sfx\n\nlet errorSound = new Sound('assets/sfx/error.mp3')\n\nexport let joystick = new VirtualJoystick()\n\n// Starts the game if the name is valid.\nfunction joinGame() {\n\tif (!allBlueprintsSelected()) {\n\t\tswal('Blueprint(s) not selected', 'Make sure all your blueprint slots are filled before joining a game!', 'error')\n\t}\n\t// check if the nick is valid\n\telse if (validNick()) {\n\t\t// Set cookies for inputs\n\t\tfor (let i = 0; i < GLOBAL.INPUT_COUNT; i++) {\n\t\t\tcookies.setCookie(GLOBAL.COOKIES[i], cookieInputs[i].value, GLOBAL.COOKIE_DAYS)\n\t\t}\n\n\t\t// Use cookies to set the ingame blueprint slot values\n\t\tfor (let i = 1; i <= GLOBAL.BP_MAX; i++) {\n\t\t\tselectedBlueprints[i - 1] = BLUEPRINTS[cookies.getCookie(GLOBAL.COOKIES[i - 1 + GLOBAL.INPUT_COUNT])]\n\n\t\t\t// Check whether blueprint is selected!\n\t\t\tdocument.getElementById('bp-ingame-' + i).innerHTML = selectedBlueprints[i - 1].name + ' (' + getCompoundFormula(selectedBlueprints[i - 1]) + ')'\n\t\t}\n\n\t\t// Show game window\n\t\tshowElement('gameAreaWrapper')\n\t\thideElement('startMenuWrapper')\n\n\t\t// Show loading screen\n\t\tshowElement('loading')\n\n\t\t// Cookie Inputs: 0=player, 1=room, 2=team\n\n\t\t// Connect to server\n\t\tbeginConnection()\n\t}\n\telse {\n\t\tnickErrorText.style.display = 'inline'\n\t}\n}\n\n/** check if nick is valid alphanumeric characters (and underscores)\n * @returns true if the nickname is valid, false otherwise\n */\nfunction validNick() {\n\tconst regex = /^(\\w|_|-| |!|\\.|\\?){2,16}$/\n\tfor (let i = 0; i < GLOBAL.INPUT_COUNT; i++) {\n\t\tif (regex.exec(cookieInputs[i].value) === null && !(i === 1 && cookieInputs[7].value !== 'private')) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n/**\n * Returns true if all four blueprint slots are filled.\n */\nfunction allBlueprintsSelected() {\n\tfor (let i = GLOBAL.INPUT_COUNT - 1; i < GLOBAL.INPUT_COUNT + GLOBAL.BP_MAX; i++) {\n\t\tif (cookieInputs[i].innerHTML.substring(0, 1) === '-') {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n/**\n * Onload function. Initializes the menu screen, creates click events, and loads cookies.\n */\nwindow.onload = () => {\n\t// Patch logo for firefox\n\tif (typeof InstallTrigger !== 'undefined') { document.getElementById('logo').innerHTML = `<img src=\"assets/logos/logo.svg\" id=\"logo-firefox\">`; } // eslint-disable-line\n\n\t// Cookie loading - create array of all cookie values\n\tlet cookieValues = GLOBAL.COOKIES.map(val => cookies.getCookie(val))\n\n\t// Continue loading cookies only if it exists\n\tlet i = 0\n\tfor (let cookie of cookieValues) {\n\t\tif (cookie !== null && cookie.length > 0) {\n\t\t\tif (cookieInputs[i].tagName === 'INPUT' || cookieInputs[i].tagName === 'SELECT') {\n\t\t\t\tcookieInputs[i].value = cookie\n\t\t\t}\n\t\t\telse if (cookieInputs[i].tagName === 'BUTTON' && BLUEPRINTS[cookie] !== undefined) {\n\t\t\t\tcookieInputs[i].innerHTML = BLUEPRINTS[cookie].name\n\t\t\t}\n\t\t}\n\t\ti++\n\t}\n\n\t// Add listeners to start game to enter key and button click\n\n\tdocument.addEventListener('pointerdown', mouseUpHandler)\n\tdocument.addEventListener('pointerup', mouseDownHandler)\n\n\tbindHandler('startButton', function () {\n\t\tjoinGame()\n\t})\n\n\tbindHandler('quitButton', function () {\n\t\tquitGame('You have left the game.', false)\n\t})\n\n\tbindHandler('exitButton', function () {\n\t\tquitGame('The game has ended.', false)\n\t\thideElement('winner-panel')\n\t})\n\n\tbindHandler('resumeButton', function () {\n\t\thideElement('menubox')\n\t})\n\n\tbindHandler('optionsButton', function () {\n\t\terrorSound.play()\n\t\tswal('', 'This feature is not implemented.', 'info')\n\t})\n\n\tbindHandler('controlsButton', function () {\n\t\terrorSound.play()\n\t\tswal('', 'This feature is not implemented.', 'info')\n\t})\n\n\tbindHandler('creditsButton', function () {\n\t\tswal('', 'Created by BananiumLabs.com', 'info')\n\t})\n\n\tbindHandler('btn-start-game', function () {\n\t\tconsole.log('starting game')\n\t\tstartGame(true)\n\t})\n\n\tbindHandler('newsBox', function () {\n\t\tswal('', 'hello world', 'info')\n\t})\n\n\t// document.getElementById('gameView', onClick, false);\n\n\tfor (let i = 0; i < selectedBlueprints.length; i++) {\n\t\tbindHandler('bp-ingame-' + (i + 1), function () {\n\t\t\tselectedCompound = i\n\t\t\tupdateCompoundButtons()\n\t\t})\n\t}\n\n\t// Set up the blueprint slot buttons\n\tfor (let i = 1; i <= GLOBAL.BP_MAX; i++) {\n\t\tdocument.getElementById('bp-slot-' + i).onclick = () => {\n\t\t\tshowElement('bp-select')\n\t\t\tdocument.getElementById('bp-select-header').innerHTML = GLOBAL.BP_SELECT + i\n\t\t\tselectedSlot = i\n\t\t}\n\t}\n\n\tdocument.getElementById('btn-close').onclick = () => {\n\t\thideElement('bp-select')\n\t}\n\n\t// Set up blueprint selection buttons\n\tfor (let blueprint in BLUEPRINTS) {\n\t\tif (BLUEPRINTS[blueprint].unlocked) {\n\t\t\tlet bp = BLUEPRINTS[blueprint]\n\n\t\t\tdocument.getElementById('blueprint-wrapper').innerHTML +=\n\t\t\t\t`\n\t\t\t\t<button onmouseenter=\"tooltipFollow(this)\" class=\"button width-override col-6 col-12-sm btn-blueprint blueprint-${bp.type}\" id=\"btn-blueprint-${blueprint}\">\n\t\t\t\t\t<p>${bp.name}</p>\n\t\t\t\t\t<h6>-${getCompoundFormula(bp)} (${bp.type.charAt(0).toUpperCase() + bp.type.slice(1)})-</h6>\n\t\t\t\t\t<img src=\"${GLOBAL.COMPOUND_DIR + bp.texture}\">\n\t\t\t\t\t<span class=\"tooltip\">${bp.tooltip}</span>\n\t\t\t\t</button>\n\t\t\t\t`\n\t\t}\n\t}\n\t// Blueprint Slots\n\tfor (let btn of document.getElementsByClassName('btn-blueprint')) {\n\t\tbtn.onclick = () => {\n\t\t\tlet blueprint = btn.id.substring(14) // Name of the blueprint, the first 14 characters are 'btn-blueprint-'\n\t\t\tconsole.log(blueprint + ' selected in slot ' + selectedSlot)\n\t\t\tdocument.getElementById('bp-slot-' + selectedSlot).innerHTML = BLUEPRINTS[blueprint].name\n\t\t\thideElement('bp-select')\n\t\t\tcookies.setCookie(GLOBAL.COOKIES[selectedSlot + GLOBAL.INPUT_COUNT - 1], blueprint, GLOBAL.COOKIE_DAYS)\n\t\t}\n\t}\n\n\t// Add enter listeners for all inputs\n\tfor (let i = 0; i < GLOBAL.INPUT_COUNT; i++) {\n\t\tcookieInputs[i].addEventListener('keypress', e => {\n\t\t\tconst key = e.which || e.keyCode\n\n\t\t\tif (key === GLOBAL.KEY_ENTER) {\n\t\t\t\tjoinGame()\n\t\t\t}\n\t\t})\n\t}\n\n\t// Behavior when room type is changed\n\tif (cookieInputs[7].value !== 'private') {\n\t\thideElement('room')\n\t}\n\telse {\n\t\tshowElement('room')\n\t}\n\n\tcookieInputs[7].onchange = () => {\n\t\tif (cookieInputs[7].value === 'private') {\n\t\t\tshowElement('room')\n\t\t}\n\t\telse {\n\t\t\thideElement('room')\n\t\t}\n\n\t\tcookies.setCookie(GLOBAL.COOKIES[7], cookieInputs[7].value, GLOBAL.COOKIE_DAYS)\n\t}\n\n\t// Server changed\n\tcookieInputs[8].onchange = () => {\n\t\tcookies.setCookie(GLOBAL.COOKIES[8], cookieInputs[8].value, GLOBAL.COOKIE_DAYS)\n\t}\n\n\tdocument.getElementById('team-option').onchange = document.getElementById('solo').onchange = () => {\n\t\tconsole.log('change')\n\t\tif (document.querySelector('input[name=\"queue-type\"]:checked').id === 'team-option') {\n\t\t\tshowElement('team')\n\t\t}\n\t\telse {\n\t\t\thideElement('team')\n\t\t}\n\t}\n\n\tplayMusic()\n}\n\n/**\n * Sets mouse positions for tooltip\n */\nwindow.onmousemove = (e) => {\n\tmouseX = e.clientX\n\tmouseY = e.clientY\n}\n\n/**\n * Loop main menu music\n */\nfunction playMusic() {\n\tmusic = document.createElement('audio')\n\tHTMLElement.prototype.randomSelectMM = function () {\n\t\tmusic.src = GLOBAL.MAINMENU_MUSICLIST[Math.floor(Math.random() * GLOBAL.MAINMENU_MUSICLIST.length)]\n\t}\n\tmusic.randomSelectMM()\n\tmusic.style.display = 'none'\t// fix ios device\n\t// music.autoplay = true\n\tmusic.type = 'audio/mpeg'\n\tmusic.id = 'mainmenu'\n\n\tmusic.onended = function () {\n\t\tmusic.randomSelectMM()\n\t\tmusic.play()\n\t}\n\t// music.loop = true\n\t// audio.onended = function() {\n\t// \taudio.remove()\n\t// };\n\tdocument.body.appendChild(music)\n\tlet audioPlay = document.getElementById('mainmenu').play()\n\n\tif (audioPlay !== undefined) {\n\t\taudioPlay.then(_ => {\n\t\t\tconsole.log('Music started')\n\t\t}).catch(error => {\n\t\t\tconsole.warn(error)\n\t\t\tconsole.log('Music start prevented. Starting Bypass method.')\n\t\t\t// How this works is that the iframe with audio\n\t\t\tlet bypassElement = document.createElement('iframe')\n\t\t\tbypassElement.src = 'assets/sfx/silence.mp3'\n\t\t\tbypassElement.allow = 'autoplay'\n\t\t\tbypassElement.type = 'audio/mpeg'\n\t\t\tbypassElement.id = 'bypassaudio'\n\t\t\tdocument.body.appendChild(bypassElement)\n\t\t\tdocument.getElementById('bypassaudio').addEventListener('load', function () {\n\t\t\t\tdocument.getElementById('mainmenu').play()\n\t\t\t\tdocument.getElementById('bypassaudio').remove()\n\t\t\t})\n\t\t})\n\t}\n}\n\nfunction Sound(src) {\n\tthis.sound = document.createElement('audio')\n\tthis.sound.src = src\n\tthis.sound.setAttribute('preload', 'auto')\n\tthis.sound.setAttribute('controls', 'none')\n\tthis.sound.style.display = 'none'\n\tdocument.body.appendChild(this.sound)\n\tthis.play = function () {\n\t\tthis.sound.currentTime = 0\n\t\tthis.sound.play()\n\t}\n\tthis.stop = function () {\n\t\tthis.sound.pause()\n\t}\n}\n\n/**\n * Transitions from in-game displays to the main menu.\n * @param {string} msg The message to be displayed in the menu after disconnect.\n * @param {boolean} isError True if the game quit was due to an error; false otherwise.\n */\nexport function quitGame(msg, isError) {\n\t// Disconnect from server\n\tdisconnect()\n\n\t// Set status of ingame\n\tsetIngame(false)\n\n\t// menu\n\thideElement('gameAreaWrapper')\n\thideElement('hud')\n\thideElement('menubox')\n\tshowElement('startMenuWrapper')\n\thideElement('lobby')\n\tswal('Disconnected from Game', msg, (isError) ? 'error' : 'info')\n}\n\n/**\n * Binds handlerMethod to onclick event for element id.\n * @param {string} id\n * @param {function} handlerMethod\n */\nexport function bindHandler(id, handlerMethod) {\n\tdocument.getElementById(id).onclick = handlerMethod\n}\n\n/**\n * Displays a hidden element\n * @param {string} el The id of the element to show\n */\nexport function showElement(el) {\n\tdocument.getElementById(el).style.display = 'block'\n\tif (el === 'startMenuWrapper') {\n\t\tmusic.randomSelectMM()\n\t\tmusic.currentTime = 0\n\t\tmusic.play()\n\t}\n\telse if (el === 'lobby') {\t// In lobby\n\t\tmusic.pause()\t// Pause main menu music\n\t\t// music.currentTime = 9999\n\t}\n\telse if (el === 'gameAreaWrapper') {\t// In game\n\t\tmusic.pause()\t// Pause main menu music\n\t\t// music.currentTime = 9999\n\t}\n}\n\n/**\n * Hides a visible element\n * @param {string} el The id of the element to hide\n */\nexport function hideElement(el) {\n\tdocument.getElementById(el).style.display = 'none'\n}\n\n/**\n * Makes tooltip follow the mouse. Call when a button is hovered.\n * @param {HTMLElement} button The element reference for the button currently being hovered.\n */\nwindow.tooltipFollow = (button) => {\n\tlet tooltip = button.getElementsByClassName('tooltip')[0]\n\ttooltip.style.top = (mouseY - 150) + 'px'\n\ttooltip.style.left = (mouseX - 150) + 'px'\n}\n\n// Toggle compound stats and info tooltips\nlet compoundStats = false\n\nwindow.onkeydown = (e) => {\n\t// Only detect if the blueprint select screen is up\n\tif (document.getElementById('bp-select').style.display === 'block' && e.key === 'Shift') {\n\t\tcompoundStats = !compoundStats\n\t\t// Iterate through all compound buttons\n\t\tfor (let button of document.getElementsByClassName('btn-blueprint')) {\n\t\t\t// Get blueprint from BLUEPRINTS\n\t\t\tlet blueprint = Object.values(BLUEPRINTS).filter((obj) => {\n\t\t\t\treturn obj.name === button.getElementsByTagName('p')[0].innerHTML\n\t\t\t})\n\t\t\tblueprint = blueprint[0]\n\n\t\t\tif (compoundStats) {\n\t\t\t\tlet newTooltip = ''\n\t\t\t\tfor (let param in blueprint.params) {\n\t\t\t\t\tif (!GLOBAL.BP_TOOLTIP_BLACKLIST.includes(param)) {\n\t\t\t\t\t\tlet line = ('' + param).replace(/([A-Z])/g, ' $1').replace(/^./, (str) => {\n\t\t\t\t\t\t\treturn str.toUpperCase()\n\t\t\t\t\t\t}) + ': ' + blueprint.params[param] + '<br>'\n\t\t\t\t\t\tnewTooltip += line\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbutton.getElementsByClassName('tooltip')[0].innerHTML = newTooltip\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbutton.getElementsByClassName('tooltip')[0].innerHTML = blueprint.tooltip\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Updates the list of atoms that the player holds.\n * Only updates the entry for the particular ID given.\n * @param {string} atomID The ID of the atom to update.\n */\nexport function updateAtomList(atomID) {\n\tlet list = document.getElementById('atom-count')\n\n\tif (document.getElementById('atom-list-' + atomID) === null) {\n\t\tlet newEntry = document.createElement('li')\n\t\tnewEntry.setAttribute('id', 'atom-list-' + atomID)\n\t\tlist.appendChild(newEntry)\n\t}\n\n\ttry {\n\t\tdocument.getElementById('atom-list-' + atomID).innerHTML = '' + atomID.charAt(0).toUpperCase() + atomID.substr(1) + ': ' + player.atomList[atomID]\n\t}\n\tcatch (e) {\n\t\tconsole.warn('Atom ' + atomID + ' could not be updated on the list!')\n\t}\n\n\tupdateCompoundButtons() // No need to update selection\n}\n\n/**\n *\n * @param {number} selectedSlot The index of the selected slot. 0-3\n */\nexport function updateCompoundButtons(selectedSlot) {\n\tif (selectedSlot === undefined) {\n\t\tselectedSlot = selectedCompound\n\t}\n\telse {\n\t\tselectedCompound = parseInt(selectedSlot)\n\t}\n\n\tfor (let i = 0; i < selectedBlueprints.length; i++) {\n\t\tif (selectedCompound !== i) {\n\t\t\tif (canCraft(selectedBlueprints[i])) {\n\t\t\t\tdocument.getElementById('bp-ingame-' + (i + 1)).style.background = '#2ecc71'\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdocument.getElementById('bp-ingame-' + (i + 1)).style.background = '#C8C8C8'\n\t\t\t}\n\t\t}\n\t\telse { // is selected\n\t\t\tif (canCraft(selectedBlueprints[i])) {\n\t\t\t\tdocument.getElementById('bp-ingame-' + (i + 1)).style.background = '#003CA8'\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdocument.getElementById('bp-ingame-' + (i + 1)).style.background = '#3D66D1'\n\t\t\t}\n\t\t\tdocument.getElementById('bp-select-label').innerHTML = 'Selected Compound: ' + selectedBlueprints[i].name\n\t\t}\n\t}\n}\n\n/**\n * Updates the team scoreboard on screen.\n */\nexport function updateScores(teamSlot, increment) {\n\tdocument.getElementById('team-score-' + teamSlot).innerHTML = parseInt(document.getElementById('team-score-' + teamSlot).innerHTML) + increment\n}\n\n/**\n * Run on new player join to sync lobby information\n * @param {*} data The data transferred from server\n */\nexport function updateLobby(data) {\n\t// Wipe innerHTML first\n\tlet lobby = document.getElementById('team-display')\n\tlobby.innerHTML = ''\n\tfor (let player in data.players) {\n\t\tif (document.getElementById(data.players[player].team) === null || document.getElementById(data.players[player].team) === undefined) {\n\t\t\tlobby.innerHTML += `\n            <div class=\"col-3\">\n                <h3 style=\"color: #${GLOBAL.TEAM_COLORS[teamColors[data.players[player].team]]}\">` + data.players[player].team + `</h3>\n                <ul id=\"` + data.players[player].team + `\">\n                </ul>\n            </div>\n            `\n\t\t}\n\t\tlet listItem = document.createElement('LI')\n\t\tlistItem.appendChild(document.createTextNode(data.players[player].name))\n\t\tdocument.getElementById(data.players[player].team).appendChild(listItem)\n\t}\n\n\t// Check if room is startable\n\tif (data.canStart) {\n\t\tdocument.getElementById('btn-start-game').innerHTML = 'Start Game'\n\t\tdocument.getElementById('btn-start-game').disabled = false\n\t}\n\telse {\n\t\tdocument.getElementById('btn-start-game').innerHTML = 'Waiting for Players...'\n\t\tdocument.getElementById('btn-start-game').disabled = true\n\t}\n}\n\n/**\n * Displays the winner panel after a game has concluded.\n * @param {*} data Server sent data, including name and score of winning team.\n */\nexport function displayWinner(data) {\n\t// console.log(data);\n\tdocument.getElementById('winner-name').innerHTML = data.winner.name + ' has won!'\n\tshowElement('winner-panel')\n}\n\n/**\n * Gets the formatted formula of a compound (e.g. C6H12O6).\n * @param {*} blueprint The blueprint object as defined in blueprints.js\n * @returns {string} The formula of the compound\n */\nfunction getCompoundFormula(blueprint) {\n\tlet formula = ''\n\tfor (let atom in blueprint.atoms) {\n\t\tformula += atom.toUpperCase() + ((blueprint.atoms[atom] > 1) ? blueprint.atoms[atom] : '')\n\t}\n\n\treturn formula\n}\n\n/**\n * Returns true if the player has the materials necessary to create a particular blueprint.\n * ONLY USE FOR BUTTON GRAPHICS!!! True checking is done serverside.\n * @param {string} blueprint The name of the blueprint to check.\n */\nfunction canCraft(blueprint) {\n\tif (blueprint === undefined) {\n\t\treturn false\n\t}\n\tfor (let atom in blueprint.atoms) {\n\t\tif (player.atomList[atom] === undefined || player.atomList[atom] < blueprint.atoms[atom]) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n// Anti debugger on non-debug builds\nif (!GLOBAL.DEBUG) {\n\tconsole.log = function () {\n\t\tconsole.info('Log disabled. Non-Debug build.')\n\t}\n\t// while (true) {\n\t// \tsetTimeout(function () {\n\t// \t\teval('debugger')\n\t// \t}, 200)\n\t// }\n\tsetInterval(function () {\n\t\tvar startTime = performance.now(); var check; var diff\n\t\tfor (check = 0; check < 1000; check++) {\n\t\t\tconsole.log(check)\n\t\t\tconsole.clear()\n\t\t}\n\t\tdiff = performance.now() - startTime\n\t\tif (diff > 200) {\n\t\t\t// window.close()\n\t\t\t//   alert('Debugger detected!')\n\n\t\t\tdocument.body.innerHTML = '<h1 style=\"color:red\">A critical error has been detected. Please contact the developer with the following information.<br>Error: Production build sec violation.</b></h1>'\n\t\t\terrorSound.play()\n\t\t\tlet counter = 0\n\t\t\tsetTimeout(function () {\n\t\t\t\tdocument.body.innerHTML = '<div style=\"--a:1px;--b:calc(var(--a) + var(--a));--c:calc(var(--b) + var(--b));--d:calc(var(--c) + var(--c));--e:calc(var(--d) + var(--d));--f:calc(var(--e) + var(--e));--g:calc(var(--f) + var(--f));--h:calc(var(--g) + var(--g));--i:calc(var(--h) + var(--h));--j:calc(var(--i) + var(--i));--k:calc(var(--j) + var(--j));--l:calc(var(--k) + var(--k));--m:calc(var(--l) + var(--l));--n:calc(var(--m) + var(--m));--o:calc(var(--n) + var(--n));--p:calc(var(--o) + var(--o));--q:calc(var(--p) + var(--p));--r:calc(var(--q) + var(--q));--s:calc(var(--r) + var(--r));--t:calc(var(--s) + var(--s));--u:calc(var(--t) + var(--t));--v:calc(var(--u) + var(--u));--w:calc(var(--v) + var(--v));--x:calc(var(--w) + var(--w));--y:calc(var(--x) + var(--x));--z:calc(var(--y) + var(--y));--vf:calc(var(--z) + 1px);border-width:var(--vf);border-style:solid;\">error</div>'\n\t\t\t\tdocument.body.style.cssText = null\n\t\t\t\tlet buffer = 'nohax'\n\t\t\t\twhile (true) {\n\t\t\t\t\tbuffer = buffer += buffer\n\t\t\t\t\t// for (;;);\n\t\t\t\t\tif (counter % 10 === 0) {\n\t\t\t\t\t\tdebugger\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 100)\n\t\t}\n\t}, 500)\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "cookieInputs",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~cookieInputs",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{cookieInputs}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "selectedBlueprints",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~selectedBlueprints",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{selectedBlueprints}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "nickErrorText",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~nickErrorText",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "selectedCompound",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~selectedCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{selectedCompound}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "errorSound",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~errorSound",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "joystick",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~joystick",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{joystick}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "src/client/js/lib/mobilejoystick.js~VirtualJoystick"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "joinGame",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~joinGame",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 56,
    "kind": "function",
    "name": "validNick",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~validNick",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "check if nick is valid alphanumeric characters (and underscores)",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "true if the nickname is valid, false otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if the nickname is valid, false otherwise"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 57,
    "kind": "function",
    "name": "allBlueprintsSelected",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~allBlueprintsSelected",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "Returns true if all four blueprint slots are filled.",
    "lineNumber": 92,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "playMusic",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~playMusic",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "Loop main menu music",
    "lineNumber": 278,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 59,
    "kind": "function",
    "name": "Sound",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~Sound",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "quitGame",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~quitGame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{quitGame}",
    "description": "Transitions from in-game displays to the main menu.",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "msg",
        "description": "The message to be displayed in the menu after disconnect."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isError",
        "description": "True if the game quit was due to an error; false otherwise."
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "function",
    "name": "bindHandler",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~bindHandler",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{bindHandler}",
    "description": "Binds handlerMethod to onclick event for element id.",
    "lineNumber": 363,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "handlerMethod",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "showElement",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~showElement",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{showElement}",
    "description": "Displays a hidden element",
    "lineNumber": 371,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The id of the element to show"
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "function",
    "name": "hideElement",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~hideElement",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{hideElement}",
    "description": "Hides a visible element",
    "lineNumber": 392,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "el",
        "description": "The id of the element to hide"
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "compoundStats",
    "memberof": "src/client/js/app.js",
    "static": true,
    "longname": "src/client/js/app.js~compoundStats",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 407,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "function",
    "name": "updateAtomList",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateAtomList",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateAtomList}",
    "description": "Updates the list of atoms that the player holds.\nOnly updates the entry for the particular ID given.",
    "lineNumber": 445,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "atomID",
        "description": "The ID of the atom to update."
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "updateCompoundButtons",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateCompoundButtons",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateCompoundButtons}",
    "description": "",
    "lineNumber": 468,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedSlot",
        "description": "The index of the selected slot. 0-3"
      }
    ],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "function",
    "name": "updateScores",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateScores",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateScores}",
    "description": "Updates the team scoreboard on screen.",
    "lineNumber": 500,
    "params": [
      {
        "name": "teamSlot",
        "types": [
          "*"
        ]
      },
      {
        "name": "increment",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "updateLobby",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~updateLobby",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{updateLobby}",
    "description": "Run on new player join to sync lobby information",
    "lineNumber": 508,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data transferred from server"
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "function",
    "name": "displayWinner",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~displayWinner",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": "{displayWinner}",
    "description": "Displays the winner panel after a game has concluded.",
    "lineNumber": 542,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Server sent data, including name and score of winning team."
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "getCompoundFormula",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~getCompoundFormula",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "Gets the formatted formula of a compound (e.g. C6H12O6).",
    "lineNumber": 553,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The formula of the compound"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blueprint",
        "description": "The blueprint object as defined in blueprints.js"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The formula of the compound"
    },
    "ignore": true
  },
  {
    "__docId__": 71,
    "kind": "function",
    "name": "canCraft",
    "memberof": "src/client/js/app.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/app.js~canCraft",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/app.js",
    "importStyle": null,
    "description": "Returns true if the player has the materials necessary to create a particular blueprint.\nONLY USE FOR BUTTON GRAPHICS!!! True checking is done serverside.",
    "lineNumber": 567,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "blueprint",
        "description": "The name of the blueprint to check."
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "src/client/js/app.test.js",
    "content": "test('Placeholder test', () => {\n\texpect()\n})\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/app.test.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/client/js/global.js",
    "content": "import { MAP_LAYOUT } from './obj/tiles'\n\n// Contains all global constants and functions for both the client and server.\nexport const GLOBAL = {\n\n\tDEBUG: true, // REMEMBER to toggle this lmao if you dont want your entire pc crashing\n\tVERBOSE_SOCKET: false, // true = debug clientside socket -> log if any socket method has been called\n\t// Keys and other mathematical constants\n\tKEY_ESC: 27,\n\tKEY_ENTER: 13,\n\tKEY_W: 87,\n\tKEY_A: 65,\n\tKEY_S: 83,\n\tKEY_D: 68,\n\tKEY_1: 49,\n\tKEY_2: 50,\n\tKEY_3: 51,\n\tKEY_4: 52,\n\tKEY_SPACE: 32,\n\n\t// Blueprints\n\tBP_SELECT: 'Blueprint Select - Slot ', // Text for blueprint select header\n\tBP_MAX: 4, // Maximum number of blueprints a player can have in one game at a time\n\t// Params that will not display on tooltip\n\tBP_TOOLTIP_BLACKLIST: [\n\t\t'evaporate',\n\t\t'splashImage'\n\t],\n\n\t// Main menu\n\tINPUT_COUNT: 3, // Number of input boxes on main menu\n\n\t// Chat\n\tPLACEHOLDER_NAME: 'Unnamed Player',\n\tMAX_CHATS: 50, // Max number of chats to be displayed before deleting\n\n\t// Server\n\tSERVER_IP: 'atomblast.bananiumlabs.com:12002', // Change during production!!!!!\n\tLOCAL_HOST: 'localhost:12002',\n\tTEST_IP: 'https://iogame-test.herokuapp.com/',\n\tNO_ROOM_IDENTIFIER: '$_NOROOM', // Pass to server if matchmaking is required\n\tNO_TEAM_IDENTIFIER: '$_NOTEAM', // Pass to server if matchmaking is required\n\tROOM_DELETE_DELAY: 30000, // Time, in ms, between winning and room closing\n\n\t// Cookies\n\tCOOKIES: [\n\t\t'name', // 0\n\t\t'room', // 1\n\t\t'team', // 2\n\t\t'bp-slot-1', // 3\n\t\t'bp-slot-2', // 4\n\t\t'bp-slot-3', // 5\n\t\t'bp-slot-4', // 6\n\t\t'room-type', // 7\n\t\t'server' // 8\n\t],\n\tCOOKIE_DAYS: 14, // Cookie lifetime\n\n\t// Player Movement\n\tMAX_SPEED: 6,\n\tPLAYER_RADIUS: 100,\n\tVELOCITY_STEP: 0.85, // speed multiplier when player is gliding to a stop\n\tLERP_VALUE: 0.2,\n\tDEADZONE: 0.1,\n\tMAX_HEALTH: 100, // Starting health of players\n\tPLAYER_ROTATION: 0.05,\n\tPLAYER_EXPEDITED_ROTATION: 0.1,\n\n\t// Atoms\n\tATOM_RADIUS: 30, // size of spawned atoms\n\tMIN_POWERUPS: 150, // minimum number of powerups to be spawned (TEMPORARY)\n\tMAX_POWERUPS: 300, // maximum number of powerups to be spawned (TEMPORARY)\n\tATTRACTION_RADIUS: 150, // Max distance for powerup to be attracted to player\n\tATTRACTION_COEFFICIENT: 100, // Multiplier for attraction strength\n\tATOM_SPAWN_SPEED: 15, // Speed that atom travels away from spawner\n\tATOM_SPAWN_DELAY: 5000, // Atom spawn delay, in milliseconds\n\tATOM_COLLECT_THRESHOLD: 100, // Distance away from center of player that the atom must be before being collected\n\n\t// Map and Tiles\n\tMAP_SIZE: 2000,\n\tSPAWN_POINTS: [\n\t\t{ x: 0, y: 0 },\n\t\t{ x: 6, y: 6 },\n\t\t{ x: 0, y: 6 },\n\t\t{ x: 6, y: 0 }\n\t], // Spawn points for different teams\n\tMAX_SPAWNER_HEALTH: 100,\n\tMAX_STRONGHOLD_HEALTH: 200,\n\tMAX_NUCLEUS_HEALTH: 300,\n\tSTRONGHOLD_RADIUS: 100,\n\n\t// Drawing\n\tDRAW_RADIUS: 1000, // Radius around player in which to draw other objects\n\tGRID_SPACING: 200, // space between each line on the grid\n\tGRID_LINE_STROKE: 1,\n\tFRAME_RATE: 60,\n\n\t// Colors\n\tTEAM_COLORS: [ // Purple, Green, Orange, Red. No prefixes\n\t\t'673ab7',\n\t\t'2e7d32',\n\t\t'ff8f00',\n\t\t'f44336'\n\t],\n\n\tIGNITE_SPRITE: 'placeholder_ignited.png',\n\n\t// Atoms: ID's and Sprites. ATOM_SPRITES[id] returns the texture location of atom of that id.\n\tATOM_IDS: [\n\t\t'h',\n\t\t'he',\n\t\t'c',\n\t\t'cl',\n\t\t'n',\n\t\t'o'\n\t],\n\tATOM_SPRITES: [\n\t\t'atom_hydrogen.png',\n\t\t'atom_helium.png',\n\t\t'atom_carbon.png',\n\t\t'testplayer2.png',\n\t\t'atom_nitrogen.png',\n\t\t'atom_oxygen.png'\n\t],\n\n\t// Location of spritesheet relative to pixigame\n\tSPRITESHEET_DIR: '../assets/spritesheet.json',\n\n\t// Used for main menu textures\n\tCOMPOUND_DIR: '../assets/spritesheet/compounds/',\n\n\t// Each Value corresponds with the above event\n\tEXPERIENCE_VALUES: {\n\t\tCRAFT: 10,\n\t\tKILL: 124\n\t},\n\n\t// The cutoffs for each level. Index 0 = level 1, 1 = level 2, etc\n\tEXPERIENCE_LEVELS: [\n\t\t0,\n\t\t10,\n\t\t20,\n\t\t40,\n\t\t100,\n\t\t140,\n\t\t160\n\t],\n\tMAINMENU_MUSICLIST: [\n\t\t'assets/sfx/mainmenu/placeholder1.mp3',\n\t\t'assets/sfx/mainmenu/placeholder2.mp3',\n\t\t'assets/sfx/mainmenu/placeholder3.mp3',\n\t\t'assets/sfx/mainmenu/placeholder4.mp3'\n\t],\n\tLOBBY_MUSICLIST: [\n\n\t],\n\tINGAME_MUSICLIST: [\n\n\t],\n\n\t// Deaths\n\tKILL_SCORE: 6, // How many points are awarded to the player/team who dealt the most damage to the player\n\tASSIST_SCORE: 2, // How many points are awarded to all players who assist in killing the player\n\tWINNING_SCORE: 20, // How many points are required to win the game per team. TODO increase\n\tCAPTURE_SCORE: 5, // How many points are awarded to the team who captured a stronghold/vent\n\tMAX_DEATH_ATOMS: 100 // How many atoms of each type can be ejected on death at maximum. Prevents testers from ejecting thousands of atoms at a time.\n}\n\n/**\n * Returns the distance between two objects.\n * Both objects must be GameObjects\n * @param {GameObject} obj1 First object\n * @param {GameObject} obj2 Second object\n */\nexport function distanceBetween (obj1, obj2) {\n\treturn Math.sqrt(Math.pow(obj1.posX - obj2.posX, 2) + Math.pow(obj1.posY - obj2.posY, 2))\n}\n\n/**\n * Returns true if the object parameter is within the map boundaries.\n * @param {GameObject} obj The object to test\n * @return true if the object parameter is within the map boundaries\n */\nexport function isInBounds (obj) {\n\treturn obj.posX > 0 && obj.posY > -GLOBAL.GRID_SPACING * 2 && obj.posX < MAP_LAYOUT[0].length * GLOBAL.GRID_SPACING * 2 && obj.posY < (MAP_LAYOUT.length - 1) * GLOBAL.GRID_SPACING * 2\n}\n\n/**\n * Gets the tile directly underneath any object.\n * @param {*} obj Any valid GameObject.\n * @returns {string} one-letter ID of current tile.\n */\nexport function getCurrTile (obj) {\n\tlet pos = getGlobalLocation(obj)\n\n\ttry {\n\t\treturn MAP_LAYOUT[pos.globalY][pos.globalX]\n\t}\n\tcatch (error) {\n\t\treturn 'E'\n\t}\n}\n\n/**\n * Gets the coordinates of the tile directly underneath the object.\n * @param {*} obj Any valid GameObject.\n */\nexport function getGlobalLocation (obj) {\n\treturn {\n\t\tglobalY: Math.floor(obj.posY / (GLOBAL.GRID_SPACING * 2)) + 1,\n\t\tglobalX: Math.floor(obj.posX / (GLOBAL.GRID_SPACING * 2))\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/global.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "GLOBAL",
    "memberof": "src/client/js/global.js",
    "static": true,
    "longname": "src/client/js/global.js~GLOBAL",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{GLOBAL}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"DEBUG\": boolean, \"VERBOSE_SOCKET\": *, \"KEY_ESC\": number, \"KEY_ENTER\": number, \"KEY_W\": number, \"KEY_A\": number, \"KEY_S\": number, \"KEY_D\": number, \"KEY_1\": number, \"KEY_2\": number, \"KEY_3\": number, \"KEY_4\": number, \"KEY_SPACE\": number, \"BP_SELECT\": string, \"BP_MAX\": number, \"BP_TOOLTIP_BLACKLIST\": *, \"INPUT_COUNT\": number, \"PLACEHOLDER_NAME\": string, \"MAX_CHATS\": number, \"SERVER_IP\": string, \"LOCAL_HOST\": string, \"TEST_IP\": string, \"NO_ROOM_IDENTIFIER\": string, \"NO_TEAM_IDENTIFIER\": string, \"ROOM_DELETE_DELAY\": number, \"COOKIES\": *, \"COOKIE_DAYS\": number, \"MAX_SPEED\": number, \"PLAYER_RADIUS\": number, \"VELOCITY_STEP\": number, \"LERP_VALUE\": number, \"DEADZONE\": number, \"MAX_HEALTH\": number, \"PLAYER_ROTATION\": number, \"PLAYER_EXPEDITED_ROTATION\": number, \"ATOM_RADIUS\": number, \"MIN_POWERUPS\": number, \"MAX_POWERUPS\": number, \"ATTRACTION_RADIUS\": number, \"ATTRACTION_COEFFICIENT\": number, \"ATOM_SPAWN_SPEED\": number, \"ATOM_SPAWN_DELAY\": number, \"ATOM_COLLECT_THRESHOLD\": number, \"MAP_SIZE\": number, \"SPAWN_POINTS\": *, \"MAX_SPAWNER_HEALTH\": number, \"MAX_STRONGHOLD_HEALTH\": number, \"MAX_NUCLEUS_HEALTH\": number, \"STRONGHOLD_RADIUS\": number, \"DRAW_RADIUS\": number, \"GRID_SPACING\": number, \"GRID_LINE_STROKE\": number, \"FRAME_RATE\": number, \"TEAM_COLORS\": *, \"IGNITE_SPRITE\": string, \"ATOM_IDS\": *, \"ATOM_SPRITES\": *, \"SPRITESHEET_DIR\": string, \"COMPOUND_DIR\": string, \"EXPERIENCE_VALUES\": *, \"EXPERIENCE_LEVELS\": *, \"MAINMENU_MUSICLIST\": *, \"LOBBY_MUSICLIST\": *, \"INGAME_MUSICLIST\": *, \"KILL_SCORE\": number, \"ASSIST_SCORE\": number, \"WINNING_SCORE\": number, \"CAPTURE_SCORE\": number, \"MAX_DEATH_ATOMS\": number}"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "function",
    "name": "distanceBetween",
    "memberof": "src/client/js/global.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/global.js~distanceBetween",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{distanceBetween}",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "obj1",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "isInBounds",
    "memberof": "src/client/js/global.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/global.js~isInBounds",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{isInBounds}",
    "description": "Returns true if the object parameter is within the map boundaries.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "GameObject"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "The object to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if the object parameter is within the map boundaries"
    }
  },
  {
    "__docId__": 77,
    "kind": "function",
    "name": "getCurrTile",
    "memberof": "src/client/js/global.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/global.js~getCurrTile",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{getCurrTile}",
    "description": "Gets the tile directly underneath any object.",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} one-letter ID of current tile."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Any valid GameObject."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "one-letter ID of current tile."
    }
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "getGlobalLocation",
    "memberof": "src/client/js/global.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/global.js~getGlobalLocation",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/global.js",
    "importStyle": "{getGlobalLocation}",
    "description": "Gets the coordinates of the tile directly underneath the object.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Any valid GameObject."
      }
    ],
    "return": {
      "types": [
        "{\"globalY\": *, \"globalX\": *}"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/client/js/lib/chat-client.js",
    "content": "/** \n * Client-side chat window connection, adapted for use from agario-clone (https://github.com/huytd/agar.io-clone/) by Ben Cuan\n * Created 17 April 2018\n */\n\nimport {GLOBAL} from '../global.js';\nimport { socket, teamColors } from '../socket.js';\nimport { updateCompoundButtons } from '../app.js';\n\nlet player, room, team;\nexport default class ChatClient {\n\n    // Use this constructor during init to connect ChatClient to the server\n    constructor(params) {\n        // this.canvas = params.canvas;\n        // this.mobile = params.mobile;\n        this.player = params.player;\n        this.team = params.team;\n        const self = this;\n        this.commands = {};\n        this.commandPrefix = \"-\";\n        let input = document.getElementById('chatInput');\n        input.addEventListener('keypress', key => {this.sendChat(key);}); //This works WTF\n        input.addEventListener('keyup', key => {\n            input = document.getElementById('chatInput');\n            key = key.which || key.keyCode;\n            if (key === global.KEY_ESC) {\n                input.value = '';\n                // self.canvas.cv.focus();\n            }\n        });\n    }\n\n    /** \n    * Defines all commands and their behaviors.\n    */\n    registerFunctions() {\n        const self = this;\n\n        this.registerCommand('help', 'Information about the chat commands.', () => {\n            self.printHelp();\n        });\n\n        this.registerCommand('test', 'Gives 5000 of every element', () => {\n            if(GLOBAL.DEBUG) {\n                socket.emit('testCommand', {player: socket.id});\n                updateCompoundButtons();\n                self.addSystemLine(\"Developer Configurations Applied!\");\n            }\n            else {\n                self.addSystemLine(\"Invalid Permission.\");\n            }\n        });\n        this.registerCommand('damage', 'Damages you by the given amount.', (params) => {\n            console.log(params);\n            if(GLOBAL.DEBUG) {\n                if(params[0] !== undefined && typeof parseInt(params[0]) === 'number') {\n                    socket.emit('damage', {damage: parseInt(params[0]), sender: socket.id, player: socket.id});\n                    self.addSystemLine(\"Damaged player by \" + params[0] + \" health points\");\n                }\n                else\n                    self.addSystemLine(\"Invalid parameter. Parameter must be of type number\");\n            }\n            else {\n                self.addSystemLine(\"Invalid Permission.\");\n            }\n        });\n\n        // this.registerCommand('login', 'Login as an admin.', function (args) {\n        //     self.socket.emit('pass', args);\n        // });\n\n        // this.registerCommand('kick', 'Kick a player, for admins only.', function (args) {\n        //     self.socket.emit('kick', args);\n        // });\n        global.chatClient = this;\n    }\n\n    /**\n     * Places the message DOM node into the chat box.\n     * @param {string} innerHTML The message to be displayed.\n     * @param {string} color How the message should be styled - see `main.css` for styles and to create more styles.\n     */\n    appendMessage(innerHTML, color) {\n        if (this.mobile)\n            return;\n\n        const newline = document.createElement('li');\n\n        // Colours the chat input correctly.\n        newline.style.color = color;\n        // Add content\n        newline.innerHTML = innerHTML;\n\n        const chatList = document.getElementById('chatList');\n        // Remove old chats\n        if (chatList.childNodes.length > GLOBAL.MAX_CHATS) {\n            chatList.removeChild(chatList.childNodes[0]);\n        }\n        chatList.appendChild(newline);\n        //Scroll to view new chat\n        chatList.scrollTop += 100;\n    }\n\n    /**\n     * Chat box implementation for the users.\n     * @param {string} name Name of the player who sent the message\n     * @param {string} message Message that was sent\n     * @param {boolean} me True if the sender matches the receiver\n     * @param {string} sendingTeam The name of the team that sent this message\n     */\n    addChatLine(name, message, me, sendingTeam) {\n       this.appendMessage(\n           `<b style=\"color: ${'#' + GLOBAL.TEAM_COLORS[teamColors[sendingTeam]]}\">${(name.length < 1) ? GLOBAL.PLACEHOLDER_NAME : name} ${(me) ? '(YOU)' : ''}</b>: ${message}`,\n           '#' + GLOBAL.TEAM_COLORS[teamColors[sendingTeam]]\n        );\n    }\n\n    /**\n     * Chat box implementation for event announcements (capturing, etc)\n     * @param {string} message What message was sent\n     * @param {string} sendingTeam Subject of the message.\n     */\n    addChatAnnouncement(message, sendingTeam) {\n       this.appendMessage(\n           message, '#' + GLOBAL.TEAM_COLORS[teamColors[sendingTeam]]\n        );\n    }\n\n    /**\n     * \n     */\n\n\n    /**\n     * Chat box implementation for the users.\n     * @param {string} name Name of the player who sent the message\n     * @param {string} message Message that was sent\n     * @param {boolean} me True if the sender matches the receiver\n     */\n    addPrivateMessage(name, message, me) {\n       this.appendMessage(\n           `<b>${(name.length < 1) ? GLOBAL.PLACEHOLDER_NAME : name}</b>: ${message}`,\n           (me) ? 'me' : 'friend'\n        );\n    }\n\n    // Message to notify players when a new player joins\n    addLoginMessage(name, me) {\n        console.log(`${name} joined`);\n       \n        this.appendMessage(\n            `<b>${(me) ? '</b>You have' : (name.length < 1) ? GLOBAL.PLACEHOLDER_NAME : name + '</b> has'} joined the room!`,\n            'join'\n        );\n    }\n\n    // Chat box implementation for the system.\n    addSystemLine(message) {\n        this.appendMessage(\n            message,\n            'system'\n        );\n    }\n\n    // Places the message DOM node into the chat box.\n    // appendMessage(node) {\n    //     if (this.mobile) {\n    //         return;\n    //     }\n        // const chatList = document.getElementById('chatList');\n        // // if (chatList.childNodes.length > 10) {\n        // //     chatList.removeChild(chatList.childNodes[0]);\n        // // }\n        // chatList.appendChild(node);\n    // }\n\n    // Sends a message or executes a command on the click of enter.\n    sendChat(key) {\n        const commands = this.commands;\n        const input = document.getElementById('chatInput');\n\n        key = key.which || key.keyCode;\n\n        if (key === GLOBAL.KEY_ENTER) {\n            const text = input.value.replace(/(<([^>]+)>)/ig, '');\n            if (text !== '') {\n\n                // Chat command.\n                if (text.indexOf(this.commandPrefix) === 0) {\n                    const args = text.substring(1).split(' ');\n                    if (commands[args[0]]) {\n                        commands[args[0]].callback(args.slice(1));\n                    } else {\n                        this.addSystemLine(`Unrecognized Command: ${text}, type -help for more info.`);\n                    }\n\n                    // Allows for regular messages to be sent to the server.\n                } else {\n                    //Debug lines for messages - Remove on production\n                    // console.log(\"This Player: \" + this.player);\n                    // console.log(\"This message: \" + text);\n                    socket.emit('playerChat', { sender: this.player, message: text, sendingTeam: this.team});\n                    this.addChatLine(this.player, text, true, this.team);\n                }\n\n                // Resets input.\n                input.value = '';\n                // this.canvas.cv.focus();\n            }\n        }\n    }\n\n    // Allows for addition of commands.\n    registerCommand(name, description, callback) {\n        this.commands[name] = {\n            description,\n            callback\n        };\n    }\n\n    // Allows help to print the list of all the commands and their descriptions.\n    printHelp() {\n        const commands = this.commands;\n        for (const cmd in commands) {\n            if (commands.hasOwnProperty(cmd)) {\n                this.addSystemLine(`-${cmd}: ${commands[cmd].description}`);\n            }\n        }\n    }\n}",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/lib/chat-client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "class",
    "name": "ChatClient",
    "memberof": "src/client/js/lib/chat-client.js",
    "static": true,
    "longname": "src/client/js/lib/chat-client.js~ChatClient",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/chat-client.js",
    "importStyle": "ChatClient",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 81,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "player",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#player",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "team",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#team",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "commands",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#commands",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "commandPrefix",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#commandPrefix",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "registerFunctions",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#registerFunctions",
    "access": "public",
    "description": "Defines all commands and their behaviors.",
    "lineNumber": 37,
    "params": [],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "appendMessage",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#appendMessage",
    "access": "public",
    "description": "Places the message DOM node into the chat box.",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "innerHTML",
        "description": "The message to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "How the message should be styled - see `main.css` for styles and to create more styles."
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "addChatLine",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addChatLine",
    "access": "public",
    "description": "Chat box implementation for the users.",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the player who sent the message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message that was sent"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "True if the sender matches the receiver"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sendingTeam",
        "description": "The name of the team that sent this message"
      }
    ],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "addChatAnnouncement",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addChatAnnouncement",
    "access": "public",
    "description": "Chat box implementation for event announcements (capturing, etc)",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "What message was sent"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sendingTeam",
        "description": "Subject of the message."
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "addPrivateMessage",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addPrivateMessage",
    "access": "public",
    "description": "Chat box implementation for the users.",
    "lineNumber": 141,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the player who sent the message"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "Message that was sent"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "me",
        "description": "True if the sender matches the receiver"
      }
    ],
    "return": null
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "addLoginMessage",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addLoginMessage",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "me",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "addSystemLine",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#addSystemLine",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "sendChat",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#sendChat",
    "access": "public",
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "registerCommand",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#registerCommand",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "description",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "printHelp",
    "memberof": "src/client/js/lib/chat-client.js~ChatClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/chat-client.js~ChatClient#printHelp",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/client/js/lib/cookies.js",
    "content": "/**\n * Cookies.js was adopted from a StackOverflow answer \n * (https://stackoverflow.com/questions/14573223/set-cookie-and-get-cookie-with-javascript).\n */\n\n/**\n * Sets the value of a cookie.\n * @param {string} name Name of cookie\n * @param {string} value New value of cookie\n * @param {number} days Number of days this cookie will last for\n */\nexport function setCookie(name, value, days) {\n    let expires = \"\";\n    if (days) {\n        const date = new Date();\n        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));\n        expires = `; expires=${date.toUTCString()}`;\n    }\n    document.cookie = `${name}=${value || \"\"}${expires}; path=/`;\n}\n\n/**\n * Sets the value of a cookie.\n * @param {string} name Name of cookie\n * @return {string} The value of the cookie. Returns null if the cookie is not found.\n */\nexport function getCookie(name) {\n    const nameEQ = `${name}=`;\n    const ca = document.cookie.split(';');\n\n    for (let c of ca) {\n        while (c.charAt(0) == ' ') c = c.substring(1, c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n    }\n\n    return null;\n}\n\n/**\n * Removes the given cookie.\n * @param {string} name The name of the cookie to erase.\n */\nexport function eraseCookie(name) {\n    document.cookie = `${name}=; Max-Age=-99999999;`;\n}",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/lib/cookies.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "function",
    "name": "setCookie",
    "memberof": "src/client/js/lib/cookies.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/cookies.js~setCookie",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/cookies.js",
    "importStyle": "{setCookie}",
    "description": "Sets the value of a cookie.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of cookie"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "New value of cookie"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "days",
        "description": "Number of days this cookie will last for"
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "getCookie",
    "memberof": "src/client/js/lib/cookies.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/cookies.js~getCookie",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/cookies.js",
    "importStyle": "{getCookie}",
    "description": "Sets the value of a cookie.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of cookie"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The value of the cookie. Returns null if the cookie is not found."
    }
  },
  {
    "__docId__": 99,
    "kind": "function",
    "name": "eraseCookie",
    "memberof": "src/client/js/lib/cookies.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/cookies.js~eraseCookie",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/cookies.js",
    "importStyle": "{eraseCookie}",
    "description": "Removes the given cookie.",
    "lineNumber": 43,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the cookie to erase."
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/client/js/lib/keyboard.js",
    "content": "/**\n * Key listener function, adapted from https://github.com/kittykatattack/learningPixi#keyboard\n * Please refer to this link for extended documentation.\n * @param {number} keyCode ASCII key code for the key to listen. For best results declare the key codes in GLOBAL.js \n */\nimport { isFocused } from '../pixigame';\n\nexport function keyboard(keyCode) {\n  let key = {};\n  key.code = keyCode;\n  key.isDown = false;\n  key.isUp = true;\n  key.press = undefined;\n  key.release = undefined;\n  //If this is a mobile device & the joystick is being used, this will disable the handlers to stop interference.\n  key.mobile = false; \n  //The `downHandler`\n  key.downHandler = event => {\n      if (event.keyCode === key.code && !key.mobile) {\n        if (isFocused()) {\n          if (key.isUp && key.press){\n            key.press();\n          }\n          key.isDown = true;\n          key.isUp = false;\n        }\n        //If \n        else{\n          key.isDown = false;\n          key.isUp = true;\n        }\n    // event.preventDefault();\n      }\n  };\n\n  //The `upHandler`\n  key.upHandler = event => {\n      if (event.keyCode === key.code && !key.mobile) {\n        if(isFocused()){\n          if (key.isDown && key.release){\n            key.release();\n          }\n          key.isDown = false;\n          key.isUp = true;\n        }\n        else{\n          key.isDown = false;\n          key.isUp = true;\n        }\n      }\n    // event.preventDefault();\n  };\n\n  //Attach event listeners\n  window.addEventListener(\n    \"keydown\", key.downHandler.bind(key), false\n  );\n  window.addEventListener(\n    \"keyup\", key.upHandler.bind(key), false\n  );\n  return key;\n}",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/lib/keyboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "keyboard",
    "memberof": "src/client/js/lib/keyboard.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/lib/keyboard.js~keyboard",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/keyboard.js",
    "importStyle": "{keyboard}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "keyCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/client/js/lib/mobilejoystick.js",
    "content": "/** \n * Mobile Joystick - Utilizes nippleJS\n * Created 12 January 2019\n */\n\nimport nipplejs from 'nipplejs'; // NIPPLES!!!! god dammit <3 the naming\nimport { GLOBAL } from '../global.js' \nimport { mobileMovement } from '../pixigame.js';\n\n\nexport default class VirtualJoystick {\n\n    // Use this constructor during init of game\n    constructor(params) {\n        this.mobileKey = {} //that failed me tho that should work\n        this.mobileKey.leftDown = false\n        this.mobileKey.upDown = false\n        this.mobileKey.rightDown = false\n        this.mobileKey.downDown = false //lolol that naming is a beuaty\n\n        var options = {\n            zone: document.getElementById('zone_joystick'),\n            color: 'red'\n        };\n        var manager = nipplejs.create(options);\n\n\n        let self = this // hacky hak\n\n        //Perform actions based on direction up\n        manager.on('added', function (evt, nipple) {\n            // nipple.on('end', function (evt) {\n            //     for (let key of movementKeys){\n            //         key.isDown = false;\n            //         key.isUp = true;\n            //     }\n            // });\n            nipple.on('plain:left', function (evt) {\n                mobileMovement('left') \n                self.mobileKey.leftDown = true \n                self.mobileKey.rightDown = false\n            })\n            nipple.on('plain:right', function (evt) {\n                mobileMovement('right')\n                self.mobileKey.rightDown = true\n                self.mobileKey.leftDown = false\n            })\n            nipple.on('plain:up', function (evt) {\n                mobileMovement('up')\n                self.mobileKey.upDown = true\n                self.mobileKey.downDown = false\n            })\n            nipple.on('plain:down', function (evt) {\n                mobileMovement('down')\n                self.mobileKey.downDown = true\n                self.mobileKey.upDown = false\n            })\n            nipple.on('end', function(evt){\n                self.mobileKey.leftDown = false\n                self.mobileKey.upDown = false\n                self.mobileKey.rightDown = false\n                self.mobileKey.downDown = false\n            })\n        }).on('removed', function (evt, nipple) {\n            nipple.off('start move end dir plain')\n        })\n    }\n    \n} \n\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/lib/mobilejoystick.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "class",
    "name": "VirtualJoystick",
    "memberof": "src/client/js/lib/mobilejoystick.js",
    "static": true,
    "longname": "src/client/js/lib/mobilejoystick.js~VirtualJoystick",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/lib/mobilejoystick.js",
    "importStyle": "VirtualJoystick",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 104,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/lib/mobilejoystick.js~VirtualJoystick",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/lib/mobilejoystick.js~VirtualJoystick#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 105,
    "kind": "member",
    "name": "mobileKey",
    "memberof": "src/client/js/lib/mobilejoystick.js~VirtualJoystick",
    "static": false,
    "longname": "src/client/js/lib/mobilejoystick.js~VirtualJoystick#mobileKey",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "file",
    "name": "src/client/js/obj/blueprints.js",
    "content": "/**\n * This constant stores all data that is used to define Blueprints,\n * which define the recipe and behaviors of Compounds.\n *\n * Fields required:\n * Name: The formatted name of the compound to display\n * Unlocked: TEMPORARY. True if it should show up on initial load, false if it needs to be unlocked from playing.\n * Tooltip: Description of compound\n * Texture: Path to image to load\n * Type: Class of compound. Each different type has a different behavior as defined in `compound.js`.\n * Params: Optional parameters to pass to the compound class associated with the given type.\n * Atoms: How to make the compound. Format is `Element symbol: Number required`. All excluded atoms will be considered 0.\n */\nexport const BLUEPRINTS = {\n\tbinaryHydrogen: {\n\t\tname: 'Hydrogen',\n\t\tunlocked: true,\n\t\ttooltip: 'This is quite literally the smallest compound in the universe. Why are you using this as a weapon?',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'flammable',\n\t\tparams: {\n\t\t\tspeed: 5 * 3,\n\t\t\tdamage: 1,\n\t\t\tsize: 20,\n\t\t\tsplashDamage: 10,\n\t\t\tsplash: 50,\n\t\t\tsplashImage: '../assets/explosion.png'\n\t\t},\n\t\tatoms: {\n\t\t\th: 2\n\t\t}\n\t},\n\tbasicMethane: {\n\t\tname: 'Methane',\n\t\tunlocked: false,\n\t\ttooltip: 'Okay, who passed gas?',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'flammable',\n\t\tparams: {\n\t\t\tspeed: 3 * 3,\n\t\t\tdamage: 3,\n\t\t\tsize: 10\n\t\t},\n\t\tatoms: {\n\t\t\tc: 1,\n\t\t\th: 4\n\t\t}\n\t},\n\tbasicBenzene: {\n\t\tname: 'Benzene',\n\t\tunlocked: false,\n\t\ttooltip: 'Carbon rings. They smell nice.',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'basic',\n\t\tparams: {\n\t\t\tspeed: 1 * 3,\n\t\t\tdamage: 5,\n\t\t\tsize: 30\n\t\t},\n\t\tatoms: {\n\t\t\th: 6,\n\t\t\tc: 6\n\t\t}\n\t},\n\tbasicWater: {\n\t\tname: 'Water',\n\t\tunlocked: true,\n\t\ttooltip: 'Why life exists. Are you trying to drown someone?',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'stream',\n\t\tparams: {\n\t\t\tspeed: 4 * 3,\n\t\t\tdamage: 1,\n\t\t\tsize: 15,\n\t\t\tlength: 10,\n\t\t\tspacing: 50,\n\t\t\tcompoundsPerCraft: 10,\n\t\t\tevaporate: true\n\t\t},\n\t\tatoms: {\n\t\t\th: 2,\n\t\t\to: 1\n\t\t}\n\t},\n\tbinaryNitrogen: {\n\t\tname: 'Nitrogen',\n\t\tunlocked: true,\n\t\ttooltip: '78% of your air, and also why you get the bends.',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'basic',\n\t\tparams: {\n\t\t\tspeed: 3 * 3,\n\t\t\tdamage: 3,\n\t\t\tsize: 20\n\t\t},\n\t\tatoms: {\n\t\t\tn: 2\n\t\t}\n\t},\n\tcarbon: {\n\t\tname: 'Carbon',\n\t\tunlocked: true,\n\t\ttooltip: 'The building block of life.',\n\t\ttexture: 'placeholder_barrier.png',\n\t\ttype: 'block',\n\t\tparams: {\n\t\t\thealth: 1,\n\t\t\tsize: 50,\n\t\t\tspeed: 0\n\t\t},\n\t\tatoms: {\n\t\t\tc: 1\n\t\t}\n\t},\n\tbinaryHelium: {\n\t\tname: 'Helium',\n\t\tunlocked: false,\n\t\ttooltip: 'A nonreactive, inert gas. In other words, useless.',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'basic',\n\t\tparams: {\n\t\t\tspeed: 4 * 3,\n\t\t\tdamage: 2,\n\t\t\tsize: 14\n\t\t},\n\t\tatoms: {\n\t\t\the: 2\n\t\t}\n\t},\n\tionicSodiumChloride: {\n\t\tname: 'Sodium Chloride',\n\t\tunlocked: false,\n\t\ttooltip: 'Can kill small insects, slugs, and snails. Cannot kill much else.',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'ionic',\n\t\tparams: {\n\t\t\tspeed: 4 * 3,\n\t\t\tdamage: 2,\n\t\t\tsize: 14\n\t\t},\n\t\tatoms: {\n\t\t\tna: 1,\n\t\t\tcl: 1\n\t\t}\n\t},\n\tacidicHydrogenChloride: {\n\t\tname: 'Hydrochloric Acid',\n\t\tunlocked: false,\n\t\ttooltip: 'In a pure form, can corrode metal.',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'acidic',\n\t\tparams: {\n\t\t\tspeed: 4 * 3,\n\t\t\tdamage: 2,\n\t\t\tsize: 14\n\t\t},\n\t\tatoms: {\n\t\t\th: 1,\n\t\t\tcl: 1\n\t\t}\n\t},\n\tnuclearLithiumHydrogen: {\n\t\tname: 'Lithium Deuteride',\n\t\tunlocked: false,\n\t\ttooltip: 'Used as the primary fuel in thermonuclear weapons.',\n\t\ttexture: '../assets/spritesheet/atoms/atom_lithium.png',\n\t\ttype: 'nuclear',\n\t\tparams: {\n\t\t\tspeed: 1 * 3,\n\t\t\tdamage: 2,\n\t\t\tsize: 14\n\t\t},\n\t\tatoms: {\n\t\t\th: 1,\n\t\t\tli: 1\n\t\t}\n\t},\n\tglucose: {\n\t\tname: 'Sugar',\n\t\tunlocked: true,\n\t\ttooltip: 'S U G A R R U S H !!!!',\n\t\ttexture: 'compound_sugar.png',\n\t\ttype: 'speed',\n\t\tparams: {\n\t\t\tspeedFactor: 0.5\n\t\t},\n\t\tatoms: {\n\t\t\tc: 6,\n\t\t\th: 12,\n\t\t\to: 6\n\t\t}\n\t},\n\tprotonPack: {\n\t\tname: 'Proton Pack',\n\t\tunlocked: false,\n\t\ttooltip: 'Easy health!',\n\t\ttexture: 'compound_PLACEHOLDER.png',\n\t\ttype: 'health',\n\t\tparams: {\n\t\t\thealthModifier: 10\n\t\t},\n\t\tatoms: {\n\t\t\th: 10\n\t\t}\n\t},\n\tozone: {\n\t\tname: 'Ozone',\n\t\tunlocked: true,\n\t\ttooltip: 'Shield em up!',\n\t\ttexture: 'compound_ozone.png',\n\t\ttype: 'defense',\n\t\tparams: {\n\t\t\tdefenseModifier: 10\n\t\t},\n\t\tatoms: {\n\t\t\to: 3\n\t\t}\n\t},\n\tcyanide: {\n\t\tname: 'Cyanide',\n\t\tunlocked: true,\n\t\ttooltip: 'Less deadly and more happy than Cyanide and Happiness.',\n\t\ttexture: 'cyanide.png',\n\t\ttype: 'toxic',\n\t\tparams: {\n\t\t\tspeed: 2,\n\t\t\tsplashDamage: 0.2,\n\t\t\tsize: 100\n\t\t},\n\t\tatoms: {\n\t\t\tc: 1,\n\t\t\tn: 1\n\t\t}\n\t}\n\t// alcohol: {\n\t// \tname: 'Alcohol',\n\t// \tunlocked: false,\n\t// \ttooltip: ''\n\t// }\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/obj/blueprints.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "BLUEPRINTS",
    "memberof": "src/client/js/obj/blueprints.js",
    "static": true,
    "longname": "src/client/js/obj/blueprints.js~BLUEPRINTS",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/blueprints.js",
    "importStyle": "{BLUEPRINTS}",
    "description": "This constant stores all data that is used to define Blueprints,\nwhich define the recipe and behaviors of Compounds.\n\nFields required:\nName: The formatted name of the compound to display\nUnlocked: TEMPORARY. True if it should show up on initial load, false if it needs to be unlocked from playing.\nTooltip: Description of compound\nTexture: Path to image to load\nType: Class of compound. Each different type has a different behavior as defined in `compound.js`.\nParams: Optional parameters to pass to the compound class associated with the given type.\nAtoms: How to make the compound. Format is `Element symbol: Number required`. All excluded atoms will be considered 0.",
    "lineNumber": 14,
    "type": {
      "types": [
        "{\"binaryHydrogen\": *, \"basicMethane\": *, \"basicBenzene\": *, \"basicWater\": *, \"binaryNitrogen\": *, \"carbon\": *, \"binaryHelium\": *, \"ionicSodiumChloride\": *, \"acidicHydrogenChloride\": *, \"nuclearLithiumHydrogen\": *, \"glucose\": *, \"protonPack\": *, \"ozone\": *, \"cyanide\": *}"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/client/js/obj/create.js",
    "content": "/**\n * Responsible for all gameObject creation and creation request scripts\n * for the client (atoms, compounds, players)\n */\nimport * as PIXI from 'pixi.js'\nimport { GLOBAL } from '../global.js'\nimport { GameObject } from './gameobject.js'\nimport { player, spritesheet } from '../pixigame.js'\nimport { socket } from '../socket.js'\nimport { updateCompoundButtons } from '../app.js'\n\n/**\n * Renders a new atom.\n * @param {*} data The server object reference to spawn on the clientside. Must contain:\n *  - typeID {string} See GLOBAL.ATOM_IDS\n *  - id {number} Unique ID\n *  - posX {number}\n *  - posY {number}\n *  - vx {number}\n *  - vy {number}\n */\nexport function createRenderAtom (data) {\n\tlet texture = spritesheet.textures[GLOBAL.ATOM_SPRITES[GLOBAL.ATOM_IDS.indexOf(data.typeID)]]\n\n\tif (data.typeID === '') {\n\t\tthrow new Error('The Atom object cannot be created without specifying behavior.')\n\t}\n\n\tif (texture === undefined) {\n\t\tthrow new Error('Atom of type ' + data.typeID + ' could not be found!')\n\t}\n\n\tlet result = new GameObject(texture, data.id, data.posX, data.posY, data.vx, data.vy)\n\tresult.typeID = data.typeID\n\tresult.height = GLOBAL.ATOM_RADIUS * 2\n\tresult.width = GLOBAL.ATOM_RADIUS * 2\n\n\treturn result\n}\n\nexport function createPlayer (data) {\n\n}\n\n/**\n * Recreates an already spawned compound on the clientside based on server data.\n * @param {*} data Data sent from server:\n *  - id {number} Unique ID\n *  - posX {number}\n *  - posY {number}\n *  - vx {number}\n *  - vy {number}\n *  - blueprint {*}\n *  - sendingTeam {string}\n *  - sender {number - socket ID}\n */\nexport function createRenderCompound (data) {\n\tlet texture = spritesheet.textures[data.blueprint.texture]\n\tlet result = new GameObject(texture, data.id, data.posX, data.posY, data.vx, data.vy)\n\tresult.blueprint = data.blueprint\n\tresult.sendingTeam = data.sendingTeam\n\tresult.sender = data.sender\n\n\t// Parse params\n\tfor (let param in data.blueprint.params) {\n\t\tresult[param] = data.blueprint.params[param]\n\t}\n\n\t// Use params\n\tresult.width = result.size\n\tresult.height = result.size\n\n\treturn result\n}\n\n/**\n * Creates a Compound by sending a request to the server.\n * @param {*} blueprint Then blueprint to create the compound from\n * @param {number} xIn x-coords\n * @param {number} yIn y-coords\n * @param {number} streamID The current stream number.\n * @returns true if successful, false if the compound was not requested.\n */\nexport function requestCreateCompound (blueprint, xIn, yIn, streamID) {\n\tupdateCompoundButtons()\n\n\tlet centerX = window.innerWidth / 2\n\tlet centerY = window.innerHeight / 2\n\t// console.log(centerX - cursor.x, cursor.y - centerY)\n\tsocket.emit('requestCreateCompound', {\n\t\tblueprint: blueprint,\n\t\tsendingTeam: player.team,\n\t\tsender: socket.id,\n\t\tmousePos: {\n\t\t\tx: xIn - centerX,\n\t\t\ty: centerY - yIn\n\t\t},\n\t\tstreamID: streamID\n\t})\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/obj/create.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "createRenderAtom",
    "memberof": "src/client/js/obj/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/create.js~createRenderAtom",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/create.js",
    "importStyle": "{createRenderAtom}",
    "description": "Renders a new atom.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The server object reference to spawn on the clientside. Must contain:\n - typeID {string} See GLOBAL.ATOM_IDS\n - id {number} Unique ID\n - posX {number}\n - posY {number}\n - vx {number}\n - vy {number}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "function",
    "name": "createPlayer",
    "memberof": "src/client/js/obj/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/create.js~createPlayer",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/create.js",
    "importStyle": "{createPlayer}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "createRenderCompound",
    "memberof": "src/client/js/obj/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/create.js~createRenderCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/create.js",
    "importStyle": "{createRenderCompound}",
    "description": "Recreates an already spawned compound on the clientside based on server data.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data sent from server:\n - id {number} Unique ID\n - posX {number}\n - posY {number}\n - vx {number}\n - vy {number}\n - blueprint {*}\n - sendingTeam {string}\n - sender {number - socket ID}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "function",
    "name": "requestCreateCompound",
    "memberof": "src/client/js/obj/create.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/obj/create.js~requestCreateCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/create.js",
    "importStyle": "{requestCreateCompound}",
    "description": "Creates a Compound by sending a request to the server.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "true if successful, false if the compound was not requested."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "blueprint",
        "description": "Then blueprint to create the compound from"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "xIn",
        "description": "x-coords"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "yIn",
        "description": "y-coords"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "streamID",
        "description": "The current stream number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "true if successful, false if the compound was not requested."
    }
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/client/js/obj/gameobject.js",
    "content": "import * as PIXI from 'pixi.js'\nimport { app, screenCenterX, screenCenterY, player, spritesheet } from '../pixigame'\nimport { GLOBAL } from '../global'\nimport { MAP_LAYOUT } from './tiles'\n\n/**\n * GameObject class that all objects in the game space should inherit.\n * Provides standard field variables such as posX and posY, as well as\n * standard methods to manipulate them.\n *\n * A GameObject cannot be added directly; it must be inherited.\n * setup() and tick() must be overridden.\n */\nexport class GameObject extends PIXI.Sprite {\n\t/**\n     * Creates a new GameObject.\n     * @param {PIXI.Texture} texture The texture associated with this sprite\n     * @param {string} id Unique identifier- for example, socket ID for players, numerical ID for atoms\n     * @param {number} x Global x-coordinate\n     * @param {number} y Global y-coordinate\n     * @param {number} vx Horizontal velocity\n     * @param {number} vy Vertical velocity\n     */\n\tconstructor (texture, id, x, y, vx, vy) {\n\t\tsuper(texture)\n\t\tthis.id = id\n\t\tthis.posX = x\n\t\tthis.posY = y\n\t\tthis.vx = vx\n\t\tthis.vy = vy\n\t\tthis.destroyed = false\n\n\t\tapp.stage.addChild(this)\n\t}\n\n\t/**\n     * Sets global coordinates of this player\n     * @param {number} newX New x-coordinate to move to\n     * @param {number} newY New y-coordinate to move to\n     */\n\tsetCoordinates (newX, newY) {\n\t\tthis.posX = newX\n\t\tthis.posY = newY\n\t}\n\n\t/**\n     * Sets global coordinates and speeds of this player\n     * @param {number} newX New x-coordinate to move to\n     * @param {number} newY New y-coordinate to move to\n     * @param {number} vx New x velocity\n     * @param {number} vy New y velocity\n     */\n\tsetData (newX, newY, vx, vy) {\n\t\tthis.setCoordinates(newX, newY)\n\t\tthis.vx = vx\n\t\tthis.vy = vy\n\t}\n\n\t/**\n     * Call during tick() if necessary.\n     * Draws object in the correct position on the player screen.\n     */\n\tdraw () {\n\t\tif (player !== undefined && !this.destroyed) {\n\t\t\tthis.x = screenCenterX + this.posX - player.posX\n\t\t\tthis.y = screenCenterY + player.posY - this.posY\n\t\t}\n\t}\n\n\t/** TEMP\n     * Moves this object to (9999, 9999) on local screen space, effectively\n     * hiding it from view.\n     */\n\thide () {\n\t\t// console.warn('hide() is called');\n\t\tif (this.transform === null || this.transform === undefined) {\n\t\t\tconsole.warn('hide() function exception. THIS IS ABNORMAL. The following object contains invalid transform object:')\n\t\t\tconsole.warn(this)\n\t\t\treturn 1\n\t\t}\n\t\tthis.x = 9999\n\t\tthis.y = 9999\n\t}\n\n\t/**\n     * Override optional. Called once, during game setup phase.\n     */\n\tsetup () {\n\t}\n\n\t/**\n     * Override optional. Default behavior: handles movement. Call super.tick() from child class if movable.\n     * @param {boolean} noDraw - true if tick() should only process movement, not drawing.\n     */\n\ttick (noDraw) {\n\t\t// Prevent drifting due to minimal negative values\n\n\t\tif (this.destroyed) {\n\t\t\treturn\n\t\t}\n\n\t\tif (Math.abs(this.vx) < GLOBAL.DEADZONE) {\n\t\t\tthis.vx = 0\n\t\t}\n\t\tif (Math.abs(this.vy) < GLOBAL.DEADZONE) {\n\t\t\tthis.vy = 0\n\t\t}\n\n\t\t// Change position based on speed and direction. Don't allow objects to go out of bounds\n\t\tif ((this.vx > 0 && this.posX < MAP_LAYOUT[0].length * GLOBAL.GRID_SPACING * 2 - GLOBAL.GRID_SPACING) || (this.vx < 0 && this.posX > 0)) {\n\t\t\tthis.posX += this.vx\n\t\t}\n\t\tif ((this.vy > 0 && this.posY < (MAP_LAYOUT.length - 1) * GLOBAL.GRID_SPACING * 2) || (this.vy < 0 && this.posY > -GLOBAL.GRID_SPACING)) {\n\t\t\tthis.posY += this.vy\n\t\t}\n\n\t\tif (this.ignited) {\n\t\t\tthis.texture = spritesheet.textures[GLOBAL.IGNITE_SPRITE]\n\t\t}\n\n\t\tif (!noDraw) {\n\t\t\tthis.draw()\n\t\t}\n\t}\n\n\t/**\n     * Destroyes the Sprite\n     */\n\tdestroy () {\n\t\tthis.destroyed = true\n\t\tsuper.destroy()\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/obj/gameobject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "GameObject",
    "memberof": "src/client/js/obj/gameobject.js",
    "static": true,
    "longname": "src/client/js/obj/gameobject.js~GameObject",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/gameobject.js",
    "importStyle": "{GameObject}",
    "description": "GameObject class that all objects in the game space should inherit.\nProvides standard field variables such as posX and posY, as well as\nstandard methods to manipulate them.\n\nA GameObject cannot be added directly; it must be inherited.\nsetup() and tick() must be overridden.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "pixi.js~PIXI.Sprite"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#constructor",
    "access": "public",
    "description": "Creates a new GameObject.",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "PIXI.Texture"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "The texture associated with this sprite"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Unique identifier- for example, socket ID for players, numerical ID for atoms"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Global x-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Global y-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "Horizontal velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "Vertical velocity"
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "id",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#id",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "posX",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#posX",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "posY",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#posY",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "vx",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#vx",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "vy",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#vy",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "destroyed",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#destroyed",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "setCoordinates",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#setCoordinates",
    "access": "public",
    "description": "Sets global coordinates of this player",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newX",
        "description": "New x-coordinate to move to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newY",
        "description": "New y-coordinate to move to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "setData",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#setData",
    "access": "public",
    "description": "Sets global coordinates and speeds of this player",
    "lineNumber": 53,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newX",
        "description": "New x-coordinate to move to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "newY",
        "description": "New y-coordinate to move to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "New x velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "New y velocity"
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "draw",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#draw",
    "access": "public",
    "description": "Call during tick() if necessary.\nDraws object in the correct position on the player screen.",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "member",
    "name": "x",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#x",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "y",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#y",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "hide",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#hide",
    "access": "public",
    "description": "TEMP\nMoves this object to (9999, 9999) on local screen space, effectively\nhiding it from view.",
    "lineNumber": 74,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "setup",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#setup",
    "access": "public",
    "description": "Override optional. Called once, during game setup phase.",
    "lineNumber": 88,
    "params": [],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#tick",
    "access": "public",
    "description": "Override optional. Default behavior: handles movement. Call super.tick() from child class if movable.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "noDraw",
        "description": "true if tick() should only process movement, not drawing."
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "texture",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#texture",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "destroy",
    "memberof": "src/client/js/obj/gameobject.js~GameObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/gameobject.js~GameObject#destroy",
    "access": "public",
    "description": "Destroyes the Sprite",
    "lineNumber": 129,
    "params": [],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/client/js/obj/maptile.js",
    "content": "import * as PIXI from 'pixi.js'\nimport { TILES } from './tiles'\nimport { GLOBAL } from '../global'\nimport { app, player, screenCenterX, screenCenterY, spritesheet } from '../pixigame'\n/**\n * One Tile component of the map.\n */\nexport class MapTile extends PIXI.Sprite {\n\t/**\n     * Constructs one Tile to add to the map.\n     * @param {string} name Name of the tile to place. Takes this name from `tiles.js` and loads its resources\n     * @param {number} gridX X-coordinate on the grid. Every 1 gridX = 400 posX\n     * @param {number} gridY Y-coordinate on the grid.\n     */\n\tconstructor (name, gridX, gridY) {\n\t\tsuper(spritesheet.textures[TILES[name].texture])\n\t\tthis.tile = TILES[name]\n\t\tthis.posX = gridX * GLOBAL.GRID_SPACING * 2\n\t\tthis.posY = gridY * GLOBAL.GRID_SPACING * 2\n\t\tthis.height = GLOBAL.GRID_SPACING * 2\n\t\tthis.width = GLOBAL.GRID_SPACING * 2\n\n\t\t// To be assigned later\n\t\tthis.owner = null\n\t\tthis.captured = false\n\n\t\tif (TILES[name].type === 'spawner' || TILES[name].type === 'stronghold' || TILES[name].type === 'nucleus') {\n\t\t\t// Create text object\n\t\t\tthis.hpText = new PIXI.Text('HP: ' + GLOBAL[('MAX_' + TILES[name].type + '_HEALTH').toUpperCase()])\n\t\t\t// Set style\n\t\t\tthis.hpText.style = new PIXI.TextStyle({\n\t\t\t\tfontSize: 36\n\t\t\t})\n\t\t\tthis.addChild(this.hpText)\n\t\t}\n\n\t\tapp.stage.addChild(this)\n\t}\n\n\t/**\n     * Draws object in the correct position on the player screen.\n     */\n\ttick () {\n\t\tif (player !== undefined) {\n\t\t\tthis.x = screenCenterX + this.posX - player.posX\n\t\t\tthis.y = screenCenterY + player.posY - this.posY\n\t\t}\n\t}\n\n\tupdateHealth(newHealth) {\n\t\tthis.hpText.text = 'HP: ' + newHealth\n\t}\n\n\t/** TEMP\n     * Moves this tile to (9999, 9999) on local screen space, effectively\n     * hiding it from view.\n     */\n\t// hide() {\n\t//     this.x = 9999;\n\t//     this.y = 9999;\n\t// }\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/obj/maptile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "class",
    "name": "MapTile",
    "memberof": "src/client/js/obj/maptile.js",
    "static": true,
    "longname": "src/client/js/obj/maptile.js~MapTile",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/maptile.js",
    "importStyle": "{MapTile}",
    "description": "One Tile component of the map.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "pixi.js~PIXI.Sprite"
    ]
  },
  {
    "__docId__": 145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#constructor",
    "access": "public",
    "description": "Constructs one Tile to add to the map.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the tile to place. Takes this name from `tiles.js` and loads its resources"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gridX",
        "description": "X-coordinate on the grid. Every 1 gridX = 400 posX"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "gridY",
        "description": "Y-coordinate on the grid."
      }
    ]
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "tile",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#tile",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "member",
    "name": "posX",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#posX",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "posY",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#posY",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "height",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#height",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "member",
    "name": "width",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#width",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "owner",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#owner",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "captured",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#captured",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "hpText",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#hpText",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#tick",
    "access": "public",
    "description": "Draws object in the correct position on the player screen.",
    "lineNumber": 43,
    "params": [],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "x",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#x",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 156,
    "kind": "member",
    "name": "y",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#y",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "updateHealth",
    "memberof": "src/client/js/obj/maptile.js~MapTile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/maptile.js~MapTile#updateHealth",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "newHealth",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "src/client/js/obj/player.js",
    "content": "import { GLOBAL } from '../global.js'\nimport * as PIXI from 'pixi.js'\nimport { screenCenterX, screenCenterY, mouseDown, spritesheet } from '../pixigame.js'\nimport { socket, teamColors } from '../socket.js'\nimport { GameObject } from './gameobject.js'\nimport { cookieInputs } from '../app.js'\n\nexport class Player extends GameObject {\n\t/**\n     * Constructor for creating a new Player in the server side.\n     * Player is a Sprite instance that can be added to the stage.\n     * Each Player should only be created once, and updated subsequently with\n     * setData().\n     * @param {PIXI.Texture} texture The texture associated with this sprite\n     * @param {string} id Socket ID of the player\n     * @param {string} name Name of the player\n     * @param {string} room Room that the player belongs to\n     * @param {string} team Team that the player belongs to\n     * @param {number} health Health of the player\n     * @param {number} x Global x-coordinate\n     * @param {number} y Global y-coordinate\n     * @param {number} vx Horizontal velocity\n     * @param {number} vy Vertical velocity\n     */\n\tconstructor (texture, id, name, room, team, health, x, y, vx, vy, experience) {\n\t\t// Call GameObject\n\t\tsuper(texture, id, x, y, vx, vy)\n\n\t\t// Pixi Values\n\t\tthis.width = GLOBAL.PLAYER_RADIUS * 2\n\t\tthis.height = GLOBAL.PLAYER_RADIUS * 2\n\n\t\tif (id === socket.id) {\n\t\t\t// console.log('this player');\n\t\t\tthis.x = screenCenterX\n\t\t\tthis.y = screenCenterY\n\t\t}\n\t\telse { // take this player off screen until it can be processed\n\t\t\tthis.hide()\n\t\t}\n\n\t\t// Custom fields\n\t\tthis.name = name\n\t\tthis.room = room\n\t\tthis.team = team\n\t\tthis.health = health // Set the health of the player\n\t\tthis.isMoving = false\n\t\tthis.experience = experience // Sets the experience of the player(Passed in)\n\t\tthis.speedMult = 1 // Speed multiplier. Increased/decreased by different compounds\n\t\tthis.hasShield = false\n\t\tthis.stronghold = 'none'\n\n\t\tthis.damagedBy = {} // Object containing the values of damage that each player has dealt.\n\t\tthis.textObjects = {} // Contains Text to be drawn under the player (name, id, etc)\n\t\tthis.playerSprite = new PIXI.Sprite(texture)\n\n\t\tthis.setup()\n\t}\n\n\t/**\n     * First-time setup for this player. All of the functions in this method will only be called once.\n     */\n\tsetup () {\n\t\t// Create text objects\n\t\tthis.textObjects.nametext = new PIXI.Text('name: ')\n\t\tthis.textObjects.idtext = new PIXI.Text('id: ')\n\t\tthis.textObjects.postext = new PIXI.Text('placeholderpos')\n\t\tthis.textObjects.teamtext = new PIXI.Text('team: ')\n\t\tthis.textObjects.healthtext = new PIXI.Text('health: ')\n\n\t\t// Assign values and positions\n\t\tthis.textObjects.idtext.position.set(0, GLOBAL.PLAYER_RADIUS * 9)\n\t\tthis.textObjects.idtext.text += this.id\n\t\tthis.textObjects.nametext.position.set(0, GLOBAL.PLAYER_RADIUS * 9 + 100)\n\t\tthis.textObjects.nametext.text += this.name\n\t\tthis.textObjects.postext.position.set(0, GLOBAL.PLAYER_RADIUS * 9 + 200)\n\t\tthis.textObjects.teamtext.text += this.team\n\t\tthis.textObjects.teamtext.position.set(0, GLOBAL.PLAYER_RADIUS * 9 + 300)\n\n\t\t// create text and assign color\n\t\tfor (let item in this.textObjects) {\n\t\t\t// Add text\n\t\t\tthis.textObjects[item].style = new PIXI.TextStyle({\n\t\t\t\tfill: '0x' + GLOBAL.TEAM_COLORS[teamColors[this.team]],\n\t\t\t\tfontSize: 120\n\t\t\t})\n\t\t\tthis.addChild(this.textObjects[item])\n\t\t}\n\n\t\t// Create player sprite child\n\t\tthis.playerSprite.anchor.set(0.5, 0.5)\n\t\tthis.playerSprite.position.set(GLOBAL.PLAYER_RADIUS * 5, GLOBAL.PLAYER_RADIUS * 5)\n\t\tthis.playerSprite.scale.set(1.3, 1.3)\n\t\tthis.addChild(this.playerSprite)\n\t}\n\t/**\n      * Draws all components of a given player.\n      * This method should be included in the ticker and called once a frame.\n    * Therefore, all setup tasks\n     * should be called in setup().\n    */\n\ttick () {\n\t\t// Movement\n\t\tsuper.tick(true)\n\n\t\t// Update text\n\t\tthis.textObjects.postext.text = '(' + Math.round(this.posX) + ', ' + Math.round(this.posY) + ')'\n\t\tthis.textObjects.healthtext.text = 'health: ' + this.health\n\n\t\t// Rotation\n\t\tthis.playerSprite.rotation += (this.id === socket.id && mouseDown) ? GLOBAL.PLAYER_EXPEDITED_ROTATION : GLOBAL.PLAYER_ROTATION\n\n\t\t// Draw other player\n\t\tif (this.id !== socket.id) {\n\t\t\tthis.draw()\n\t\t}\n\t}\n\n\t/**\n\t * Notifies the player to check for a sprite change (shield, etc).\n\t * @param {boolean} hasShield True if the player has shield from an element\n\t * @param {string} stronghold 'team' if player is in team stronghold, 'notteam' if player is in enemy stronghold, 'none', if not in a stronghold\n\t */\n\tchangeSprite(hasShield, stronghold) {\n\t\t// Set values\n\t\tthis.hasShield = hasShield\n\t\tthis.stronghold = stronghold\n\n\t\t// Set sprite\n\t\tif (this.hasShield || this.stronghold === 'team') {\n\t\t\tthis.playerSprite.texture = spritesheet.textures[teamColors[this.team] + 'playershield.png']\n\t\t}\n\t\telse {\n\t\t\tthis.playerSprite.texture = spritesheet.textures[teamColors[this.team] + 'player.png']\n\t\t}\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/obj/player.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "Player",
    "memberof": "src/client/js/obj/player.js",
    "static": true,
    "longname": "src/client/js/obj/player.js~Player",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/player.js",
    "importStyle": "{Player}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/client/js/obj/gameobject.js~GameObject"
    ]
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#constructor",
    "access": "public",
    "description": "Constructor for creating a new Player in the server side.\nPlayer is a Sprite instance that can be added to the stage.\nEach Player should only be created once, and updated subsequently with\nsetData().",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "PIXI.Texture"
        ],
        "spread": false,
        "optional": false,
        "name": "texture",
        "description": "The texture associated with this sprite"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Socket ID of the player"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the player"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Room that the player belongs to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "Team that the player belongs to"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "health",
        "description": "Health of the player"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Global x-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Global y-coordinate"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vx",
        "description": "Horizontal velocity"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "vy",
        "description": "Vertical velocity"
      }
    ]
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "width",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#width",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "height",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#height",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "x",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#x",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "y",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#y",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "name",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#name",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "room",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#room",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "team",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#team",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "health",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#health",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "isMoving",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#isMoving",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "experience",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#experience",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "speedMult",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#speedMult",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "hasShield",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#hasShield",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "stronghold",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#stronghold",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "damagedBy",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#damagedBy",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "textObjects",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#textObjects",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "playerSprite",
    "memberof": "src/client/js/obj/player.js~Player",
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#playerSprite",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "setup",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#setup",
    "access": "public",
    "description": "First-time setup for this player. All of the functions in this method will only be called once.",
    "lineNumber": 63,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "tick",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#tick",
    "access": "public",
    "description": "Draws all components of a given player.\nThis method should be included in the ticker and called once a frame.\nTherefore, all setup tasks\nshould be called in setup().",
    "lineNumber": 102,
    "params": [],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "changeSprite",
    "memberof": "src/client/js/obj/player.js~Player",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/js/obj/player.js~Player#changeSprite",
    "access": "public",
    "description": "Notifies the player to check for a sprite change (shield, etc).",
    "lineNumber": 124,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hasShield",
        "description": "True if the player has shield from an element"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "stronghold",
        "description": "'team' if player is in team stronghold, 'notteam' if player is in enemy stronghold, 'none', if not in a stronghold"
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/client/js/obj/tiles.js",
    "content": "/**\n * This constant contains all data on how to draw and manage tiles.\n *\n * Fields required:\n * type: Choose one: spawner, teamBase, wall\n * params: Different for each type. For example, spawner will require the `atomToSpawn` param, and teamBase will require the `teamName` param.\n * texture: String path of the texture file for this texture, starting in the `map` folder. (ex. 'foo.png' corresponds to '../../assets/map/Tiles/foo.png')\n */\nexport const TILES = {\n\tempty: {\n\t\ttexture: 'SolidTile.png',\n\t\ttype: 'none'\n\t},\n\tflame: {\n\t\ttexture: 'FlameTile.png',\n\t\ttype: 'flame'\n\t},\n\ttopLeft: {\n\t\ttexture: 'InteriorCorner BR.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['bottom', 'right']\n\t\t}\n\t},\n\ttopRight: {\n\t\ttexture: 'InteriorCorner BL.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['bottom', 'left']\n\t\t}\n\t},\n\tbottomLeft: {\n\t\ttexture: 'InteriorCorner TR.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['top', 'right']\n\t\t}\n\t},\n\tbottomRight: {\n\t\ttexture: 'InteriorCorner TL.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['top', 'left']\n\t\t}\n\t},\n\tedgeTop: {\n\t\ttexture: 'EdgeTile B.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['bottom']\n\t\t}\n\t},\n\tedgeBottom: {\n\t\ttexture: 'EdgeTile T.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['top']\n\t\t}\n\t},\n\tedgeLeft: {\n\t\ttexture: 'EdgeTile R.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['right']\n\t\t}\n\t},\n\tedgeRight: {\n\t\ttexture: 'EdgeTile L.png',\n\t\ttype: 'wall',\n\t\tparams: {\n\t\t\tborder: ['left']\n\t\t}\n\t},\n\thydrogenVent: {\n\t\ttexture: 'HydrogenVent.png',\n\t\ttype: 'spawner',\n\t\tparams: {\n\t\t\tatomsToSpawn: ['h']\n\t\t}\n\t},\n\toxygenVent: {\n\t\ttexture: 'OxygenVent.png',\n\t\ttype: 'spawner',\n\t\tparams: {\n\t\t\tatomsToSpawn: ['o']\n\t\t}\n\t},\n\tnitrogenVent: {\n\t\ttexture: 'NitrogenVent.png',\n\t\ttype: 'spawner',\n\t\tparams: {\n\t\t\tatomsToSpawn: ['n']\n\t\t}\n\t},\n\tcarbonVent: {\n\t\ttexture: 'CarbonVent.png',\n\t\ttype: 'spawner',\n\t\tparams: {\n\t\t\tatomsToSpawn: ['c']\n\t\t}\n\t},\n\tstronghold: {\n\t\ttexture: 'stronghold.png',\n\t\ttype: 'stronghold'\n\t},\n\tnucleus0: {\n\t\ttexture: '0nucleus.png',\n\t\ttype: 'nucleus'\n\t},\n\tnucleus1: {\n\t\ttexture: '1nucleus.png',\n\t\ttype: 'nucleus'\n\t},\n\tnucleus2: {\n\t\ttexture: '2nucleus.png',\n\t\ttype: 'nucleus'\n\t},\n\tnucleus3: {\n\t\ttexture: '3nucleus.png',\n\t\ttype: 'nucleus'\n\t}\n}\n\n/**\n * 2D array containing the entire map tile layout. Top left is (0,0), furthest right is (n, 0) and furthest bottom is (0, n).\n * Shortcuts:\n * E = Empty\n * O = Oxygen\n * N = Nitrogen\n * C = Carbon\n */\nexport const MAP_LAYOUT = [\n\t['E', 'E', 'E', 'E', 'E', 'E', 'n1'],\n\t['E', 'O', 'E', 'S', 'E', 'O', 'E'],\n\t['E', 'H', 'F', 'N', 'F', 'H', 'E'],\n\t['E', 'S', 'F', 'C', 'F', 'S', 'E'],\n\t['E', 'H', 'F', 'N', 'F', 'H', 'E'],\n\t['E', 'O', 'E', 'S', 'E', 'O', 'E'],\n\t['n0', 'E', 'E', 'E', 'E', 'E', 'E']\n]\n\nexport const TILE_NAMES = {\n\tE: 'empty',\n\tO: 'oxygenVent',\n\tN: 'nitrogenVent',\n\tC: 'carbonVent',\n\tH: 'hydrogenVent',\n\tF: 'flame',\n\tS: 'stronghold',\n\tq: 'topLeft',\n\tw: 'edgeTop',\n\te: 'topRight',\n\ta: 'edgeLeft',\n\td: 'edgeRight',\n\tz: 'bottomLeft',\n\tx: 'edgeBottom',\n\tc: 'bottomRight',\n\tn0: 'nucleus0',\n\tn1: 'nucleus1',\n\tn2: 'nucleus2',\n\tn3: 'nucleus3'\n\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/obj/tiles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "TILES",
    "memberof": "src/client/js/obj/tiles.js",
    "static": true,
    "longname": "src/client/js/obj/tiles.js~TILES",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/tiles.js",
    "importStyle": "{TILES}",
    "description": "This constant contains all data on how to draw and manage tiles.\n\nFields required:\ntype: Choose one: spawner, teamBase, wall\nparams: Different for each type. For example, spawner will require the `atomToSpawn` param, and teamBase will require the `teamName` param.\ntexture: String path of the texture file for this texture, starting in the `map` folder. (ex. 'foo.png' corresponds to '../../assets/map/Tiles/foo.png')",
    "lineNumber": 9,
    "type": {
      "types": [
        "{\"empty\": *, \"flame\": *, \"topLeft\": *, \"topRight\": *, \"bottomLeft\": *, \"bottomRight\": *, \"edgeTop\": *, \"edgeBottom\": *, \"edgeLeft\": *, \"edgeRight\": *, \"hydrogenVent\": *, \"oxygenVent\": *, \"nitrogenVent\": *, \"carbonVent\": *, \"stronghold\": *, \"nucleus0\": *, \"nucleus1\": *, \"nucleus2\": *, \"nucleus3\": *}"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "MAP_LAYOUT",
    "memberof": "src/client/js/obj/tiles.js",
    "static": true,
    "longname": "src/client/js/obj/tiles.js~MAP_LAYOUT",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/tiles.js",
    "importStyle": "{MAP_LAYOUT}",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "variable",
    "name": "TILE_NAMES",
    "memberof": "src/client/js/obj/tiles.js",
    "static": true,
    "longname": "src/client/js/obj/tiles.js~TILE_NAMES",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/obj/tiles.js",
    "importStyle": "{TILE_NAMES}",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "{\"E\": string, \"O\": string, \"N\": string, \"C\": string, \"H\": string, \"F\": string, \"S\": string, \"q\": string, \"w\": string, \"e\": string, \"a\": string, \"d\": string, \"z\": string, \"x\": string, \"c\": string, \"n0\": string, \"n1\": string, \"n2\": string, \"n3\": string}"
      ]
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/client/js/pixigame.js",
    "content": "import * as PIXI from 'pixi.js'\nimport { keyboard } from './lib/keyboard'\nimport { GLOBAL } from './global'\nimport { Player } from './obj/player'\nimport { hideElement, showElement, selectedBlueprints, updateCompoundButtons, selectedCompound, cookieInputs, mouseX, mouseY } from './app'\nimport { socket, objects, teamColors } from './socket'\nimport { BLUEPRINTS } from './obj/blueprints'\nimport { TILES, MAP_LAYOUT, TILE_NAMES } from './obj/tiles'\nimport { requestCreateCompound } from './obj/create'\nimport { MapTile } from './obj/maptile'\nimport { joystick } from './app'\n\nexport var isSetup // True after the stage is fully set up\nexport var player // The player being controlled by this client\nexport var screenCenterX // X-coordinate of the center of the screen\nexport var screenCenterY // Y-coordinate of the center of the screen\nexport var app // Pixi app\nexport var spritesheet // Spritesheet containing all sprites that need to be loaded\n\nexport let mouseDown = false // True if mouse is pressed down\nlet inGame = false // True after game has begun\nlet esc, space, blueprintKeys, moveKeys // Key handlers\nlet streamID = 0 // Current stream compound number. Resets when mouse/space is released; otherwise increments by one every time a compound is created.\n\nexport function loadTextures () {\n\tif (!isSetup) {\n\t\t// Initialization\n\t\tlet type = (PIXI.utils.isWebGLSupported()) ? 'WebGL' : 'canvas'\n\t\tPIXI.utils.sayHello(type)\n\n\t\t// Create a Pixi Application\n\t\tapp = new PIXI.Application(0, 0, {\n\t\t\tview: document.getElementById('gameView')\n\t\t})\n\t\t// Add the canvas that Pixi automatically created for you to the HTML document\n\t\t// document.body.appendChild(app.view);\n\n\t\t// Renderer settings\n\t\tapp.renderer.autoResize = true\n\t\tapp.renderer.resize(window.innerWidth, window.innerHeight)\n\t\tscreenCenterX = window.innerWidth / 2 - GLOBAL.PLAYER_RADIUS\n\t\tscreenCenterY = window.innerHeight / 2 - GLOBAL.PLAYER_RADIUS\n\n\t\t// Initiate resource loading\n\t\tif (Object.keys(PIXI.loader.resources).length < 1) {\n\t\t\tPIXI.loader\n\t\t\t\t.add(GLOBAL.SPRITESHEET_DIR)\n\t\t\t\t.load(registerCallbacks)\n\t\t}\n\t}\n\n\t// If already initialized, use existing app variable\n\tif (isSetup) {\n\t\tconsole.info('Stage already initialized!')\n\t\tclearStage()\n\t\tregisterCallbacks()\n\t}\n}\n\n/**\n * Sets up the stage. Call after init(), and begins the draw() loop once complete.\n */\nfunction registerCallbacks () {\n\tif (!isSetup) {\n\t\t// Set up key listeners\n\t\tesc = keyboard(GLOBAL.KEY_ESC)\n\t\tspace = keyboard(GLOBAL.KEY_SPACE)\n\n\t\t// All the movement keys for easy access\n\t\tmoveKeys = [\n\t\t\tkeyboard(GLOBAL.KEY_A), // Left\n\t\t\tkeyboard(GLOBAL.KEY_D), // Right\n\t\t\tkeyboard(GLOBAL.KEY_W), // Up\n\t\t\tkeyboard(GLOBAL.KEY_S) // Down\n\t\t]\n\n\t\t// Set up the blueprint key listeners\n\t\tblueprintKeys = [\n\t\t\tkeyboard(GLOBAL.KEY_1),\n\t\t\tkeyboard(GLOBAL.KEY_2),\n\t\t\tkeyboard(GLOBAL.KEY_3),\n\t\t\tkeyboard(GLOBAL.KEY_4)\n\t\t]\n\n\t\t// Escape key setup\n\t\tesc.press = () => {\n\t\t\tif (isFocused()) {\n\t\t\t\tif (document.activeElement !== document.getElementById('chatInput')) {\n\t\t\t\t\ttoggleMenu()\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdocument.getElementById('chatInput').blur()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Chat box styling on select\n\t\tdocument.getElementById('chatInput').onfocus = () => {\n\t\t\tdocument.getElementById('chatbox').style.boxShadow = '0px 0px 1rem 0px #311B92'\n\t\t}\n\n\t\tdocument.getElementById('chatInput').onblur = () => {\n\t\t\tdocument.getElementById('chatbox').style.boxShadow = '0px 0px 1rem 0px rgba(180,180,180)'\n\t\t}\n\n\t\t// Bind each blueprint key\n\t\tfor (let key in blueprintKeys) {\n\t\t\tblueprintKeys[key].press = () => {\n\t\t\t\tif (isFocused() && inGame) {\n\t\t\t\t\tupdateCompoundButtons(key)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Background\n\t\tapp.renderer.backgroundColor = 0xFFFFFF\n\n\t\t// Resize\n\t\tdocument.getElementsByTagName('body')[0].onresize = () => {\n\t\t\tapp.renderer.resize(window.innerWidth, window.innerHeight)\n\t\t\tscreenCenterX = window.innerWidth / 2 - GLOBAL.PLAYER_RADIUS\n\t\t\tscreenCenterY = window.innerHeight / 2 - GLOBAL.PLAYER_RADIUS\n\t\t\tplayer.x = screenCenterX\n\t\t\tplayer.y = screenCenterY\n\t\t}\n\n\t\t// Assign spritesheet object\n\t\tspritesheet = PIXI.loader.resources[GLOBAL.SPRITESHEET_DIR].spritesheet\n\t\tconsole.log(spritesheet)\n\n\t\t// Begin game loop\n\t\tapp.ticker.add(delta => draw(delta))\n\t}\n\n\tisSetup = true\n\n\t// Draw map\n\tfor (let row = 0; row < MAP_LAYOUT.length; row++) {\n\t\tfor (let col = 0; col < MAP_LAYOUT[0].length; col++) {\n\t\t\tlet tileName = 'tile_' + col + '_' + (MAP_LAYOUT.length - row - 1)\n\t\t\tif (objects.tiles[tileName] === undefined || objects.tiles[tileName] === null) {\n\t\t\t\tif (TILE_NAMES[MAP_LAYOUT[row][col]] !== undefined) {\n\t\t\t\t\tobjects.tiles[tileName] = new MapTile(TILE_NAMES[MAP_LAYOUT[row][col]], col, MAP_LAYOUT.length - row - 1)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new Error('Tile ' + MAP_LAYOUT[row][col] + ' could not be resolved to a name.')\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tshowGameUI()\n}\n\n/**\n * Called once per frame. Updates all moving sprites on the stage.\n * Also checks key inputs.\n * @param {number} delta Time value from Pixi\n */\nfunction draw (delta) {\n\t// Handle this player and movement\n\tif (player !== undefined) {\n\t\t// Make sure player is not in chat before checking move\n\t\tif (isFocused() && inGame) {\n\t\t\t// Keyboard based controls\n\n\t\t\tif ((moveKeys[0].isDown || joystick.mobileKey.leftDown === true) && player.vx > -GLOBAL.MAX_SPEED * player.speedMult) { // Left\n\t\t\t\tmobileMovement('left')\n\t\t\t}\n\t\t\tif ((moveKeys[1].isDown || joystick.mobileKey.rightDown === true) && player.vx < GLOBAL.MAX_SPEED * player.speedMult) { // Right\n\t\t\t\tmobileMovement('right')\n\t\t\t}\n\t\t\tif ((moveKeys[2].isDown || joystick.mobileKey.upDown === true) && player.vy < GLOBAL.MAX_SPEED * player.speedMult) { // Up\n\t\t\t\tmobileMovement('up')\n\t\t\t}\n\t\t\tif ((moveKeys[3].isDown || joystick.mobileKey.downDown === true) && player.vy > -GLOBAL.MAX_SPEED * player.speedMult) { // Down\n\t\t\t\tmobileMovement('down')\n\t\t\t}\n\t\t\tplayer.isMoving = false\n\t\t\tfor (let key of moveKeys) {\n\t\t\t\tif (key.isDown) {\n\t\t\t\t\tplayer.isMoving = true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tplayer.isMoving = false\n\n\t\t\t// Because the document is not focused disable all keys(Stops moving!)\n\t\t\tfor (let key in moveKeys) {\n\t\t\t\tmoveKeys[key].isDown = false\n\t\t\t\tmoveKeys[key].isUp = true\n\t\t\t}\n\t\t}\n\n\t\t// Slow down gradually - unaffected by chat input\n\t\tif (!moveKeys[2].isDown && !moveKeys[3].isDown) {\n\t\t\tplayer.vy *= GLOBAL.VELOCITY_STEP\n\t\t}\n\t\tif (!moveKeys[0].isDown && !moveKeys[1].isDown) {\n\t\t\tplayer.vx *= GLOBAL.VELOCITY_STEP\n\t\t}\n\n\t\t// Shooting\n\t\tspace.press = () => {\n\t\t\tif (selectedBlueprints[selectedCompound].type !== 'stream') {\n\t\t\t\tshootHandler({ clientX: mouseX, clientY: mouseY }, false)\n\t\t\t}\n\t\t}\n\n\t\t// Streams\n\t\tif ((space.isDown || mouseDown) && selectedBlueprints[selectedCompound].type === 'stream') {\n\t\t\tshootHandler({ clientX: mouseX, clientY: mouseY }, true)\n\t\t}\n\n\t\t// Reset stream count when space key is released\n\t\tspace.release = () => {\n\t\t\tstreamID = 0\n\t\t}\n\n\t\t// Move player\n\t\tplayer.tick()\n\n\t\t// Send coordinates\n\t\tsocket.emit('move', {\n\t\t\ttype: 'players',\n\t\t\tid: player.id,\n\t\t\tposX: player.posX,\n\t\t\tposY: player.posY,\n\t\t\tvx: player.vx,\n\t\t\tvy: player.vy\n\t\t})\n\t}\n\n\t// Handle objects except for this player\n\tfor (let objType in objects) {\n\t\tfor (let obj in objects[objType]) {\n\t\t\tif (objType !== 'players' || player !== objects[objType][obj]) {\n\t\t\t\tobjects[objType][obj].tick()\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Shows or hides the in-game menu box\n */\nfunction toggleMenu () {\n\tif (document.getElementById('menubox').offsetParent === null) {\n\t\tshowElement('menubox')\n\t}\n\telse {\n\t\thideElement('menubox')\n\t}\n}\n\n/**\n * Remove all elements pre-rendered on stage.\n */\nfunction clearStage () {\n\tfor (var i = app.stage.children.length - 1; i >= 0; i--) {\n\t\tapp.stage.removeChild(app.stage.children[i])\n\t}\n}\n\n/**\n * Destroy everything in PIXI. DANGEROUS avoid!\n */\nexport function destroyPIXI () {\n\tapp.destroy(true, {\n\t\tchildren: true,\n\t\ttexture: true,\n\t\tbaseTexture: true\n\t})\n\tPIXI.loader.reset()\n\tisSetup = false\n\tapp = undefined\n}\n\n/**\n * Call this function to hide loading div and show UI\n */\nexport function showGameUI () {\n\t// Hide loading screen\n\thideElement('loading')\n\tif (!inGame) {\n\t\tshowElement('lobby')\n\t}\n}\n\n/**\n * Creates a Player instance once the stage is fully set up and ready.\n * @param {*} data Starting values to assign to the player. Generated from server\n * @returns {Player} The Player object that was created\n */\nexport function createPlayer (data) {\n\tif (isSetup) {\n\t\tconsole.log('create player ' + data.id)\n\t\t// console.log(data)\n\t\tlet newPlayer = new Player(spritesheet.textures[teamColors[data.team] + 'player.png'], data.id, data.name, data.room, data.team, data.health, data.posX, data.posY, data.vx, data.vy)\n\t\tif (data.id === socket.id) {\n\t\t\tplayer = newPlayer\n\t\t}\n\n\t\treturn newPlayer\n\t}\n}\n\n/**\n * If the document is Focused return true otherwise false\n **/\nexport function isFocused () {\n\treturn document.hasFocus() && document.activeElement !== document.getElementById('chatInput')\n}\n\n/**\n * Starts the game after lobby closes.\n * @param {boolean} emit True if this client should emit the event to the server.\n * @param {*} teams Array of teams on the scoreboard.\n */\nexport function startGame (emit, teams) {\n\tsetIngame(true)\n\thideElement('lobby')\n\tshowElement('hud')\n\tif (emit) {\n\t\tsocket.emit('startGame', {\n\t\t\tstart: true\n\t\t})\n\t}\n\n\t// Init scoreboard\n\tif (teams !== undefined) {\n\t\t// Reset scoreboard from previous rounds\n\t\tdocument.getElementById('score').innerHTML = ''\n\n\t\tfor (let i = 0; i < teams.length; i++) {\n\t\t\tdocument.getElementById('score').innerHTML += '-<span id=\"team-score-' + i + '\">0</span>'\n\t\t\tdocument.getElementById('team-score-' + i).style.color = '#' + GLOBAL.TEAM_COLORS[i]\n\t\t}\n\t\tdocument.getElementById('score').style.fontSize = '3vw'\n\t\tdocument.getElementById('score').innerHTML += '-'\n\t}\n}\n\n/**\n * Sets the value of inGame\n * @param {boolean} newValue Value to set inGame to\n */\nexport function setIngame (newValue) {\n\tinGame = newValue\n}\n\n/**\n * @returns {boolean} Returns inGame variable\n */\nexport function getIngame () {\n\treturn inGame\n}\n\n/**\n * Called on mouse up from app.js\n * @param {*} e Click event\n */\nexport function mouseUpHandler (e) {\n\tmouseDown = true\n\tif (selectedBlueprints[selectedCompound] && selectedBlueprints[selectedCompound].type !== 'stream') {\n\t\tshootHandler(e, false)\n\t}\n}\n/**\n * Called on mouse down from app.js\n * @param {*} e Click event\n */\nexport function mouseDownHandler (e) {\n\tmouseDown = false\n\tstreamID = 0\n}\n\n/**\n * Handles shooting mechanics on mouse/spacebar click/hold.\n * @param {*} e Click event\n * @param {boolean} stream True if sending a stream (such as water); false otherwise.\n */\nfunction shootHandler (e, stream) {\n\tif (isFocused() && inGame) {\n\t\tif (stream) {\n\t\t\tstreamID++\n\t\t}\n\t\trequestCreateCompound(selectedBlueprints[selectedCompound], e.clientX, e.clientY, streamID)\n\t}\n}\n\n// actually name this better bro\nexport function mobileMovement (direction) {\n\tif (direction === 'up') {\n\t\tplayer.vy += GLOBAL.VELOCITY_STEP * player.speedMult\n\t}\n\tif (direction === 'down') {\n\t\tplayer.vy += -GLOBAL.VELOCITY_STEP * player.speedMult\n\t}\n\tif (direction === 'right') {\n\t\tplayer.vx += GLOBAL.VELOCITY_STEP * player.speedMult\n\t}\n\tif (direction === 'left') {\n\t\tplayer.vx += -GLOBAL.VELOCITY_STEP * player.speedMult\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/pixigame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "mouseDown",
    "memberof": "src/client/js/pixigame.js",
    "static": true,
    "longname": "src/client/js/pixigame.js~mouseDown",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{mouseDown}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "variable",
    "name": "inGame",
    "memberof": "src/client/js/pixigame.js",
    "static": true,
    "longname": "src/client/js/pixigame.js~inGame",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "streamID",
    "memberof": "src/client/js/pixigame.js",
    "static": true,
    "longname": "src/client/js/pixigame.js~streamID",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 190,
    "kind": "function",
    "name": "loadTextures",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~loadTextures",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{loadTextures}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "registerCallbacks",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~registerCallbacks",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Sets up the stage. Call after init(), and begins the draw() loop once complete.",
    "lineNumber": 63,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "draw",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~draw",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Called once per frame. Updates all moving sprites on the stage.\nAlso checks key inputs.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": "Time value from Pixi"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "toggleMenu",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~toggleMenu",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Shows or hides the in-game menu box",
    "lineNumber": 248,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "function",
    "name": "clearStage",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~clearStage",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Remove all elements pre-rendered on stage.",
    "lineNumber": 260,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "destroyPIXI",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~destroyPIXI",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{destroyPIXI}",
    "description": "Destroy everything in PIXI. DANGEROUS avoid!",
    "lineNumber": 269,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "function",
    "name": "showGameUI",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~showGameUI",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{showGameUI}",
    "description": "Call this function to hide loading div and show UI",
    "lineNumber": 283,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "function",
    "name": "createPlayer",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~createPlayer",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{createPlayer}",
    "description": "Creates a Player instance once the stage is fully set up and ready.",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Player} The Player object that was created"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Starting values to assign to the player. Generated from server"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Player"
      ],
      "spread": false,
      "description": "The Player object that was created"
    }
  },
  {
    "__docId__": 198,
    "kind": "function",
    "name": "isFocused",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~isFocused",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{isFocused}",
    "description": "If the document is Focused return true otherwise false",
    "lineNumber": 312,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "function",
    "name": "startGame",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~startGame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{startGame}",
    "description": "Starts the game after lobby closes.",
    "lineNumber": 321,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "emit",
        "description": "True if this client should emit the event to the server."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "teams",
        "description": "Array of teams on the scoreboard."
      }
    ],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "setIngame",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~setIngame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{setIngame}",
    "description": "Sets the value of inGame",
    "lineNumber": 349,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": "Value to set inGame to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "function",
    "name": "getIngame",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~getIngame",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{getIngame}",
    "description": "",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns inGame variable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns inGame variable"
    },
    "params": []
  },
  {
    "__docId__": 202,
    "kind": "function",
    "name": "mouseUpHandler",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~mouseUpHandler",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{mouseUpHandler}",
    "description": "Called on mouse up from app.js",
    "lineNumber": 364,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "function",
    "name": "mouseDownHandler",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~mouseDownHandler",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{mouseDownHandler}",
    "description": "Called on mouse down from app.js",
    "lineNumber": 374,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "shootHandler",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~shootHandler",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": null,
    "description": "Handles shooting mechanics on mouse/spacebar click/hold.",
    "lineNumber": 384,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Click event"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "stream",
        "description": "True if sending a stream (such as water); false otherwise."
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 205,
    "kind": "function",
    "name": "mobileMovement",
    "memberof": "src/client/js/pixigame.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/pixigame.js~mobileMovement",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/pixigame.js",
    "importStyle": "{mobileMovement}",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "params": [
      {
        "name": "direction",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/client/js/socket.js",
    "content": "import { GLOBAL } from './global'\nimport { cookieInputs, quitGame, updateLobby, updateScores, hideElement, displayWinner, updateAtomList } from './app'\nimport ChatClient from './lib/chat-client'\nimport { loadTextures, app, createPlayer, isSetup, startGame, setIngame, spritesheet } from './pixigame'\nimport { createRenderAtom, createRenderCompound } from './obj/create'\n\n/**\n * Socket.js contains all of the clientside networking interface.\n * It contains all variables which are synced between client and server.\n */\n\n// Socket.io instance\nexport var socket\n\n/* Object containing all synced objects. Contains nested objects, which correspond to different types\n * (for example, objects[atoms], objects[players], objects[compounds])\n */\nexport var objects = {\n\tplayers: {},\n\tatoms: {},\n\tcompounds: {},\n\ttiles: {}\n}\n\n/**\n * Team colors object. Number corresponds to index at GLOBAL.TEAM_COLORS.\n * Format: {\n * \tteamname1: 0,\n * \tteamname: colorid,\n * \t...\n * }\n */\nexport var teamColors = {}\n\n/**\n * Attempts to connect to the server. Run on 'start game' press.\n *  - Manages connecting to main server vs. devserver\n *  - Sets up socket listeners\n *  - Loads textures\n *  - Loads pixi\n */\nexport function beginConnection () {\n\t// Joins debug server if conditions are met\n\tlet room = (cookieInputs[7].value === 'private' ? cookieInputs[1].value : GLOBAL.NO_ROOM_IDENTIFIER)\n\tlet teamInput = (document.querySelector('input[name=\"queue-type\"]:checked').id === 'team-option') ? cookieInputs[2].value : GLOBAL.NO_TEAM_IDENTIFIER\n\n\tif (cookieInputs[1].value === 'test') {\n\t\tconsole.info('Connecting to: ' + GLOBAL.TEST_IP)\n\t\t// DEVELOPMENT server - auto deploy from pixi branch\n\t\tsocket = io.connect(GLOBAL.TEST_IP, {\n\t\t\tquery: `room=${room}&name=${cookieInputs[0].value}&team=${teamInput}&roomType=${cookieInputs[7].value}`,\n\t\t\treconnectionAttempts: 3\n\t\t})\n\t}\n\telse if (cookieInputs[1].value === 'jurassicexp') {\n\t\tconsole.log('Dev Backdoor Initiated! Connecting to devserver')\n\t\t// Local server\n\t\tsocket = io.connect(GLOBAL.LOCAL_HOST, {\n\t\t\tquery: `room=${room}&name=${cookieInputs[0].value}&team=${teamInput}&roomType=${cookieInputs[7].value}`,\n\t\t\treconnectionAttempts: 3\n\t\t})\n\t}\n\telse {\n\t\t// Production server\n\t\tconsole.log('connecting to main server')\n\t\tsocket = io.connect(GLOBAL.SERVER_IP, {\n\t\t\tquery: `room=${room}&name=${cookieInputs[0].value}&team=${teamInput}&roomType=${cookieInputs[7].value}`,\n\t\t\treconnectionAttempts: 3\n\t\t})\n\t}\n\n\tsocket.on('connect', () => {\n\t\tsetupSocket()\n\t\t// Init pixi\n\t\tloadTextures()\n\t\tif (typeof app !== 'undefined') {\n\t\t\tapp.start()\n\t\t}\n\t})\n}\n\n/**\n * Run on disconnect to reset all server-based variables and connections\n */\nexport function disconnect () {\n\tapp.stop()\n\tsocket.disconnect()\n\n\t// Wipe objects list\n\tfor (let objType in objects) {\n\t\tobjects[objType] = {}\n\t}\n}\n\n/**\n * First time setup when connection starts. Run on connect event to ensure that the socket is connected first.\n */\nfunction setupSocket () {\n\t// Debug\n\tconsole.log('Socket:', socket)\n\n\t// Instantiate Chat System\n\tlet chat = new ChatClient({ player: cookieInputs[0].value, room: cookieInputs[1].value, team: cookieInputs[2].value })\n\tchat.addLoginMessage(cookieInputs[0].value, true)\n\tchat.registerFunctions()\n\n\t// Setup listeners\n\tsetupSocketConnection()\n\tsetupSocketInfo(chat)\n\tsetupSocketObjectRetrieval()\n\n\t// Emit join message,\n\tsocket.emit('playerJoin', { sender: chat.player, team: chat.team })\n}\n\n/**\n * Sets up socket object syncing.\n * Run in setupSocket().\n */\nfunction setupSocketObjectRetrieval () {\n\t// Syncs all objects from server once a frame\n\tsocket.on('objectSync', (data) => {\n\t\tfor (let objType in data) {\n\t\t\tif (objType !== 'tiles') {\n\t\t\t\tfor (let obj in data[objType]) {\n\t\t\t\t\tif (data[objType][obj] !== null) {\n\t\t\t\t\t\tlet objRef = data[objType][obj]\n\t\t\t\t\t\tlet clientObj = objects[objType][obj]\n\t\t\t\t\t\t// Already exists in database\n\t\t\t\t\t\tif (clientObj !== undefined && clientObj !== null) {\n\t\t\t\t\t\t\tif (objRef.id !== socket.id) {\n\t\t\t\t\t\t\t\tobjects[objType][obj].setData(objRef.posX, objRef.posY, objRef.vx, objRef.vy)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (objType === 'players') {\n\t\t\t\t\t\t\t\tobjects[objType][obj].health = objRef.health\n\t\t\t\t\t\t\t\tobjects[objType][obj].damagedBy = objRef.damagedBy\n\t\t\t\t\t\t\t\tobjects[objType][obj].atomList = objRef.atomList\n\t\t\t\t\t\t\t\tobjects[objType][obj].speedMult = objRef.speedMult\n\n\t\t\t\t\t\t\t\tif (objects[objType][obj].hasShield !== objRef.hasShield || objects[objType][obj].stronghold !== objRef.stronghold) {\n\t\t\t\t\t\t\t\t\tobjects[objType][obj].changeSprite(objRef.hasShield, objRef.stronghold)\n\t\t\t\t\t\t\t\t\tconsole.log('change tex')\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tobjects[objType][obj].hasShield = objRef.hasShield\n\t\t\t\t\t\t\t\tobjects[objType][obj].stronghold = objRef.stronghold\n\n\t\t\t\t\t\t\t\tfor (let atom in objRef.atomList) {\n\t\t\t\t\t\t\t\t\tupdateAtomList(atom)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (objType === 'compounds' && objRef.ignited) {\n\t\t\t\t\t\t\t\tobjects[objType][obj].ignited = objRef.ignited\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Does not exist - need to clone to clientside\n\t\t\t\t\t\telse if (isSetup) {\n\t\t\t\t\t\t\tswitch (objType) {\n\t\t\t\t\t\t\t\tcase 'players':\n\t\t\t\t\t\t\t\t\tobjects[objType][obj] = createPlayer(objRef)\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase 'atoms':\n\t\t\t\t\t\t\t\t\tobjects[objType][obj] = createRenderAtom(objRef)\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tcase 'compounds':\n\t\t\t\t\t\t\t\t\tobjects[objType][obj] = createRenderCompound(objRef)\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// else { //Tile drawing\n\t\t\t//     for (let tile of data.tiles) {\n\n\t\t\t//         let tileName = 'tile_' + tile.col + '_' + tile.row;\n\t\t\t//         if (objects.tiles[tileName] === undefined) {\n\t\t\t//             // console.log(tileName);\n\t\t\t//             objects.tiles[tileName] = new MapTile(MAP_LAYOUT[tile.row][tile.col], tile.col, tile.row);\n\t\t\t//         }\n\n\t\t\t//     }\n\t\t\t// }\n\t\t}\n\t})\n\n\t// Sync objects when they are deleted or move out of view. ONLY call after objectSync to avoid issue\n\tsocket.on('serverSendObjectRemoval', (data) => {\n\t\tif (GLOBAL.VERBOSE_SOCKET) {\n\t\t\tconsole.info('serverSendObjectRemoval() called on: ')\n\t\t\tconsole.info(data)\n\t\t\tconsole.info(objects[data.type][data.id])\n\t\t\tconsole.info(objects)\n\t\t}\n\t\tif (objects[data.type][data.id] === undefined || objects[data.type][data.id] === null) {\n\t\t\tif (GLOBAL.VERBOSE_SOCKET) {\n\t\t\t\tconsole.warn('serverSendObjectRemoval() called on invalid object. Retry.', data)\n\t\t\t}\n\t\t\tsetTimeout(() => {\n\t\t\t\ttry {\n\t\t\t\t\tif (removeObject(data)) {\n\t\t\t\t\t\tif (GLOBAL.VERBOSE_SOCKET) {\n\t\t\t\t\t\t\tconsole.info('Retry successfully removed object. While this worked, it should not happen. Please fix root cause of issue. ')\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 0\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (err) {\n\t\t\t\t\tif (GLOBAL.VERBOSE_SOCKET) {\n\t\t\t\t\t\tconsole.error('Retry failed. Object removal failed. Abandoning request. ')\n\t\t\t\t\t}\n\t\t\t\t\treturn 1\n\t\t\t\t}\n\t\t\t\t// removeObject(data);\n\t\t\t}, 1000 / 60)\n\t\t\t// return 1\n\t\t}\n\t\telse {\n\t\t\t// console.log(objects[data.type][data.id].destroyed);\n\t\t// An object was removed\n\t\t\tif (!objects[data.type][data.id].destroyed) { // Only remove if not already\n\t\t\t\tremoveObject(data)\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.warn('serverSendObjectRemoval() called despite object has already been destroyed.') // Sanity check\n\t\t\t\treturn 1\n\t\t\t}\n\t\t}\n\n\t\t// Must keep checking if the object was not created at time of destruction.\n\t\t// One example of this needing to be run is when a player instantly collects an atom on spawn.\n\t\t// if (objects[data.type][data.id] === undefined) {\n\t\t// \tlet thisInterval = setTimeout(() => {\n\t\t// \t\tif (objects[data.type][data.id].destroyed) {\n\t\t// \t\t\tclearInterval(thisInterval)\n\t\t// \t\t}\n\t\t// \t\telse {\n\t\t// \t\t\tremoveObject(data)\n\t\t// \t\t}\n\t\t// \t}, 200)\n\t\t// }\n\t})\n}\n\n/**\n * Sets up socket connection listeners.\n * Run in setupSocket().\n */\nfunction setupSocketConnection () {\n\t// On Connection Failure\n\tsocket.on('reconnect_failed', () => {\n\t\talert('You have lost connection to the server!')\n\t})\n\n\tsocket.on('reconnecting', (attempt) => {\n\t\tconsole.log('Lost connection. Reconnecting on attempt: ' + attempt)\n\t\tquitGame('Lost connection to server')\n\t})\n\n\tsocket.on('reconnect_error', (err) => {\n\t\tconsole.log('CRITICAL: Reconnect failed! ' + err)\n\t})\n\n\tsocket.on('pong', (ping) => {\n\t\tconsole.log('Your Ping Is: ' + ping)\n\t})\n\n\tsocket.on('disconnectedPlayer', (data) => {\n\t\tconsole.log('Player ' + data.id + ' has disconnected')\n\t\tchat.addSystemLine('Player ' + objects.players[data.id].name + ' has disconnected')\n\t\tif (objects.players[data.id] !== undefined) {\n\t\t\tobjects.players[data.id].hide()\n\t\t\tdelete objects.players[data.id]\n\t\t}\n\t})\n\n\tsocket.on('serverSendDisconnect', () => {\n\t\tquitGame('The game has ended.', false)\n\t\thideElement('winner-panel')\n\t})\n\n\t// Errors on join\n\tsocket.on('connectionError', (data) => {\n\t\tsocket.disconnect()\n\t\tquitGame(data.msg, true)\n\t})\n}\n\n/**\n * Sets up socket information transfer listeners.\n * Run in setupSocket().\n * @param {*} chat The chat client instance to be used for notifications\n */\nfunction setupSocketInfo (chat) {\n\t// Chat system receiver\n\tsocket.on('serverMSG', data => {\n\t\tchat.addSystemLine(data)\n\t})\n\n\tsocket.on('serverAnnouncement', data => {\n\t\tchat.addChatAnnouncement(data.message, data.sendingTeam)\n\t})\n\n\tsocket.on('serverSendPlayerChat', data => {\n\t\tchat.addChatLine(data.sender, data.message, false, data.sendingTeam)\n\t})\n\n\tsocket.on('serverSendLoginMessage', data => {\n\t\tchat.addLoginMessage(data.sender, false)\n\t})\n\n\t// Receive information about room players\n\tsocket.on('roomInfo', (data) => {\n\t\t// Update lobby info. Pass to app.js\n\t\tupdateLobby(data)\n\n\t\t// if(GLOBAL.DEBUG) {\n\t\t//     console.log(\"rcvd: \",data);\n\t\t// }\n\t})\n\n\tsocket.on('serverSendStartGame', (data) => {\n\t\tconsole.log('game has started')\n\t\tstartGame(false, data.teams)\n\t})\n\n\tsocket.on('levelUp', (data) => {\n\t\tconsole.log('You LEVELED UP! Level: ' + data.newLevel)\n\t})\n\n\t// Respawn\n\tsocket.on('serverSendPlayerDeath', (data) => {\n\t\tconsole.log('You Died!')\n\t\tobjects.players[socket.id].setData(data.posX, data.posY, data.vx, data.vy)\n\t\tsocket.emit('verifyPlayerDeath', { id: socket.id })\n\t\tconsole.log(objects.players[socket.id])\n\t\tupdateAtomList()\n\t})\n\n\t// Another player died\n\tsocket.on('serverSendNotifyPlayerDeath', (data) => {\n\t\t// Append to chat TODO\n\t})\n\n\t// Update timer\n\tsocket.on('time', (data) => {\n\t\tdocument.getElementById('timer').innerHTML = '<p>' + data.time + '</p>'\n\t})\n\n\t// Update scores\n\tsocket.on('serverSendScoreUpdate', (data) => {\n\t\tupdateScores(data.teamSlot, data.increment)\n\t})\n\n\t// A player has won\n\tsocket.on('serverSendWinner', (data) => {\n\t\tsetIngame(false) // Disable keyboard controls and rendering\n\t\tdisplayWinner(data)\n\t})\n\n\t// Sync team colors\n\tsocket.on('serverSendTeamColors', (data) => {\n\t\tteamColors = data\n\t\tconsole.log(teamColors)\n\t})\n\n\t// Change texture when a tile has been captured\n\tsocket.on('serverSendTileCapture', (data) => {\n\t\tobjects.tiles['tile_' + data.tileX + '_' + data.tileY].texture = (spritesheet.textures[data.teamNumber + objects.tiles['tile_' + data.tileX + '_' + data.tileY].tile.texture])\n\t\t// console.log(objects.tiles['tile_' + data.tileY + '_' + data.tileX].texture)\n\t})\n\n\t// Tile health changed\n\tsocket.on('serverSendTileHealth', (data) => {\n\t\tobjects.tiles['tile_' + data.tileX + '_' + data.tileY].updateHealth(data.newHealth)\n\t})\n}\n\n/*\n ********************\n * Helper Functions *\n ********************\n*/\n\n// Helper function for serverSendObjectRemoval\nfunction removeObject (data) {\n\tif (objects[data.type][data.id] !== undefined && objects[data.type][data.id] !== null) {\n\t\tobjects[data.type][data.id].hide()\n\t\tobjects[data.type][data.id].destroy()\n\t\t// delete objects[data.type][data.id];\n\t\treturn true\n\t}\n\telse {\n\t\treturn false\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/client/js/socket.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "objects",
    "memberof": "src/client/js/socket.js",
    "static": true,
    "longname": "src/client/js/socket.js~objects",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{objects}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"players\": *, \"atoms\": *, \"compounds\": *, \"tiles\": *}"
      ]
    }
  },
  {
    "__docId__": 208,
    "kind": "variable",
    "name": "teamColors",
    "memberof": "src/client/js/socket.js",
    "static": true,
    "longname": "src/client/js/socket.js~teamColors",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{teamColors}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "beginConnection",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~beginConnection",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{beginConnection}",
    "description": "Attempts to connect to the server. Run on 'start game' press.\n - Manages connecting to main server vs. devserver\n - Sets up socket listeners\n - Loads textures\n - Loads pixi",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "disconnect",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~disconnect",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": "{disconnect}",
    "description": "Run on disconnect to reset all server-based variables and connections",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "function",
    "name": "setupSocket",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~setupSocket",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": "First time setup when connection starts. Run on connect event to ensure that the socket is connected first.",
    "lineNumber": 98,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "setupSocketObjectRetrieval",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~setupSocketObjectRetrieval",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": "Sets up socket object syncing.\nRun in setupSocket().",
    "lineNumber": 120,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "function",
    "name": "setupSocketConnection",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~setupSocketConnection",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": "Sets up socket connection listeners.\nRun in setupSocket().",
    "lineNumber": 249,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "function",
    "name": "setupSocketInfo",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~setupSocketInfo",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": "Sets up socket information transfer listeners.\nRun in setupSocket().",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "chat",
        "description": "The chat client instance to be used for notifications"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "removeObject",
    "memberof": "src/client/js/socket.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/js/socket.js~removeObject",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/client/js/socket.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "src/server/entry.js",
    "content": "/**\n * ENTRY POINT for server.js.\n * Uses babel to compile es6 into\n */\nrequire('babel-register')({\n\tpresets: ['env']\n})\n\nmodule.exports = require('./server.js')\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/entry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "src/server/server.js",
    "content": "const express = require('express')\nconst app = express()\nconst http = require('http').Server(app)\nconst io = require('socket.io')(http)\nimport colors from 'colors' // Console colors :D\nimport { GLOBAL } from '../client/js/global'\nimport { roomMatchmaker } from './utils/matchmaker'\nimport { initGlobal, initPlayer } from './utils/serverinit'\nimport { frameSync } from './utils/framesync'\nimport { damage } from './utils/ondamage'\nimport { createCompound } from './utils/compound'\nimport { spawnAtomAtVent } from './utils/atoms'\nimport { getTeamColors } from './utils/serverutils'\nvar config = require('./config.json')\n\nconst DEBUG = true\n\napp.use(express.static(`${__dirname}/../client`))\n\n/* Contains all game data, including which rooms and players are active.\n *\n * Structure of Rooms object:\n *\n// rooms = {\n//     roomName: {\n//         joinable: true,\n//         type: '4v4',\n//         teams: [\n//             name: 'teamname',\n//             players: ['id1', 'id2'...]\n//         ],\n//         players: { id, name, room, team, health, posX, posY, vx, vy, dead, experience, damagedBy, stronghold },\n//         atoms: { typeID, id, posX, posY, vx, vy, team },\n//         compounds: {\tid, posX, posY, vx, vy, blueprint, sendingTeam, sender },\n//\t\t   tiles: { id, type, globalX, globalY, captured, owner, health }\n//         time: {\n//             minutes: 0,\n//             seconds: 0,\n//             formattedTime: '0:00'\n//         }\n//     }\n// }\n*/\nlet rooms = {}\n\n/**\n * Teams object containing all the currently playing teams.\n * Structure:\n * teamName: {\n *    room: 'roomName',\n *    players: ['playerSocketId', 'player2SocketId', ...],\n *    joinable: false/true\n * }\n *\n * -> Create a Team when the first player joins any lobby. Populate room when this occurs.\n * -> Change joinable to false when a Team is either full or the game has begun.\n * -> Delete the room from the database when the last player leaves.\n * -> There cannot be two teams with the same name. Throw an error if this occurs.\n */\nlet teams = {}\n\n// Initializize Server. Includes atom spawning and timer mechanics\ninitGlobal()\n\n// Initialize all socket listeners when a request is established\nio.on('connection', socket => {\n\t// Local variable declaration\n\tlet room = socket.handshake.query.room\n\tlet team = socket.handshake.query.team\n\n\t// Run matchmaker\n\tlet matchData = roomMatchmaker(socket, room, team)\n\troom = matchData.room\n\tteam = matchData.team\n\n\t// Init player\n\tinitPlayer(socket, room, team)\n\tlet thisPlayer = rooms[room].players[socket.id]\n\tthisPlayer.team = team\n\tthisPlayer.atomList = {}\n\tthisPlayer.speedMult = 1\n\tfor (let atom of GLOBAL.ATOM_IDS) {\n\t\tthisPlayer.atomList[atom] = 0\n\t}\n\n\t// Announce colors\n\tsocket.emit('serverSendTeamColors', getTeamColors(room))\n\tsocket.to(room).emit('serverSendTeamColors', getTeamColors(room))\n\n\t// Setup player array sync- once a frame\n\tsetInterval(() => {\n\t\tframeSync(socket, room, thisPlayer)\n\t}, 1000 / 60)\n\n\t// Receives a chat from a player, then broadcasts it to other players\n\tsocket.to(room).on('playerChat', data => {\n\t\t// console.log('sender: ' + data.sender);\n\t\tconst _sender = data.sender.replace(/(<([^>]+)>)/ig, '')\n\t\tconst _message = data.message.replace(/(<([^>]+)>)/ig, '')\n\n\t\tconsole.log('[CHAT] '.bold.blue + `${(new Date()).getHours()}:${(new Date()).getMinutes()} ${_sender}: ${_message}`.magenta)\n\n\t\tsocket.to(room).broadcast.emit('serverSendPlayerChat', { sender: _sender, message: _message.substring(0, 35), sendingTeam: data.sendingTeam })\n\t})\n\n\t// Other player joins the socket.to(room)\n\tsocket.to(room).on('playerJoin', data => {\n\t\t// console.log('sender: ' + data.sender);\n\t\tconst _sender = data.sender.replace(/(<([^>]+)>)/ig, '')\n\t\tsocket.to(room).broadcast.emit('serverSendLoginMessage', { sender: _sender, team: data.team })\n\t\tif (DEBUG) {\n\t\t\tsocket.to(room).broadcast.emit('serverMSG', 'You are connected to a DEBUG enabled server. ')\n\t\t}\n\t})\n\n\t// Broadcasts player join message\n\n\tsocket.to(room).broadcast.emit('serverSendLoginMessage', {\n\t\tsender: socket.id\n\t})\n\tif (DEBUG) {\n\t\tsocket.to(room).broadcast.emit('serverMSG', 'You are connected to a DEBUG enabled server. ')\n\t}\n\n\t// Hides the lobby screen if the game has already started\n\tif (rooms[room].started) {\n\t\tsocket.emit('serverSendStartGame', { teams: rooms[room].teams })\n\t}\n\n\t/**\n   * On player movement:\n   * data is in format\n   *  - id: index of player that moved\n   *  - type: atoms, players, or compounds\n   *  - posX: new x position\n   *  - posY: new y position\n   *  - vx: x-velocity\n   *  - vy: y-velocity\n   */\n\tsocket.to(room).on('move', data => {\n\t\t// Player exists in database already because it was created serverside - no need for extra checking\n\t\tif (rooms[room][data.type][data.id] !== undefined && !rooms[room][data.type][data.id].dead) {\n\t\t\trooms[room][data.type][data.id].posX = data.posX\n\t\t\trooms[room][data.type][data.id].posY = data.posY\n\t\t\trooms[room][data.type][data.id].vx = data.vx\n\t\t\trooms[room][data.type][data.id].vy = data.vy\n\t\t}\n\t})\n\n\tsocket.to(room).on('damage', data => {\n\t\tdamage(data, room, socket)\n\t})\n\n\tsocket.on('verifyPlayerDeath', data => {\n\t\trooms[room].players[data.id].dead = false\n\t})\n\n\t// A player spawned a Compound\n\tsocket.to(room).on('requestCreateCompound', data => {\n\t\tlet newCompound = createCompound(data, room, thisPlayer, socket)\n\t\tif (newCompound) {\n\t\t\trooms[room].compounds[newCompound.id] = newCompound\n\t\t}\n\t})\n\n\tsocket.on('startGame', data => {\n\t\tconsole.log('Game has started in room ' + room)\n\t\t// Make the room and teams unjoinable\n\t\tfor (let tm of rooms[room].teams) {\n\t\t\tteams[tm.name].joinable = false\n\t\t}\n\t\trooms[room].joinable = false\n\n\t\tsocket.broadcast.to(room).emit('serverSendStartGame', { start: data.start, teams: rooms[room].teams })\n\t\tsocket.emit('serverSendStartGame', { start: data.start, teams: rooms[room].teams })\n\t\trooms[room].started = true\n\t})\n\n\t// Testing purposes- give yourself 5000 of each atom\n\tsocket.on('testCommand', (data) => {\n\t\tif (GLOBAL.DEBUG) {\n\t\t\t// console.log(rooms[room].players[data.player].atomList)\n\t\t\tfor (let i in rooms[room].players[data.player].atomList) {\n\t\t\t\trooms[room].players[data.player].atomList[i] += 5000\n\t\t\t}\n\t\t}\n\t})\n\n\tsocket.on('disconnect', data => {\n\t\tconsole.log('[Server]'.bold.blue + ' Disconnect Received: '.red + ('' + socket.id).yellow + ('' + rooms[room].players[socket.id]).green + ': ' + data)\n\n\t\tsocket.to(room).broadcast.emit('disconnectedPlayer', { id: socket.id }) // Broadcast to everyone in the room to delete the player\n\n\t\tdelete rooms[room].players[socket.id] // Remove the server side player\n\n\t\t// Delete room if there is nobody inside\n\t\tif (Object.keys(rooms[room].players).length === 0) {\n\t\t\tconsole.log('[Server] '.bold.blue + 'Closing room '.red + (room + '').bold.red)\n\t\t\tdelete io.sockets.adapter.rooms[socket.id]\n\t\t\tdelete rooms[room]\n\n\t\t\tif (room !== GLOBAL.NO_ROOM_IDENTIFIER) {\n\t\t\t\t// Remove from teams array\n\t\t\t\tteams[team].players.splice(teams[team].players.indexOf(socket.id), 1)\n\t\t\t\t// rooms[room].teams[team].players.splice(rooms[room].teams[team].players.indexOf(socket.id), 1);\n\n\t\t\t\t// Delete team if all players have left\n\t\t\t\tif (teams[team].players.length === 0) {\n\t\t\t\t\tdelete teams[team]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n})\n\n// Notify on console when server has started\nconst serverPort = process.env.PORT || config.port\nhttp.listen(serverPort, () => {\n\trooms = {}\n\tconsole.log('[Server] '.bold.blue + `started on port: ${serverPort}`.blue)\n})\n\n/**\n * Sets a new value for a protected server field.\n * Adopted from https://stackoverflow.com/questions/18936915/dynamically-set-property-of-nested-object\n * @param {*} value The value to set\n * @param {*} path Array containing all of the subobject identifiers, with the 0th index being the lowest level.\n *                 Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']\n */\nexport function setField (value, path) {\n\tif (path === undefined || path.length === 0) {\n\t\tthrow new Error('Error in setField: path cannot be empty')\n\t}\n\n\tlet schema = (path[0] === 'rooms') ? rooms : (path[0] === 'teams') ? teams : undefined\n\tif (schema === undefined) {\n\t\tthrow new Error('Base object ' + path[0] + ' does not exist!')\n\t}\n\n\tlet len = path.length\n\tfor (let i = 1; i < len - 1; i++) {\n\t\tlet elem = path[i]\n\t\tif (!schema[elem]) schema[elem] = {}\n\t\tschema = schema[elem]\n\t}\n\n\tschema[path[len - 1]] = value\n}\n\n/**\n * Shorthand to add or concatenate an amount to a field.\n * Best used with numbers or strings.\n * @param {*} amount Amount to increment the field by.\n * @param {*} path Path to the field.\n */\nexport function incrementField (amount, path) {\n\tsetField(getField(path) + amount, path)\n}\n\n/**\n * Returns the value given a path to that value.\n * Adopted from https://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key\n * @param {*} path Array containing all of the subobject identifiers, with the 0th index being the lowest level.\n *                 Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']\n * @returns The value for the given field.\n */\nexport function getField (path) {\n\tif (path === undefined || path.length === 0) {\n\t\tthrow new Error('Error in setField: path cannot be empty')\n\t}\n\tif (path.length === undefined) {\n\t\tthrow new Error('Error in setField: path must be an array')\n\t}\n\n\tlet obj = (path[0] === 'rooms') ? rooms : (path[0] === 'teams') ? teams : undefined\n\tif (obj === undefined) {\n\t\tthrow new Error('Error in setField: Base object ' + path[0] + ' does not exist!')\n\t}\n\n\tfor (let i = 1; i < path.length; i++) {\n\t\tobj = obj[path[i]]\n\t}\n\t// console.log(path, obj);\n\treturn obj\n}\n\n/**\n * Deletes one of the three types of gameObjects synced to the server\n * @param {string} type Either players, atoms, compounds\n * @param {*} id ID of the object to delete\n * @param {string} room Room name to delete in\n * @param {*} socket socket.io instance\n */\nexport function deleteObject (type, id, room, socket) {\n\tdelete rooms[room][type][id]\n\n\t// Send clientside message\n\tsocket.to(room).broadcast.emit('serverSendObjectRemoval', { id: id, type: type })\n\tsocket.emit('serverSendObjectRemoval', { id: id, type: type })\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "variable",
    "name": "express",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~express",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "variable",
    "name": "app",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~app",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "http",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~http",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "variable",
    "name": "io",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~io",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 222,
    "kind": "variable",
    "name": "config",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~config",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "DEBUG",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~DEBUG",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "variable",
    "name": "rooms",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~rooms",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 225,
    "kind": "variable",
    "name": "teams",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~teams",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": "Teams object containing all the currently playing teams.\nStructure:\nteamName: {\n   room: 'roomName',\n   players: ['playerSocketId', 'player2SocketId', ...],\n   joinable: false/true\n}\n\n-> Create a Team when the first player joins any lobby. Populate room when this occurs.\n-> Change joinable to false when a Team is either full or the game has begun.\n-> Delete the room from the database when the last player leaves.\n-> There cannot be two teams with the same name. Throw an error if this occurs.",
    "lineNumber": 60,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "serverPort",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~serverPort",
    "access": "public",
    "export": false,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "setField",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~setField",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{setField}",
    "description": "Sets a new value for a protected server field.\nAdopted from https://stackoverflow.com/questions/18936915/dynamically-set-property-of-nested-object",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The value to set"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Array containing all of the subobject identifiers, with the 0th index being the lowest level.\n                Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']"
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "incrementField",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~incrementField",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{incrementField}",
    "description": "Shorthand to add or concatenate an amount to a field.\nBest used with numbers or strings.",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount to increment the field by."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path to the field."
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "getField",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~getField",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{getField}",
    "description": "Returns the value given a path to that value.\nAdopted from https://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key",
    "lineNumber": 267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The value for the given field."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Array containing all of the subobject identifiers, with the 0th index being the lowest level.\n                Example: rooms.myRoom.players could be accessed through a path value of ['rooms', 'myRoom', 'players']"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The value for the given field."
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "deleteObject",
    "memberof": "src/server/server.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/server.js~deleteObject",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/server.js",
    "importStyle": "{deleteObject}",
    "description": "Deletes one of the three types of gameObjects synced to the server",
    "lineNumber": 294,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Either players, atoms, compounds"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "ID of the object to delete"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Room name to delete in"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "socket.io instance"
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "file",
    "name": "src/server/utils/atoms.js",
    "content": "/**\n * Manages the atom list and atom usage for players.\n */\nimport { incrementField, getField, setField } from '../server'\nimport { generateID } from './serverutils'\nimport { GLOBAL } from '../../client/js/global'\nimport { TILES, TILE_NAMES, MAP_LAYOUT } from '../../client/js/obj/tiles'\n\nexport function incrementAtom (player, room, atomType, quantity) {\n\t// console.log(atomType);\n\tincrementField(quantity, ['rooms', room, 'players', player, 'atomList', atomType])\n}\n\nexport function canCraft (player, room, blueprint) {\n\t// console.log(player);\n\tif (blueprint === undefined) {\n\t\treturn false\n\t}\n\tfor (let atom in blueprint.atoms) {\n\t\tlet numAtoms = getField(['rooms', room, 'players', player.id, 'atomList', atom])\n\t\tif (numAtoms === undefined || numAtoms < blueprint.atoms[atom]) {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\n/**\n * Spawns an atom at the vent at the given row and column.\n * @param {number} row The row of the vent\n * @param {number} col The column of the vent to spawn at\n * @param {string} room The room to spawn in\n * @param {string} team The team that can pick up this atom. Set to 'all' for neutral spawns.\n * @param {boolean} verbose True if this method should output to the console\n */\nexport function spawnAtomAtVent (row, col, room, team, verbose) {\n\t// Atom to spawn. Gets a random element from the tile paramter array `atomsToSpawn`\n\tlet atomToSpawn = TILES[TILE_NAMES[MAP_LAYOUT[row][col]]].params.atomsToSpawn[Math.floor(Math.random() * TILES[TILE_NAMES[MAP_LAYOUT[row][col]]].params.atomsToSpawn.length)]\n\n\tlet x = col * GLOBAL.GRID_SPACING * 2 + GLOBAL.GRID_SPACING\n\tlet y = row * GLOBAL.GRID_SPACING * 2 - GLOBAL.GRID_SPACING\n\n\tspawnAtom(x, y, atomToSpawn, room, team, verbose)\n}\n\n/**\n *\n * @param {number} x X-position of center\n * @param {number} y Y-position of center\n * @param {string} type Type of atom to spawn\n * @param {string} room The room to spawn in\n * @param {string} team The team that can pick up this atom. Set to 'all' for neutral spawns.\n * @param {boolean} verbose True if this method should output to the console\n */\nexport function spawnAtom (x, y, type, room, team, verbose) {\n\tlet theta = Math.random() * Math.PI * 2 // Set random direction for atom to go in once spawned\n\n\tlet atom = {\n\t\ttypeID: type,\n\t\tid: generateID(),\n\t\tposX: x,\n\t\tposY: y,\n\t\tvx: Math.cos(theta) * GLOBAL.ATOM_SPAWN_SPEED,\n\t\tvy: Math.sin(theta) * GLOBAL.ATOM_SPAWN_SPEED,\n\t\tteam: team\n\t}\n\tif (getField(['rooms', room]) !== undefined) {\n\t\tsetField(atom, ['rooms', room, 'atoms', atom.id])\n\t}\n\n\t// Log to console\n\tif (verbose) {\n\t\tconsole.log('SPAWN ATOM ' + type + ' theta:' + theta + ', vx: ' + atom.vx + ', vy: ' + atom.vy)\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/atoms.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "incrementAtom",
    "memberof": "src/server/utils/atoms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/atoms.js~incrementAtom",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/atoms.js",
    "importStyle": "{incrementAtom}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "room",
        "types": [
          "*"
        ]
      },
      {
        "name": "atomType",
        "types": [
          "*"
        ]
      },
      {
        "name": "quantity",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "canCraft",
    "memberof": "src/server/utils/atoms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/atoms.js~canCraft",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/atoms.js",
    "importStyle": "{canCraft}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "room",
        "types": [
          "*"
        ]
      },
      {
        "name": "blueprint",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "function",
    "name": "spawnAtomAtVent",
    "memberof": "src/server/utils/atoms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/atoms.js~spawnAtomAtVent",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/atoms.js",
    "importStyle": "{spawnAtomAtVent}",
    "description": "Spawns an atom at the vent at the given row and column.",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "row",
        "description": "The row of the vent"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "col",
        "description": "The column of the vent to spawn at"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to spawn in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "The team that can pick up this atom. Set to 'all' for neutral spawns."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "True if this method should output to the console"
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "spawnAtom",
    "memberof": "src/server/utils/atoms.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/atoms.js~spawnAtom",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/atoms.js",
    "importStyle": "{spawnAtom}",
    "description": "",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X-position of center"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y-position of center"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Type of atom to spawn"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room to spawn in"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "The team that can pick up this atom. Set to 'all' for neutral spawns."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "verbose",
        "description": "True if this method should output to the console"
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/server/utils/collision.js",
    "content": "import { distanceBetween, GLOBAL, getCurrTile, getGlobalLocation } from '../../client/js/global'\nimport { deleteObject, getField } from '../server'\nimport { damage, damageTile } from './ondamage'\nimport { incrementAtom } from './atoms'\nimport { TILE_NAMES, TILES } from '../../client/js/obj/tiles'\nimport { getTileID } from './serverutils'\n\n/**\n * Runs once a frame, checks for collisions between objects and handles them accordingly.\n * Run using\n * @param {*} socket The socket.io instance\n * @param {string} room The name of the room\n * @param {*} thisPlayer The player object\n * @param {*} tempObjects The list of objects to tick. Should only be the objects rendered on the screen of thisPlayer. Contains compounds, atoms, players\n */\nexport function collisionDetect (socket, room, thisPlayer, tempObjects) {\n\t// Check for collected atoms\n\tfor (let atom in tempObjects.atoms) {\n\t\tif (tempObjects.atoms[atom].team === thisPlayer.team || tempObjects.atoms[atom].team === 'all') {\n\t\t\tlet distance = distanceBetween(\n\t\t\t\t{ posX: tempObjects.atoms[atom].posX + GLOBAL.ATOM_RADIUS, posY: tempObjects.atoms[atom].posY - GLOBAL.ATOM_RADIUS },\n\t\t\t\t{ posX: thisPlayer.posX + GLOBAL.PLAYER_RADIUS, posY: thisPlayer.posY - GLOBAL.PLAYER_RADIUS })\n\n\t\t\tif (distance < GLOBAL.ATOM_COLLECT_THRESHOLD) {\n\t\t\t\t// console.log(atom);\n\t\t\t\tincrementAtom(thisPlayer.id, room, tempObjects.atoms[atom].typeID, 1)\n\t\t\t\tsocket.to(room).broadcast.emit('serverSendObjectRemoval', { id: atom, type: 'atoms' })\n\n\t\t\t\tdeleteObject('atoms', atom, room, socket)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check for compound collisions\n\tfor (let compound in tempObjects.compounds) {\n\t\tlet cmp = tempObjects.compounds[compound]\n\n\t\tif (cmp.sendingTeam !== thisPlayer.team) {\n\t\t\tlet distance = distanceBetween(\n\t\t\t\t{ posX: cmp.posX + cmp.blueprint.params.size / 2, posY: cmp.posY - cmp.blueprint.params.size / 2 },\n\t\t\t\t{ posX: thisPlayer.posX + GLOBAL.PLAYER_RADIUS, posY: thisPlayer.posY - GLOBAL.PLAYER_RADIUS })\n\n\t\t\t// Hit player\n\t\t\tif (distance < cmp.blueprint.params.size + GLOBAL.PLAYER_RADIUS) {\n\t\t\t\tlet dmg = cmp.blueprint.params.damage\n\n\t\t\t\t// Deal splash damage if it is a toxic compound or on fire\n\t\t\t\tif (cmp.blueprint.type === 'toxic' || cmp.ignited) {\n\t\t\t\t\tdmg = cmp.blueprint.params.splashDamage\n\t\t\t\t}\n\n\t\t\t\tdamage({\n\t\t\t\t\tdamage: dmg,\n\t\t\t\t\tplayer: socket.id,\n\t\t\t\t\tsentBy: cmp.sender,\n\t\t\t\t\tid: compound\n\t\t\t\t}, room, socket)\n\n\t\t\t\tif (cmp.blueprint.type !== 'toxic' && !cmp.ignited) {\n\t\t\t\t\tdeleteObject('compounds', compound, room, socket)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Barrier block collisions\n\t\t\tif (cmp.blueprint.type === 'block') {\n\t\t\t\tfor (let otherCompound in tempObjects.compounds) {\n\t\t\t\t\tlet othercmp = tempObjects.compounds[otherCompound]\n\n\t\t\t\t\tif (cmp.sendingTeam !== othercmp.sendingTeam && othercmp.blueprint.type !== 'block') {\n\t\t\t\t\t\tlet distance = distanceBetween(\n\t\t\t\t\t\t\t{ posX: cmp.posX + cmp.blueprint.params.size / 2, posY: cmp.posY - cmp.blueprint.params.size / 2 },\n\t\t\t\t\t\t\t{ posX: othercmp.posX + othercmp.blueprint.params.size / 2, posY: othercmp.posY - othercmp.blueprint.params.size / 2 }\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tif (distance < cmp.blueprint.params.size + othercmp.blueprint.params.size) {\n\t\t\t\t\t\t\t// Delete both compounds. TODO deal damage to higher level barrier blocks\n\t\t\t\t\t\t\tdeleteObject('compounds', compound, room, socket)\n\t\t\t\t\t\t\tdeleteObject('compounds', otherCompound, room, socket)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse { // check for tile collisions\n\t\t\tlet tileID = getTileID(getGlobalLocation(cmp), room)\n\t\t\tif (tileID) {\n\t\t\t\tif (distanceBetween(cmp, {\n\t\t\t\t\tposX: getGlobalLocation(cmp).globalX * GLOBAL.GRID_SPACING * 2 + GLOBAL.GRID_SPACING,\n\t\t\t\t\tposY: getGlobalLocation(cmp).globalY * GLOBAL.GRID_SPACING * 2 - GLOBAL.GRID_SPACING\n\t\t\t\t}) < GLOBAL.STRONGHOLD_RADIUS && cmp.blueprint.type !== 'block' && cmp.sendingTeam !== getField(['rooms', room, 'tiles', tileID, 'owner'])) {\n\t\t\t\t\tdeleteObject('compounds', compound, room, socket)\n\t\t\t\t\tdamageTile(tileID, cmp.blueprint.params.damage, socket.id, room, socket)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check for stronghold buff\n\tlet currTile = getTileID(getGlobalLocation(thisPlayer), room)\n\tif (currTile && getField(['rooms', room, 'tiles', currTile, 'type']) === 'stronghold' && getField(['rooms', room, 'tiles', currTile, 'owner']) !== 'all') {\n\t\tthisPlayer.stronghold = (getField(['rooms', room, 'tiles', currTile, 'owner']) === thisPlayer.team) ? 'team' : 'notteam'\n\t}\n\telse {\n\t\tthisPlayer.stronghold = 'none'\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/collision.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "collisionDetect",
    "memberof": "src/server/utils/collision.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/collision.js~collisionDetect",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/collision.js",
    "importStyle": "{collisionDetect}",
    "description": "Runs once a frame, checks for collisions between objects and handles them accordingly.\nRun using",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "The socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The name of the room"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "thisPlayer",
        "description": "The player object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tempObjects",
        "description": "The list of objects to tick. Should only be the objects rendered on the screen of thisPlayer. Contains compounds, atoms, players"
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/server/utils/compound.js",
    "content": "/**\n * Manages compound creation and behavior.\n * Moved from clientside compound.js\n */\nimport { GLOBAL, getCurrTile } from '../../client/js/global'\nimport { canCraft } from './atoms'\nimport { generateID } from './serverutils'\nimport { incrementField, setField, deleteObject } from '../server'\nimport { damage } from './ondamage'\nimport { addExperience } from './experience'\n\n/**\n  * Checks if a compound can be created, deducts craft material, and returns the new compound.\n  * Does NOT add the new compound to the objects array.\n  * @param data - Data sent from the client.\n  *  - blueprint: The blueprint of the compound to create\n  *  - sendingTeam: Team of the player who sent this\n  *  - mousePos: Mouse position of the player who sent this. Contains x and y components\n  *  - sender: Player who sent this\n  *  - streamID: number indicating the consecutive compounds requested on this current mouse hold.\n  * @param {string} room - The name of the room\n  * @param thisPlayer - The current player instance\n  * @param socket - Socket.io instance\n  */\nexport function createCompound (data, room, thisPlayer, socket) {\n\tif (!canCraft(thisPlayer, room, data.blueprint)) {\n\t\treturn false\n\t}\n\n\t// Calculate velocities based on cursor position\n\tlet theta = Math.atan2(data.mousePos.y, data.mousePos.x)\n\tlet newCompound = {\n\t\tid: generateID(),\n\t\tposX: thisPlayer.posX + GLOBAL.PLAYER_RADIUS,\n\t\tposY: thisPlayer.posY - GLOBAL.PLAYER_RADIUS,\n\t\tvx: thisPlayer.vx + data.blueprint.params.speed * Math.cos(theta),\n\t\tvy: thisPlayer.vy + data.blueprint.params.speed * Math.sin(theta),\n\t\tblueprint: data.blueprint,\n\t\tsendingTeam: data.sendingTeam,\n\t\tsender: data.sender\n\t}\n\t// console.log(\"This player: \");\n\t// console.log(thisPlayer);\n\t// Add functionality for specific blueprint types\n\tif (data.blueprint.type === 'speed') {\n\t\tincrementField(data.blueprint.params.speedFactor * (1 / thisPlayer.speedMult), ['rooms', room, 'players', thisPlayer.id, 'speedMult'])\n\t}\n\telse if (data.blueprint.type === 'health') {\n\t\tdamage({\n\t\t\tdamage: -data.blueprint.params.healthModifier,\n\t\t\tsender: socket.id\n\t\t}, room, socket)\n\t\tif (thisPlayer.health > GLOBAL.MAX_HEALTH) {\n\t\t\tsetField(GLOBAL.MAX_HEALTH, ['rooms', room, 'players', thisPlayer.id, 'health'])\n\t\t}\n\t}\n\telse if (data.blueprint.type === 'defense') {\n\t\tsetField(true, ['rooms', room, 'players', thisPlayer.id, 'hasShield'])\n\t}\n\telse if (data.blueprint.type === 'block') {\n\t\tnewCompound.vx = newCompound.vy = 0\n\t}\n\n\t// Emits the crafting event to update experience\n\taddExperience('CRAFT', socket, room, thisPlayer.id)\n\n\t// Remove atoms from inventory\n\tif (!data.streamID || data.streamID % data.blueprint.params.compoundsPerCraft === 0 || data.streamID === 1) {\n\t\tfor (let atom in data.blueprint.atoms) {\n\t\t\tincrementField(-data.blueprint.atoms[atom], ['rooms', room, 'players', thisPlayer.id, 'atomList', atom])\n\t\t}\n\t}\n\n\treturn newCompound\n}\n\n/**\n * Checks compound behavior based on compound type. Runs once a frame.\n * @param {number} compound compound object\n * @param {string} room Name of room\n * @param socket - Socket.io instance\n */\nexport function tickCompound (compound, room, socket) {\n\t// TODO\n\tswitch (compound.blueprint.type) {\n\t\tcase 'flammable':\n\t\t\tif (getCurrTile(compound) === 'F' && !compound.ignited) {\n\t\t\t\tsetField(true, ['rooms', room, 'compounds', compound.id, 'ignited'])\n\t\t\t\t// compound.ignited = true (above statement)\n\t\t\t\t// compound.texture = PIXI.loader.resources[GLOBAL.IGNITE_SPRITE].texture; moved to client\n\t\t\t}\n\t\t\tbreak\n\t}\n\n\tif (compound.blueprint.params.evaporate) {\n\t\tif (getCurrTile(compound) === 'F') {\n\t\t\tdeleteObject('compounds', compound.id, room, socket)\n\t\t}\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/compound.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "createCompound",
    "memberof": "src/server/utils/compound.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/compound.js~createCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/compound.js",
    "importStyle": "{createCompound}",
    "description": "Checks if a compound can be created, deducts craft material, and returns the new compound.\nDoes NOT add the new compound to the objects array.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data sent from the client.\n - blueprint: The blueprint of the compound to create\n - sendingTeam: Team of the player who sent this\n - mousePos: Mouse position of the player who sent this. Contains x and y components\n - sender: Player who sent this\n - streamID: number indicating the consecutive compounds requested on this current mouse hold."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The name of the room"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "thisPlayer",
        "description": "The current player instance"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket.io instance"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "function",
    "name": "tickCompound",
    "memberof": "src/server/utils/compound.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/compound.js~tickCompound",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/compound.js",
    "importStyle": "{tickCompound}",
    "description": "Checks compound behavior based on compound type. Runs once a frame.",
    "lineNumber": 83,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "compound",
        "description": "compound object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Name of room"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket.io instance"
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "src/server/utils/experience.js",
    "content": "import { incrementField, getField, setField } from '../server'\nimport { GLOBAL } from '../../client/js/global'\n\n/**\n * Manages experience levels, levelling up, and level tiers.\n * TODO LOTS to do here!!!!!\n */\n\n/**\n * Adds experience to a given player.\n * @param {string} event The name of the event as specified in GLOBAL.EXPERIENCE_VALUES\n * @param {*} socket The socket instance\n * @param {string} room The ID of the room\n * @param {string} player ID of the player\n */\nexport function addExperience (event, socket, room, player) {\n\t// Add a specific amount to the players experience\n\t// Get the index of the Event and then pass it into the values array to get the actual value\n\tincrementField(GLOBAL.EXPERIENCE_VALUES[event], ['rooms', room, 'players', player, 'experience'])\n\t//  thisPlayer.experience += GLOBAL.EXPERIENCE_VALUES[data.event];\n\n\t// Determine the player's level based on experience\n\tlet oldLevel = getField(['rooms', room, 'players', player, 'level'])\n\tfor (let level of GLOBAL.EXPERIENCE_LEVELS) {\n\t\tif (getField(['rooms', room, 'players', player, 'level']) >= level) {\n\t\t\tsetField(GLOBAL.EXPERIENCE_LEVELS.indexOf(level) + 1, ['rooms', room, 'players', player, 'level'])\n\t\t}\n\t}\n\n\t// Check to see if the player leveled up\n\tif (getField(['rooms', room, 'players', player, 'level']) > oldLevel) {\n\t\tsocket.emit('levelUp', { newLevel: getField(['rooms', room, 'players', player, 'level']) })\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/experience.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "addExperience",
    "memberof": "src/server/utils/experience.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/experience.js~addExperience",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/experience.js",
    "importStyle": "{addExperience}",
    "description": "Adds experience to a given player.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The name of the event as specified in GLOBAL.EXPERIENCE_VALUES"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "The socket instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The ID of the room"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "player",
        "description": "ID of the player"
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "src/server/utils/framesync.js",
    "content": "import { distanceBetween, isInBounds, GLOBAL } from '../../client/js/global'\nimport { deleteObject, getField, setField } from '../server'\nimport { collisionDetect } from './collision'\nimport { tickCompound } from './compound'\n\n/**\n * Runs once a frame, per player.\n * @param {*} socket The socket.io instance\n * @param {string} room The name of the room\n * @param {*} thisPlayer The player object\n */\nexport function frameSync(socket, room, thisPlayer) {\n\tif (socket.connected) {\n\t\tlet thisRoom = getField(['rooms', room])\n\n\t\tif (thisRoom !== undefined) {\n\t\t\t// Distance checking for all objects\n\t\t\tlet tempObjects = {\n\t\t\t\tplayers: {},\n\t\t\t\tatoms: {},\n\t\t\t\tcompounds: {}\n\t\t\t}\n\n\t\t\t// Move compounds\n\t\t\tfor (let compound in thisRoom.compounds) {\n\t\t\t\tlet compoundRef = thisRoom.compounds[compound]\n\t\t\t\tif (isInBounds(compoundRef)) {\n\t\t\t\t\tsetField(compoundRef.posX + compoundRef.vx, ['rooms', room, 'compounds', compound, 'posX'])\n\t\t\t\t\tsetField(compoundRef.posY + compoundRef.vy, ['rooms', room, 'compounds', compound, 'posY'])\n\t\t\t\t\ttickCompound(getField(['rooms', room, 'compounds', compound]), room, socket)\n\t\t\t\t\t// compoundRef.posX += compoundRef.vx;\n\t\t\t\t\t// compoundRef.posY += compoundRef.vy;\n\t\t\t\t}\n\t\t\t\telse { // delete\n\t\t\t\t\tdeleteObject('compounds', compound, room, socket)\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Move atoms\n\t\t\tfor (let atom in thisRoom.atoms) {\n\t\t\t\tlet distance = distanceBetween(\n\t\t\t\t\t{ posX: thisRoom.atoms[atom].posX + GLOBAL.ATOM_RADIUS, posY: thisRoom.atoms[atom].posY - GLOBAL.ATOM_RADIUS },\n\t\t\t\t\t{ posX: thisPlayer.posX + GLOBAL.PLAYER_RADIUS, posY: thisPlayer.posY - GLOBAL.PLAYER_RADIUS })\n\t\t\t\t// Attractive force\n\t\t\t\tif (distance < GLOBAL.ATTRACTION_RADIUS && (thisRoom.atoms[atom].team === 'all' || thisPlayer.team === thisRoom.atoms[atom].team)) {\n\t\t\t\t\tlet theta = Math.atan2((thisPlayer.posY - thisRoom.atoms[atom].posY), (thisPlayer.posX - thisRoom.atoms[atom].posX))\n\n\t\t\t\t\t// Attraction is based on logarithmic algorithm\n\n\t\t\t\t\tsetField(1 / distance * Math.cos(theta) * GLOBAL.ATTRACTION_COEFFICIENT, ['rooms', room, 'atoms', atom, 'vx'])\n\t\t\t\t\tsetField(1 / distance * Math.sin(theta) * GLOBAL.ATTRACTION_COEFFICIENT, ['rooms', room, 'atoms', atom, 'vy'])\n\t\t\t\t\t// thisRoom.atoms[atom].vx = 1 / distance * Math.cos(theta) * GLOBAL.ATTRACTION_COEFFICIENT;\n\t\t\t\t\t// thisRoom.atoms[atom].vy = 1 / distance * Math.sin(theta) * GLOBAL.ATTRACTION_COEFFICIENT;\n\t\t\t\t\t// console.log(this.vx, this.vy, this.posX, this.posY);\n\t\t\t\t}\n\t\t\t\t// Atom slowing down\n\t\t\t\telse if (Math.abs(thisRoom.atoms[atom].vx) > GLOBAL.DEADZONE || Math.abs(thisRoom.atoms[atom].vy) > GLOBAL.DEADZONE) {\n\t\t\t\t\tsetField(thisRoom.atoms[atom].vx * GLOBAL.VELOCITY_STEP, ['rooms', room, 'atoms', atom, 'vx'])\n\t\t\t\t\tsetField(thisRoom.atoms[atom].vy * GLOBAL.VELOCITY_STEP, ['rooms', room, 'atoms', atom, 'vy'])\n\t\t\t\t\t// thisRoom.atoms[atom].vx *= GLOBAL.VELOCITY_STEP;\n\t\t\t\t\t// thisRoom.atoms[atom].vy *= GLOBAL.VELOCITY_STEP;\n\t\t\t\t}\n\n\t\t\t\tif (Math.abs(thisRoom.atoms[atom].vx) <= GLOBAL.DEADZONE) {\n\t\t\t\t\tsetField(0, ['rooms', room, 'atoms', atom, 'vx'])\n\t\t\t\t}\n\t\t\t\tif (Math.abs(thisRoom.atoms[atom].vy) <= GLOBAL.DEADZONE) {\n\t\t\t\t\tsetField(0, ['rooms', room, 'atoms', atom, 'vy'])\n\t\t\t\t}\n\n\t\t\t\t// Move atom\n\t\t\t\tsetField(thisRoom.atoms[atom].posX + thisRoom.atoms[atom].vx, ['rooms', room, 'atoms', atom, 'posX'])\n\t\t\t\tsetField(thisRoom.atoms[atom].posY + thisRoom.atoms[atom].vy, ['rooms', room, 'atoms', atom, 'posY'])\n\t\t\t\t// thisRoom.atoms[atom].posX += thisRoom.atoms[atom].vx;\n\t\t\t\t// thisRoom.atoms[atom].posY += thisRoom.atoms[atom].vy;\n\t\t\t}\n\n\t\t\t// Populate tempObjects\n\t\t\tfor (let objType in tempObjects) {\n\t\t\t\tfor (let obj in thisRoom[objType]) {\n\t\t\t\t\tif (distanceBetween(thisRoom[objType][obj], thisPlayer) < GLOBAL.DRAW_RADIUS) {\n\t\t\t\t\t\ttempObjects[objType][obj] = thisRoom[objType][obj]\n\t\t\t\t\t}\n\t\t\t\t\t// else if (objType === 'players') { // Player left view\n\t\t\t\t\t// \tsocket.emit('serverSendObjectRemoval', { id: obj, type: objType })\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Run collision detection script\n\t\t\tcollisionDetect(socket, room, thisPlayer, tempObjects)\n\n\t\t\tsocket.emit('objectSync', tempObjects)\n\n\t\t\tif (thisRoom.started) {\n\t\t\t\tsocket.emit('time', { time: thisRoom.time.formattedTime })\n\t\t\t}\n\n\t\t\tif (thisRoom !== undefined && !thisRoom.started) {\n\t\t\t\t// Send over the room player information\n\t\t\t\t// socket.to(room).broadcast.emit('roomInfo', thisRoom.players);\n\t\t\t\tsocket.emit('roomInfo', {\n\t\t\t\t\tplayers: thisRoom.players,\n\t\t\t\t\tcanStart: (thisRoom.type === '2v2' && Object.keys(thisRoom.players).length === 4) ||\n\t\t\t\t\t\t((thisRoom.type === '4v4' || thisRoom.type === '2v2v2v2') && Object.keys(thisRoom.players).length === 8) ||\n\t\t\t\t\t\t(thisRoom.type === '4v4v4v4' && Object.keys(thisRoom.players).length === 16) ||\n\t\t\t\t\t\tthisRoom.type === 'private'\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/framesync.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "frameSync",
    "memberof": "src/server/utils/framesync.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/framesync.js~frameSync",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/framesync.js",
    "importStyle": "{frameSync}",
    "description": "Runs once a frame, per player.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "The socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The name of the room"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "thisPlayer",
        "description": "The player object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/server/utils/matchmaker.js",
    "content": "import { GLOBAL } from '../../client/js/global'\nimport { getField, setField } from '../server'\nimport { generateID, getTeamColors } from './serverutils'\n\n/**\n * Matchmaking system for public matches. Runs after initial socket.io server connection, but before connecting to a server.\n * @param {*} socket Socket.io instance\n * @param {string} room Name of room\n * @param {string} team Name of team\n * @returns The new room that has been assigned\n */\nexport function roomMatchmaker (socket, room, team) {\n\tlet validJoin = false // This join attempt was valid.\n\tlet roomType = socket.handshake.query.roomType\n\n\t// Make sure the room you are trying to join is valid\n\tif (room !== GLOBAL.NO_ROOM_IDENTIFIER && getField(['rooms', room]) !== undefined && !getField(['rooms', room]).joinable && getField(['rooms', room]) !== undefined) { // Room full\n\t\tsocket.emit('connectionError', { msg: 'The room ' + room + ' has started or is full!' })\n\t}\n\n\tif (team !== GLOBAL.NO_TEAM_IDENTIFIER && getField(['teams', team]) !== undefined && getField(['teams', team]).room !== undefined) {\n\t\t// Make sure everything is compatible\n\t\tif (getField(['rooms', getField(['teams', team]).room]) !== undefined && getField(['rooms', getField(['teams', team]).room]).type !== roomType) { // Wrong room type\n\t\t\tsocket.emit('connectionError', { msg: 'Your team is playing in a ' + getField('rooms', getField(['teams', team]).room).type + ' room, but you are trying to join a ' + roomType + ' room!' })\n\t\t}\n\t\telse if (!getField(['teams', team, 'joinable'])) { // Team full\n\t\t\tsocket.emit('connectionError', { msg: 'Your team is already in game or full!' })\n\t\t}\n\t\telse { // is joinable\n\t\t\tvalidJoin = true\n\t\t\troom = getField(['teams', team, 'room'])\n\n\t\t\t// Equivalent to teams[socket.handshake.query.team].players.push(socket.id);\n\t\t\tsetField(socket.id, ['teams', team, 'players', getField(['teams', team, 'players']).length ])\n\n\t\t\tif (((roomType === '2v2v2v2' || roomType === '2v2') && getField(['teams', team, 'players']).length === 2) || getField(['teams', team, 'players']).length === 4) {\n\t\t\t\tsetField(false, ['teams', team, 'joinable'])\n\t\t\t}\n\t\t}\n\t}\n\t// Team not found or need to join a random team\n\telse {\n\t\t// Try joining a room\n\t\tfor (let roomName in getField(['rooms'])) {\n\t\t\tif (roomName.indexOf(roomType) > -1) {\n\t\t\t\t// Auto team\n\t\t\t\tif (team === GLOBAL.NO_TEAM_IDENTIFIER) {\n\t\t\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\t\t\tif (getField(['rooms', roomName, 'teams', room + i]) && getField(['rooms', roomName, 'teams', room + i, 'joinable'])) {\n\t\t\t\t\t\t\troom = roomName\n\t\t\t\t\t\t\tteam = room + i\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// No random teams are joinable- test if this room is full or not\n\t\t\t\t\tif (team === GLOBAL.NO_TEAM_IDENTIFIER) {\n\t\t\t\t\t\tif (((roomType === '4v4v4v4' || roomType === '2v2v2v2') && getField(['rooms', roomName, 'teams']).length < 4) || getField(['rooms', roomName, 'teams']).length < 2) {\n\t\t\t\t\t\t\troom = roomName\n\t\t\t\t\t\t\tteam = room + '_' + (getField(['rooms', roomName, 'teams']).length)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Custom team\n\t\t\t\telse if (((roomType === '4v4v4v4' || roomType === '2v2v2v2') && getField(['rooms', roomName, 'teams']).length < 4) || getField(['rooms', roomName, 'teams']).length < 2) {\n\t\t\t\t\troom = roomName\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// No matching rooms - must create a new room\n\t\tif (room === GLOBAL.NO_ROOM_IDENTIFIER) {\n\t\t\troom = 'NA_' + roomType + '_' + generateID()\n\t\t\tif (team === GLOBAL.NO_TEAM_IDENTIFIER) {\n\t\t\t\tteam = room + '_0'\n\t\t\t}\n\t\t}\n\n\t\t// Custom room auto team\n\t\tif (team === GLOBAL.NO_TEAM_IDENTIFIER) {\n\t\t\tfor (let i = 0; i < 4; i++) {\n\t\t\t\tif (getField(['rooms', room]) && getField(['rooms', room, 'teams', room + '_' + i]) && getField(['rooms', room, 'teams', room + '_' + i, 'joinable'])) {\n\t\t\t\t\tteam = room + i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// No random teams are joinable make a new team in custom room\n\t\tif (team === GLOBAL.NO_TEAM_IDENTIFIER) {\n\t\t\ttry {\n\t\t\t\tteam = room + '_' + (getField(['rooms', room, 'teams']).length)\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\tteam = room + '_0'\n\t\t\t}\n\t\t}\n\n\t\t// Make team\n\t\tsetField({\n\t\t\troom: room,\n\t\t\tplayers: [socket.id],\n\t\t\tjoinable: true\n\t\t}, ['teams', team])\n\n\t\tvalidJoin = true\n\t}\n\n\t// Join custom room\n\tif (validJoin) {\n\t\tsocket.join(room, () => {\n\t\t\tconsole.log('[Server] '.bold.blue + `Player ${socket.handshake.query.name} (${socket.id}) joined room ${room} in team ${team}`.yellow)\n\t\t})\n\t}\n\n\treturn { room: room, team: team }\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/matchmaker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "roomMatchmaker",
    "memberof": "src/server/utils/matchmaker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/matchmaker.js~roomMatchmaker",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/matchmaker.js",
    "importStyle": "{roomMatchmaker}",
    "description": "Matchmaking system for public matches. Runs after initial socket.io server connection, but before connecting to a server.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The new room that has been assigned"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "Socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "Name of room"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "Name of team"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The new room that has been assigned"
    }
  },
  {
    "__docId__": 247,
    "kind": "file",
    "name": "src/server/utils/ondamage.js",
    "content": "import { GLOBAL } from '../../client/js/global'\nimport { getField, setField, incrementField } from '../server'\nimport { getTeamNumber } from './serverutils'\nimport { tmpdir } from 'os'\nimport { spawnAtom } from './atoms'\n\n/**\n * ondamage.js\n * Contains functions:\n *  - damage() Runs when a player gets damaged. Updates scores and checks if a player has been killed.\n *  - splash() Runs when a collision needs to cause splash damage. Creates explosion effect and deals extra damage.\n */\n\n/**\n * Changes the health of the player by the amount given.\n * @param {*} data The data sent by the client. Contains:\n *  - damage (number)\n *  - player (id string of player that was hit)\n *  - id (id string of compound)\n *  - sentBy (id string of player that sent compound)\n * @param {string} room This room.\n * @param {*} socket This socket.\n * Must include the player id and amount to damage.\n * Amount may be negative (for health boost).\n */\nexport function damage (data, room, socket) {\n\tlet thisRoom = getField(['rooms', room])\n\tlet thisPlayer = thisRoom.players[data.player]\n\n\tif (thisPlayer !== undefined) {\n\t\t// thisPlayer.health -= data.damage;\n\t\tsetField(thisPlayer.health - data.damage, ['rooms', room, 'players', data.player, 'health'])\n\n\t\t// Add damage to database\n\t\tif (thisPlayer.damagedBy[data.sentBy] === undefined) {\n\t\t\tsetField(0, ['rooms', room, 'players', data.player, 'damagedBy', data.sentBy])\n\t\t}\n\t\t// thisPlayer.damagedBy[data.sentBy] += data.damage;\n\t\tsetField(thisPlayer.damagedBy[data.sentBy] + data.damage, ['rooms', room, 'players', data.player, 'damagedBy', data.sentBy])\n\n\t\t// Check if the player has died.\n\t\tif (thisPlayer.health <= 0) {\n\t\t\t// console.log(thisRoom.teams.indexOf(socket.handshake.query.team));\n\n\t\t\t// Releases atoms and deletes the entire atoms array in player\n\t\t\tfor (let at in thisPlayer.atomList) {\n\t\t\t\tfor (let i = 0; i < GLOBAL.MAX_DEATH_ATOMS && i < thisPlayer.atomList[at]; i++) {\n\t\t\t\t\tspawnAtom(thisPlayer.posX, thisPlayer.posY, at, room, false)\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (let at in thisPlayer.atomList) {\n\t\t\t\tsetField(0, ['rooms', room, 'players', thisPlayer, 'atomList', at])\n\t\t\t}\n\n\t\t\t// Reset position to spawnpoint\n\t\t\tsetField(GLOBAL.SPAWN_POINTS[getTeamNumber(room, thisPlayer.team)].x * GLOBAL.GRID_SPACING * 2, ['rooms', room, 'players', data.player, 'posX'])\n\t\t\tsetField(GLOBAL.SPAWN_POINTS[getTeamNumber(room, thisPlayer.team)].y * GLOBAL.GRID_SPACING * 2, ['rooms', room, 'players', data.player, 'posY'])\n\t\t\tsetField(GLOBAL.MAX_HEALTH, ['rooms', room, 'players', data.player, 'health'])\n\t\t\tsetField(true, ['rooms', room, 'players', data.player, 'dead']) // This will be reset when it has been verified that the player has been placed at the proper spawnpoint\n\n\t\t\tif (socket.id === data.player) {\n\t\t\t\tlet pl = getField(['rooms', room, 'players', data.player])\n\t\t\t\tsocket.emit('serverSendPlayerDeath', { posX: pl.posX, posY: pl.posY, vx: pl.vx, vy: pl.vy })\n\t\t\t}\n\n\t\t\tif (data.id !== undefined) {\n\t\t\t\t// Read damagedBy to award points, clear in the process\n\t\t\t\tlet max = null\n\t\t\t\tlet dataToSend\n\t\t\t\tfor (let pl in thisPlayer.damagedBy) {\n\t\t\t\t\tdataToSend = {\n\t\t\t\t\t\tplayer: pl,\n\t\t\t\t\t\tteamSlot: getTeamNumber(room, thisRoom.compounds[data.id].sendingTeam),\n\t\t\t\t\t\tincrement: GLOBAL.ASSIST_SCORE,\n\t\t\t\t\t\tkill: false\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add to team score, checking if team score is initialized\n\t\t\t\t\tsetField((thisRoom.teams[dataToSend.teamSlot].score === undefined) ? dataToSend.increment : thisRoom.teams[dataToSend.teamSlot].score + dataToSend.increment, ['rooms', room, 'teams', dataToSend.teamSlot, 'score'])\n\n\t\t\t\t\tsocket.to(room).broadcast.emit('serverSendScoreUpdate', dataToSend)\n\t\t\t\t\tsocket.emit('serverSendScoreUpdate', dataToSend)\n\t\t\t\t\tif (max === null || thisPlayer.damagedBy[pl] > thisPlayer.damagedBy[max]) {\n\t\t\t\t\t\tmax = pl\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Add to score of person who dealt the most damage\n\t\t\t\tdataToSend.player = max\n\t\t\t\tdataToSend.increment = GLOBAL.KILL_SCORE - GLOBAL.ASSIST_SCORE\n\t\t\t\tdataToSend.kill = true\n\t\t\t\tsocket.to(room).broadcast.emit('serverSendScoreUpdate', dataToSend)\n\t\t\t\tsocket.emit('serverSendScoreUpdate', dataToSend)\n\n\t\t\t\t// Add to team score\n\t\t\t\tincrementField(dataToSend.increment, ['rooms', room, 'teams', dataToSend.teamSlot, 'score'])\n\n\t\t\t\t// Clear damagedBy values\n\t\t\t\tfor (let pl in thisPlayer.damagedBy) {\n\t\t\t\t\tsetField(0, ['rooms', room, 'players', data.player, 'damagedBy', pl])\n\t\t\t\t}\n\n\t\t\t\t// Check if a team won\n\t\t\t\tlet highScores = [] // Possible winning teams\n\t\t\t\tlet maxScore = 0\n\t\t\t\tfor (let tm of thisRoom.teams) {\n\t\t\t\t\tif (tm.score >= GLOBAL.WINNING_SCORE) {\n\t\t\t\t\t\thighScores.push(tm)\n\t\t\t\t\t\tif (maxScore < tm.score) {\n\t\t\t\t\t\t\tmaxScore = tm.score\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let winningTm of highScores) {\n\t\t\t\t\tif (winningTm.score === maxScore) {\n\t\t\t\t\t\tlet dataToSend = {\n\t\t\t\t\t\t\twinner: winningTm\n\t\t\t\t\t\t\t// teamScore: thisRoom.teams[dataToSend.teamSlot].score\n\t\t\t\t\t\t\t// other data here TODO post ranking\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsocket.to(room).broadcast.emit('serverSendWinner', dataToSend)\n\t\t\t\t\t\tsocket.emit('serverSendWinner', dataToSend)\n\n\t\t\t\t\t\t// Close room after delay (kick all players)\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tsocket.emit('serverSendDisconnect', {})\n\t\t\t\t\t\t\tsocket.to(room).broadcast.emit('serverSendDisconnect', {})\n\t\t\t\t\t\t}, GLOBAL.ROOM_DELETE_DELAY)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tconsole.warn('Player of ID ' + data.player + ' couldn\\'t be damaged because they don\\'t exist!')\n\t}\n}\n\nexport function damageTile (tileID, damageAmount, player, room, socket) {\n\tincrementField(-damageAmount, ['rooms', room, 'tiles', tileID, 'health'])\n\n\t// console.log('tile ' + tileID + ' is now at ' + getField(['rooms', room, 'tiles', tileID, 'health']))\n\tlet hpData = {\n\t\tnewHealth: getField(['rooms', room, 'tiles', tileID, 'health']),\n\t\ttileX: getField(['rooms', room, 'tiles', tileID, 'globalX']),\n\t\ttileY: getField(['rooms', room, 'tiles', tileID, 'globalY'])\n\t}\n\tsocket.to(room).emit('serverSendTileHealth', hpData)\n\tsocket.emit('serverSendTileHealth', hpData)\n\n\t// Check if tile is fully captured\n\tif (getField(['rooms', room, 'tiles', tileID, 'health']) <= 0) {\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tif (getField(['rooms', room, 'teams', i]).name === getField(['rooms', room, 'players', player, 'team'])) {\n\t\t\t\t// Notify clients of texture change\n\t\t\t\tlet data = {\n\t\t\t\t\tteamNumber: i,\n\t\t\t\t\ttileX: getField(['rooms', room, 'tiles', tileID, 'globalX']),\n\t\t\t\t\ttileY: getField(['rooms', room, 'tiles', tileID, 'globalY'])\n\t\t\t\t}\n\t\t\t\tsocket.to(room).emit('serverSendTileCapture', data)\n\t\t\t\tsocket.emit('serverSendTileCapture', data)\n\t\t\t\tlet tileCaptureMSG = {\n\t\t\t\t\tmessage: 'A ' + getField(['rooms', room, 'tiles', tileID, 'type']) + ' has been captured by ' + getField(['rooms', room, 'players', player, 'name']),\n\t\t\t\t\tsendingTeam: getField(['rooms', room, 'players', player, 'team'])\n\t\t\t\t}\n\t\t\t\tsocket.to(room).emit('serverAnnouncement', tileCaptureMSG)\n\t\t\t\tsocket.emit('serverAnnouncement', tileCaptureMSG)\n\n\t\t\t\t// Set capture status\n\t\t\t\tsetField(true, ['rooms', room, 'tiles', tileID, 'captured'])\n\t\t\t\tsetField(getField(['rooms', room, 'players', player, 'team']), ['rooms', room, 'tiles', tileID, 'owner'])\n\n\t\t\t\t// Distribute points\n\t\t\t\tincrementField(GLOBAL.CAPTURE_SCORE, ['rooms', room, 'teams', i, 'score'])\n\n\t\t\t\t// Reset health\n\t\t\t\tsetField(GLOBAL[('MAX_' + getField(['rooms', room, 'tiles', tileID, 'type']) + '_HEALTH').toUpperCase()], ['rooms', room, 'tiles', tileID, 'health'])\n\t\t\t\tlet hpData = {\n\t\t\t\t\tnewHealth: getField(['rooms', room, 'tiles', tileID, 'health']),\n\t\t\t\t\ttileX: getField(['rooms', room, 'tiles', tileID, 'globalX']),\n\t\t\t\t\ttileY: getField(['rooms', room, 'tiles', tileID, 'globalY'])\n\t\t\t\t}\n\t\t\t\tsocket.to(room).emit('serverSendTileHealth', hpData)\n\t\t\t\tsocket.emit('serverSendTileHealth', hpData)\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * TODO\n */\nexport function splash () {\n\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/ondamage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "damage",
    "memberof": "src/server/utils/ondamage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/ondamage.js~damage",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/ondamage.js",
    "importStyle": "{damage}",
    "description": "Changes the health of the player by the amount given.",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The data sent by the client. Contains:\n - damage (number)\n - player (id string of player that was hit)\n - id (id string of compound)\n - sentBy (id string of player that sent compound)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "This room."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "This socket.\nMust include the player id and amount to damage.\nAmount may be negative (for health boost)."
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "damageTile",
    "memberof": "src/server/utils/ondamage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/ondamage.js~damageTile",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/ondamage.js",
    "importStyle": "{damageTile}",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "tileID",
        "types": [
          "*"
        ]
      },
      {
        "name": "damageAmount",
        "types": [
          "*"
        ]
      },
      {
        "name": "player",
        "types": [
          "*"
        ]
      },
      {
        "name": "room",
        "types": [
          "*"
        ]
      },
      {
        "name": "socket",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "splash",
    "memberof": "src/server/utils/ondamage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/ondamage.js~splash",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/ondamage.js",
    "importStyle": "{splash}",
    "description": "TODO",
    "lineNumber": 195,
    "params": [],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/server/utils/serverinit.js",
    "content": "import { getField, setField } from '../server'\nimport { MAP_LAYOUT, TILES, TILE_NAMES } from '../../client/js/obj/tiles'\nimport { GLOBAL } from '../../client/js/global'\nimport { spawnAtomAtVent } from './atoms'\nimport colors from 'colors' // Console colors :D\nimport { generateID } from './serverutils'\n\n/**\n * Methods to run on server initialization and player connect initialization.\n */\n\n/**\n * Global initialiation. Run once on server start.\n */\nexport function initGlobal () {\n\t// Set up atom spawning three times a second. This is processed outside of the player specific behavior because more players joining !== more resources spawn.\n\tsetInterval(() => {\n\t\tfor (let room in getField(['rooms'])) {\n\t\t\tif (getField(['rooms', room, 'started'])) {\n\t\t\t\tlet tiles = getField(['rooms', room, 'tiles'])\n\t\t\t\tfor (let tile in tiles) {\n\t\t\t\t\tif (tiles[tile].type === 'spawner') {\n\t\t\t\t\t\tspawnAtomAtVent(tiles[tile].globalY, tiles[tile].globalX, room, tiles[tile].owner, false)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, GLOBAL.ATOM_SPAWN_DELAY)\n\n\t// Timer\n\tsetInterval(() => {\n\t\tfor (let room in getField(['rooms'])) {\n\t\t\tif (getField(['rooms', room, 'started'])) {\n\t\t\t\tlet seconds = getField(['rooms', room, 'time', 'seconds'])\n\n\t\t\t\tlet minutes = getField(['rooms', room, 'time', 'minutes'])\n\n\t\t\t\t// Equivalent to rooms[room].time.seconds++;\n\t\t\t\tsetField(seconds + 1, ['rooms', room, 'time', 'seconds'])\n\n\t\t\t\tif (seconds >= 60) {\n\t\t\t\t\tsetField(0, ['rooms', room, 'time', 'seconds'])\n\t\t\t\t\tsetField(minutes + 1, ['rooms', room, 'time', 'minutes'])\n\t\t\t\t}\n\n\t\t\t\t// Set formatted Time\n\t\t\t\tsetField(minutes + ':' + ((seconds < 10) ? '0' : '') + seconds, ['rooms', room, 'time', 'formattedTime'])\n\t\t\t}\n\t\t}\n\t}, 1000)\n}\n\n/**\n * Run on every player join.\n * @param {*} socket The socket.io instance\n * @param {string} room The name of the room that the player belongs to\n * @param {string} team The name of the team that the player belongs to\n */\nexport function initPlayer (socket, room, team) {\n\t// Initialize room array and spawn atoms on first player join\n\tlet thisRoom = getField(['rooms', room])\n\n\t// Set up room if it does not exist\n\tif (thisRoom === undefined || thisRoom === null) {\n\t\tconsole.log('[Server] '.bold.blue + 'Setting up room '.yellow + ('' + room).bold.red + ' as type ' + socket.handshake.query.roomType)\n\t\tsetField({\n\t\t\tjoinable: true,\n\t\t\tteams: [],\n\t\t\tatoms: {},\n\t\t\tcompounds: {},\n\t\t\ttype: socket.handshake.query.roomType,\n\t\t\ttime: {\n\t\t\t\tminutes: 0,\n\t\t\t\tseconds: 0,\n\t\t\t\tformattedTime: '0:00'\n\t\t\t}\n\t\t}, ['rooms', room])\n\n\t\t// Set up capturable tiles\n\t\tsetField({}, ['rooms', room, 'tiles'])\n\t\t// TODO support multiple map layouts\n\t\tfor (let row = 0; row < MAP_LAYOUT.length; row++) {\n\t\t\tfor (let col = 0; col < MAP_LAYOUT[row].length; col++) {\n\t\t\t\tlet currTile = TILES[TILE_NAMES[MAP_LAYOUT[row][col]]]\n\t\t\t\tif (currTile.type === 'spawner' || currTile.type === 'stronghold' || currTile.type === 'nucleus') {\n\t\t\t\t\tlet tileID = generateID()\n\t\t\t\t\tsetField({\n\t\t\t\t\t\tid: tileID,\n\t\t\t\t\t\ttype: currTile.type,\n\t\t\t\t\t\tglobalX: col,\n\t\t\t\t\t\tglobalY: row,\n\t\t\t\t\t\tcaptured: false,\n\t\t\t\t\t\towner: 'all',\n\t\t\t\t\t\thealth: GLOBAL[('MAX_' + currTile.type + '_HEALTH').toUpperCase()]\n\t\t\t\t\t}, ['rooms', room, 'tiles', tileID])\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthisRoom = getField(['rooms', room])\n\n\t// Add team to database\n\n\t// Equivalent to rooms[room].teams.push({ name: team });\n\tif (getField(['teams', team, 'players']).length === 1) {\n\t\tsetField({ name: team }, ['rooms', room, 'teams', getField(['rooms', room, 'teams']).length])\n\t}\n\n\t// Check if room is full\n\tif (((thisRoom.type === '4v4' || thisRoom.type === '2v2') && thisRoom.teams.length === 2) || thisRoom.teams.length === 4) {\n\t\tsetField(false, ['rooms', room, 'joinable'])\n\t}\n\n\t// Create new player in rooms object\n\tsetField({\n\t\tid: socket.id,\n\t\tname: socket.handshake.query.name,\n\t\troom: socket.handshake.query.room,\n\t\tteam: team,\n\t\thealth: GLOBAL.MAX_HEALTH,\n\t\tposX: GLOBAL.SPAWN_POINTS[thisRoom.teams.length - 1].x * GLOBAL.GRID_SPACING * 2,\n\t\tposY: GLOBAL.SPAWN_POINTS[thisRoom.teams.length - 1].y * GLOBAL.GRID_SPACING * 2,\n\t\tvx: 0,\n\t\tvy: 0,\n\t\texperience: 0,\n\t\tdamagedBy: {}\n\t}, ['rooms', room, 'players', socket.id])\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/serverinit.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "initGlobal",
    "memberof": "src/server/utils/serverinit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverinit.js~initGlobal",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverinit.js",
    "importStyle": "{initGlobal}",
    "description": "Global initialiation. Run once on server start.",
    "lineNumber": 15,
    "params": [],
    "return": null
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "initPlayer",
    "memberof": "src/server/utils/serverinit.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverinit.js~initPlayer",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverinit.js",
    "importStyle": "{initPlayer}",
    "description": "Run on every player join.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "socket",
        "description": "The socket.io instance"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The name of the room that the player belongs to"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "team",
        "description": "The name of the team that the player belongs to"
      }
    ],
    "return": null
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/server/utils/serverutils.js",
    "content": "import { getField } from '../server'\nimport { GLOBAL } from '../../client/js/global'\n\n/**\n * Misc. standalone utilities for the server.\n */\n\n/**\n* Returns a random number between between 10000000 and 99999999, inclusive.\n* TODO Make every ID guaranteed unique\n* @returns random id between 10000000 and 99999999\n*/\nexport function generateID () {\n\treturn Math.floor(Math.random() * 90000000) + 10000000\n}\n\n/**\n * Returns the index of the given team within the team array of the given room.\n * @param {string} room The room name to check\n * @param {string} teamName The team name to return the number of\n */\nexport function getTeamNumber (room, teamName) {\n\tfor (let i = 0; i < getField(['rooms', room, 'teams']).length; i++) {\n\t\tif (getField(['rooms', room, 'teams'])[i].name === teamName) {\n\t\t\treturn i\n\t\t}\n\t}\n\n\treturn -1 // Team not found\n}\n\n/**\n * Returns the team colors object (see client socket.js for more information on the format)\n * @param {string} room The room name to check\n */\nexport function getTeamColors (room) {\n\tlet teamObj = getField(['rooms', room, 'teams'])\n\n\tlet result = {}\n\tfor (let i = 0; i < 4; i++) {\n\t\tif (teamObj[i]) {\n\t\t\tresult[teamObj[i].name] = i\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * Returns the serverside ID of the tile at this location.\n * If the tile is not capturable, then returns false.\n * @param {*} globalLocation Contains globalX and globalY. Location on the map\n * @param {string} room The room name to check\n */\nexport function getTileID (globalLocation, room) {\n\tfor (let tileID in getField(['rooms', room, 'tiles'])) {\n\t\tlet tile = getField(['rooms', room, 'tiles', tileID])\n\t\tif (tile.globalX === globalLocation.globalX && tile.globalY === globalLocation.globalY) {\n\t\t\treturn tileID\n\t\t}\n\t}\n\n\treturn false\n}\n",
    "static": true,
    "longname": "/home/dbqeo/Documents/AtomBlast.io/src/server/utils/serverutils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "generateID",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~generateID",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{generateID}",
    "description": "Returns a random number between between 10000000 and 99999999, inclusive.\nTODO Make every ID guaranteed unique",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "random id between 10000000 and 99999999"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "random id between 10000000 and 99999999"
    },
    "params": []
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "getTeamNumber",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~getTeamNumber",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{getTeamNumber}",
    "description": "Returns the index of the given team within the team array of the given room.",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room name to check"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "teamName",
        "description": "The team name to return the number of"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "getTeamColors",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~getTeamColors",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{getTeamColors}",
    "description": "Returns the team colors object (see client socket.js for more information on the format)",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room name to check"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "getTileID",
    "memberof": "src/server/utils/serverutils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/utils/serverutils.js~getTileID",
    "access": "public",
    "export": true,
    "importPath": "atomblast.io/src/server/utils/serverutils.js",
    "importStyle": "{getTileID}",
    "description": "Returns the serverside ID of the tile at this location.\nIf the tile is not capturable, then returns false.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "globalLocation",
        "description": "Contains globalX and globalY. Location on the map"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "room",
        "description": "The room name to check"
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# AtomBlast.io\nOur first attempt at an multiplayer IO game.\n\n\n[![Inline docs](https://inch-ci.org/github/BananiumLabs/AtomBlast.io.svg?branch=pixi)](https://inch-ci.org/github/BananiumLabs/AtomBlast.io)\n\n[Click here](https://docs.google.com/document/d/1WfPeLDOq0typScXC974l0_CQz-JU2uzMb1uliLe71E4/edit#) to view our concept doc. Contact us at admin@bananiumlabs.com to request access.\n",
    "longname": "/home/dbqeo/Documents/AtomBlast.io/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"atomblast.io\",\n  \"version\": \"1.0.0\",\n  \"description\": \"First attempt at multiplayer online io game\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"(jest && printf \\\" \\\\033[1;40;32m Unit testing passed.\\\\033[m \\\") || (printf \\\" \\\\033[1;41;33m Unit testing failed.\\\\033[m \\\" && exit 1)\",\n    \"watch\": \"watchify src/client/js/app.js -o src/client/js/public/build.js -v\",\n    \"server\": \"nodemon src/server/entry.js\",\n    \"start\": \"npm-run-all --parallel watch server\",\n    \"build\": \"browserify src/client/js/app.js -o  src/client/js/public/build.js\",\n    \"lint\": \"chmod +x ./scripts/lint.sh && bash -c \\\"./scripts/lint.sh\\\"\",\n    \"lint-compatibility-mode\": \"./node_modules/.bin/eslint ./src/\",\n    \"fix-lint\": \"chmod +x ./scripts/fix_lint.sh && bash -c \\\"./scripts/fix_lint.sh\\\"\",\n    \"test-env\": \"chmod +x ./scripts/test_env.sh && bash -c \\\"./scripts/test_env.sh\\\"\",\n    \"precommitold\": \"npm run -s lint && printf \\\"Running unit testing..\\\" && npm test\",\n    \"docs\": \"esdoc\",\n    \"update\": \"node node_modules/npm-check/bin/cli.js -u\",\n    \"disableannoyinglineendingwarning\": \"git config --global core.safecrlf false && printf \\\"Annoying line ending warnings has been disabled.\\\"\",\n    \"generate-spritesheet\": \"spritesheet-js src/client/assets/spritesheet/*/*/*.png src/client/assets/spritesheet/*/*.png --path src/client/assets/ --padding 5\"\n\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/BananiumLabs/AtomBlast.io.git\"\n  },\n  \"keywords\": [\n    \"io\",\n    \"game\",\n    \"atomblast\",\n    \"atom\",\n    \"pixi\"\n  ],\n  \"author\": \"Bananium Labs\",\n  \"license\": \"MIT\",\n  \"contributors\": [\n    \"Ben Cuan <ben@bananiumlabs.com> (https://github.com/dbqeo)\",\n    \"Vikram Peddinti <vikram@bananiumlabs.com> (https://github.com/darkflamex1)\",\n    \"Eric Qian <eric@enumc.com> (https://github.com/EnumC)\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/BananiumLabs/AtomBlast.io/issues\"\n  },\n  \"homepage\": \"https://github.com/BananiumLabs/AtomBlast.io#readme\",\n  \"dependencies\": {\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-register\": \"^6.26.0\",\n    \"colors\": \"^1.3.3\",\n    \"express\": \"^4.16.4\",\n    \"nipplejs\": \"^0.8.0\",\n    \"pixi.js\": \"^4.8.4\",\n    \"socket.io\": \"^2.2.0\",\n    \"sweetalert\": \"^2.1.2\"\n  },\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-preset-es2015\": \"^6.24.1\",\n    \"babelify\": \"^8.0.0\",\n    \"browserify\": \"^16.2.3\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.11.1\",\n    \"husky\": \"^1.3.1\",\n    \"jest\": \"^23.6.0\",\n    \"nodemon\": \"^1.18.9\",\n    \"npm-check\": \"^5.9.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"npm-run-parallel\": \"^0.6.0\",\n    \"watchify\": \"^3.11.0\",\n    \"spritesheet-js\": \"^1.2.6\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      [\n        \"babelify\",\n        {\n          \"presets\": [\n            \"es2015\"\n          ]\n        }\n      ]\n    ]\n  },\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"npm run -s lint && printf \\\"Generating Documentation...\\\" && npm run docs && printf \\\"===Documentation Generation Ended===\\\" \",\n      \"pre-push\": \"chmod +x ./scripts/prepush.sh && bash -c \\\"./scripts/prepush.sh\\\" \"\n    }\n  }\n}\n",
    "longname": "/home/dbqeo/Documents/AtomBlast.io/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]